<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brewlin&#39;s Wiki</title>
  
  <subtitle>found everthing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.brewlin.com/"/>
  <updated>2020-11-12T07:00:35.265Z</updated>
  <id>http://wiki.brewlin.com/</id>
  
  <author>
    <name>brewlin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于保守式GC</title>
    <link href="http://wiki.brewlin.com/wiki/blog/gc-learning/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/8.%E4%BF%9D%E5%AE%88%E5%BC%8Fgc/"/>
    <id>http://wiki.brewlin.com/wiki/blog/gc-learning/算法实现/8.保守式gc/</id>
    <published>2020-11-09T15:59:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/blog/gc-learning/RXBIFNEGTM.png" alt=""></p><p>当前所有的gc实现都是基于<code>保守式gc</code>实现的，特点就是实现简单、容易理解，对应用层友好</p><h1 id="保守gc的示例"><a href="#保守gc的示例" class="headerlink" title="保守gc的示例"></a>保守gc的示例</h1><p>比如一个内存分配如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gc.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></span><br><span class="line">        .....</span><br><span class="line">    &#125;Obj;</span><br><span class="line">    </span><br><span class="line">    Obj* p = gc_malloc(<span class="keyword">sizeof</span>(Obj);</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没有任何依赖，只需要调用<code>gc_malloc()</code>分配一块空间即可，不需要应用层去操心如(标记，内嵌指针啥的)，实现简单</p><h1 id="保守gc的缺陷"><a href="#保守gc的缺陷" class="headerlink" title="保守gc的缺陷"></a>保守gc的缺陷</h1><p>在这简单的背后自然也有保守式gc的一个<code>缺陷</code>,那就是<code>不能识别指针和非指针</code>。接着上上面的函数来说,举个例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">0x555555</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内存不够了 自动执行gc</span></span><br><span class="line">    <span class="keyword">void</span>* pp = gc_malloc(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>调用<code>test</code>函数,加入该函数内p的指针刚好也是 <code>0x555555</code></li><li><code>test函数</code>返回后继续执行，此时栈上有一个<code>double</code>变量，且值刚好也是<code>0x555555</code> 和上面test函数的指针值相同</li><li>假如再次申请空间时，内存不够了，默认启动<code>gc</code>垃圾回收</li><li>首先: test作用域已经退出了，在进行root扫描时(可以先去看<a href="./什么是root">什么是root?</a>) <code>Obj *p</code>已经是不可达对象，称为垃圾对象</li><li>但是: 在main中root扫描，扫到了 <code>double p</code> 且刚好该值是我们实现的堆里的一个合法地址</li><li>最终: 导致test的p本来该回收，但是因为 <code>double p</code>导致了回收失败</li></ol><p>这就是保守式gc，某些情况下会无法<code>准确识别指针 or 非指针</code>,导致内存得不到释放</p><p>当然现代很多语言都是基于保守式gc，也有很多对策来降低这种误差</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/blog/gc-learning/RXBIFNEGTM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前所有的gc实现都是基于&lt;code&gt;保守式gc&lt;/code&gt;实现的，特点就是实现简单、容易理解，对应用层友好&lt;/p&gt;
&lt;h1 id=&quot;保守g
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="gc-learning" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/"/>
    
      <category term="算法实现" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="gc" scheme="http://wiki.brewlin.com/tags/gc/"/>
    
      <category term="conservative" scheme="http://wiki.brewlin.com/tags/conservative/"/>
    
  </entry>
  
  <entry>
    <title>标记清除算法</title>
    <link href="http://wiki.brewlin.com/wiki/blog/gc-learning/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/1.%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95/"/>
    <id>http://wiki.brewlin.com/wiki/blog/gc-learning/算法实现/1.标记清除算法/</id>
    <published>2020-11-09T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<p><code>标记-清除</code> 算法主要分为两个过程:<code>标记O(N)</code>、<code>清除O(N)</code>,接下来讲解gc的代码实现</p><p>文件结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Makefile     构建文件</span><br><span class="line">- mark_sweep.c 主要代码实现</span><br><span class="line">- test.c       测试用例</span><br></pre></td></tr></table></figure></p><p>test:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; make</span><br><span class="line">&gt; ./gc</span><br></pre></td></tr></table></figure></p><h1 id="gc阶段"><a href="#gc阶段" class="headerlink" title="gc阶段"></a>gc阶段</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">gc</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//垃圾回收前 先从 root 开始 进行递归标记</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; root_used;i++)</span><br><span class="line">        gc_mark(roots[i].ptr);</span><br><span class="line">    <span class="comment">//标记完成后 在进行 清除 对于没有标记过的进行回收</span></span><br><span class="line">    gc_sweep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对根进行遍历，不清楚根可以去看(<code>什么是Root?</code>),进行可达性标记</li><li>进入清除阶段，将所有垃圾进行回收，释放可用空间，更新空闲链表</li></ol><p>标记清除的实现主要就是<code>标记(marked)</code>，通过对根的访问，对所有可以追踪到的对象都进行标记<code>mark = 1</code>，标记阶段就完成任务了</p><p>清除阶段会遍历整个堆，所以复杂度是<code>O(N)</code>，随着堆的增加而呈线性增长，清除阶段会对每份内存进行判断，如果<code>mark = 0</code>则认定为垃圾对象，进行回收。</p><p>整个gc阶段就完成了，如果有释放垃圾，此时新分配的内存就可以重复利用刚才释放的空间了</p><h1 id="标记阶段"><a href="#标记阶段" class="headerlink" title="标记阶段"></a>标记阶段</h1><p>接下来就是进入标记阶段了，标记阶段主要做四件事</p><ol><li>判断当前指针是否合法</li><li>进行标记,如果已经标记过则不需要再次标记</li><li>对当前对象进行标记</li><li><code>对child引用</code>进行递归标记</li></ol><h2 id="检查指针是否合法"><a href="#检查指针是否合法" class="headerlink" title="检查指针是否合法"></a>检查指针是否合法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gc_mark</span><span class="params">(<span class="keyword">void</span> * ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GC_Heap *gh;</span><br><span class="line">    Header *hdr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* mark check */</span></span><br><span class="line">    <span class="keyword">if</span> (!(gh = is_pointer_to_heap(ptr)))&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!(hdr = get_header(gh, ptr))) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!FL_TEST(hdr, FL_ALLOC)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (FL_TEST(hdr, FL_MARK)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>is_pointer_to_heap</code>: 判断传入的指针是否是堆里的合法内存，通过地址范围判断</li><li><code>get_header</code>: 获取指针的对象头</li><li><code>FL_*</code>： 这个开头的是一些宏定义，可以进行位操作，这里是判断<code>header-&gt;flags</code>有没有设置 <code>FL_ALLOC</code>内存分配标志</li><li>·FL_TEST`: 这里判断如果已经标记过了，不需要再次标记</li></ol><h2 id="标记对象"><a href="#标记对象" class="headerlink" title="标记对象"></a>标记对象</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="comment">/* marking */</span></span><br><span class="line">FL_SET(hdr, FL_MARK);</span><br><span class="line"><span class="comment">//.....</span></span><br></pre></td></tr></table></figure><p>这里展开就是:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((Header*)hdr)-&gt;flags |= <span class="number">0x2</span></span><br></pre></td></tr></table></figure></p><p>对对象头进行标记，表明当前对象是可达对象，是合法对象，不能被清除</p><h2 id="递归进行child标记"><a href="#递归进行child标记" class="headerlink" title="递归进行child标记"></a>递归进行child标记</h2><p>关于引用的标记其实就是遍历当前内存的地址空间，对每一个字节逐字扫描，发现了合法指针就进行标记,例如:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span>         value;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">obj</span>* <span class="title">next</span>;</span></span><br><span class="line">    &#125;Obj;</span><br><span class="line">    </span><br><span class="line">    Obj* ptr  = gc_malloc(<span class="keyword">sizeof</span>(Obj));</span><br><span class="line">    ptr-&gt;next = gc_malloc(<span class="keyword">sizeof</span>(Obj));</span><br><span class="line">    ptr-&gt;next-&gt;next = gc_malloc(<span class="keyword">sizeof</span>(Obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果对p进行了标记，那么<code>ptr-&gt;next</code>也应该被标记，因为他们之间有引用关系，怎么做到的呢<br><img src="/images/blog/gc-learning/CGEMWKIOUD.png" alt=""></p><p>对<code>ptr</code>的内存段<code>start</code>到<code>end</code>这个区间进行遍历<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行child 节点递归 标记</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">void</span>* p = ptr; p &lt; (<span class="keyword">void</span>*)NEXT_HEADER(hdr); p++) &#123;</span><br><span class="line">    <span class="comment">//对内存解引用，因为内存里面可能存放了内存的地址 也就是引用，需要进行引用的递归标记</span></span><br><span class="line">    gc_mark(*(<span class="keyword">void</span> **)p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正常情况下遍历到<code>(void*)ptr + sizeof(int)</code>处应该就是<code>p-&gt;next</code>的地址，如此递归不放过任何的角落</p><ol><li><code>gc_mark(ptr)</code></li><li><code>gc_mark(ptr-&gt;next)</code></li><li><code>gc_mark(ptr-&gt;next-&gt;next)</code></li></ol><p>标记完应该是这样的</p><p><img src="/images/blog/gc-learning/MTGYOASCJV.png" alt=""></p><h1 id="清除阶段"><a href="#清除阶段" class="headerlink" title="清除阶段"></a>清除阶段</h1><p>清除阶段就简单啦，直接搜索堆，将所有的<code>已使用</code>却<code>没标记</code>的内存释放</p><ol><li><p>遍历<code>gc_heaps</code>数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>     <span class="title">gc_sweep</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    Header *p, *pend, *pnext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的堆内存</span></span><br><span class="line">    <span class="comment">//因为所有的内存都从堆里申请，所以需要遍历堆找出待回收的内存</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; gc_heaps_used; i++) &#123;</span><br><span class="line">        <span class="comment">//pend 堆内存结束为止</span></span><br><span class="line">        pend = (Header *)(((<span class="keyword">size_t</span>)gc_heaps[i].slot) + gc_heaps[i].size);</span><br><span class="line">        <span class="comment">//do ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>搜索<code>heap</code>查看该分块是否已经分配<code>FL_ALLOC</code>,没有该标志说明是空闲块，不需要理会</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//堆的起始为止 因为堆的内存可能被分成了很多份，所以需要遍历该堆的内存</span><br><span class="line">for (p = gc_heaps[i].slot; p &lt; pend; p = NEXT_HEADER(p)) &#123;</span><br><span class="line">    //查看该堆是否已经被使用</span><br><span class="line">    if (FL_TEST(p, FL_ALLOC)) &#123;</span><br><span class="line">        //do..</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解除标志，如果没有被标记过说明是<code>垃圾</code>: 进行<code>gc_free</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看该堆是否被标记过</span></span><br><span class="line"><span class="keyword">if</span> (FL_TEST(p, FL_MARK)) &#123;</span><br><span class="line">    DEBUG(<span class="built_in">printf</span>(<span class="string">"解除标记 : %p\n"</span>, p));</span><br><span class="line">    <span class="comment">//取消标记，等待下次来回收，如果在下次回收前</span></span><br><span class="line">    <span class="comment">//1. 下次回收前发现该内存又被重新访问了，则不需要清除</span></span><br><span class="line">    <span class="comment">//2. 下次回收前发现该内存没有被访问过，所以需要清除</span></span><br><span class="line">    FL_UNSET(p, FL_MARK);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    DEBUG(<span class="built_in">printf</span>(<span class="string">"清除回收 :\n"</span>));</span><br><span class="line">    gc_free(p+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>清除过后的堆应该是这样的:</p><p><img src="/images/blog/gc-learning/QNEBMISJRH.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;标记-清除&lt;/code&gt; 算法主要分为两个过程:&lt;code&gt;标记O(N)&lt;/code&gt;、&lt;code&gt;清除O(N)&lt;/code&gt;,接下来讲解gc的代码实现&lt;/p&gt;
&lt;p&gt;文件结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="gc-learning" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/"/>
    
      <category term="算法实现" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="gc" scheme="http://wiki.brewlin.com/tags/gc/"/>
    
      <category term="mark-sweep" scheme="http://wiki.brewlin.com/tags/mark-sweep/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://wiki.brewlin.com/wiki/blog/algorithm/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://wiki.brewlin.com/wiki/blog/algorithm/最小生成树/</id>
    <published>2020-11-09T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是最小生成树"><a href="#什么是最小生成树" class="headerlink" title="什么是最小生成树"></a>什么是最小生成树</h1><p><img src="/images/blog/graph/EGAEHJWVWH.png" alt=""></p><p>在一个有权图中，所有的边连接为一个图，那么用最少的边将所有节点连接起来且该连接和最小，可以称为最小生成树</p><ol><li>如上图: 图中==红色边==连接起来的就是最小树，既然最小，那么图就是有权的（有可比较的数值）</li><li>最小生成树 一定有v-1条边 v是顶点，也就是每个点只有一条连接<h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2></li></ol><ul><li>带权无向图 (每个节点具有可比较的值)</li><li>针对连通图</li></ul><h1 id="应用场景举例"><a href="#应用场景举例" class="headerlink" title="应用场景举例"></a>应用场景举例</h1><ol><li>铁路线路构建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每个城市之间其实不需要都建立铁轨，只要保证所有的城市之间能够连通即可</span><br><span class="line"></span><br><span class="line">如上图:所有城市组成了一个图，而所有边是城市的连接.</span><br><span class="line">那么只有红色边是需要建立铁轨的，且保证了所有城市都有连通线路</span><br></pre></td></tr></table></figure><ol start="2"><li>电线布局</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">依然如此，使用最短的路径来连接所有节点</span><br></pre></td></tr></table></figure><h1 id="求证思路"><a href="#求证思路" class="headerlink" title="求证思路"></a>求证思路</h1><p>假入我们有如下组成的图结构:</p><p><img src="/images/blog/graph/IXJGBEZRFU.png" alt=""></p><p>总共有<code>a,b,c,d,e,f</code>6个节点，且存在10条边，每条边上的数字代表了该路径权值. 拿上面铁轨来说就是每个城市之间的距离。现在需要求出最小生成树，也就是去掉无关的边</p><ol><li><p><code>从a开始访问，将</code>a的所有边加入最小堆中<code>，</code>且标记a为已访问`<br><img src="/images/blog/graph/KDEZTDFWOB.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从a出发有3条边 a-b a-e a-c</span><br><span class="line">那么可以看到a-b的权值为1 最小，且b没有访问过那么a-b就一定是</span><br><span class="line">最小生成树的一条边，进行标记并去除最小堆</span><br></pre></td></tr></table></figure></li><li><p>将b的所有连接边加入最小堆,并取出最小权值的边<br><img src="/images/blog/graph/CAYKDFVTLO.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以发现b-f在最小堆中权值最小，且f点未被访问过.</span><br><span class="line">那么b-f绝对是最小生成树中的一条边，对f进行标记并移除最小堆</span><br></pre></td></tr></table></figure></li><li><p>将f对应的边加入最小堆，并取出最小权值的边<br><img src="/images/blog/graph/MSWRWZMDUK.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f-c 权值为2，目前为堆中最小，且c未被访问过，则f-c为生成树的一条边</span><br><span class="line">进行标记，剔除最小堆</span><br></pre></td></tr></table></figure></li><li><p>没有新加入边则，继续在堆中找出最小边<br><img src="/images/blog/graph/APPIYAWCAE.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发现有三个节点的权值相同，但有一点不同</span><br><span class="line">b-c a-c 两个边的点都被标记过了，所以需要剔除</span><br><span class="line">最后只剩下b-e 最小，则进行标记并剔除最小堆</span><br></pre></td></tr></table></figure></li><li><p>加入e关联的边，继续找出堆中最小边<br><img src="/images/blog/graph/UENLXKASRP.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a-e 已经访问过了，需要剔除</span><br><span class="line">e-d 最小，且d未访问过，则一定是最小生成树的边，进行标记、剔除</span><br></pre></td></tr></table></figure></li></ol><p>这样基本就全部访问完了，接下来就是剔除无关的边，最后得出如下最小生成树<br><img src="/images/blog/graph/UHKYSJRYFQ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是最小生成树&quot;&gt;&lt;a href=&quot;#什么是最小生成树&quot; class=&quot;headerlink&quot; title=&quot;什么是最小生成树&quot;&gt;&lt;/a&gt;什么是最小生成树&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/graph/EGAEHJWVWH.png&quot; a
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/categories/blog/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="graph" scheme="http://wiki.brewlin.com/tags/graph/"/>
    
      <category term="tree" scheme="http://wiki.brewlin.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>什么是Heap</title>
    <link href="http://wiki.brewlin.com/wiki/blog/gc-learning/%E5%89%8D%E8%A8%80/3.%E4%BB%80%E4%B9%88%E6%98%AFheaps/"/>
    <id>http://wiki.brewlin.com/wiki/blog/gc-learning/前言/3.什么是heaps/</id>
    <published>2020-11-09T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<p><code>heap</code>也就是堆，本意应该是系统堆的概念的，现代的语言为了加快内存分配速度，基本上都会自己预先分配一块大内存，也可以叫做内存池。这块大内存就是用户态的堆</p><p>在gc概念中就是heap,例如在标记类算法中，有一个gc环节叫做<code>清除(sweep)</code>，也就是回收垃圾，那么要实现这个功能，就要对<code>heap</code>进行遍历找出待回收的垃圾,所以这个堆就是我们用户态的一块大内存，非系统的堆</p><p>heap有以下api:</p><ul><li><code>gc_malloc</code> 内存分配</li><li><code>gc_free</code>   内存回收(搭载了gc的heap，不需要用户显示调用)</li><li><code>is_pointer_to_heap</code> 是否是heap中申请的内存</li></ul><p>接下来看下当前是如何管理内存的</p><h1 id="heap的结构"><a href="#heap的结构" class="headerlink" title="heap的结构"></a>heap的结构</h1><p><img src="/images/blog/gc-learning/heap.png" alt=""></p><h2 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h2><p><code>GC_HEAP</code>：维护堆信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct gc_heap &#123;</span><br><span class="line">    Header *slot;</span><br><span class="line">    size_t size;</span><br><span class="line">&#125; GC_Heap;</span><br></pre></td></tr></table></figure></p><ol><li><code>slot</code> 指向从操作系统申请的内存首地址,默认<code>4k</code>,也就是操作系统的一页大小</li><li><code>size</code> 每个heap的内存大小</li></ol><p><code>Header</code>: 实际上每份分配的内存都是默认会用掉一个头部空间<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">header</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> ref;               <span class="comment">//引用计数中使用，其他算法忽略</span></span><br><span class="line">    <span class="keyword">size_t</span> flags;             <span class="comment">//marked,remembered,copied</span></span><br><span class="line">    <span class="keyword">size_t</span> size;              <span class="comment">//当前内存块大小</span></span><br><span class="line">    <span class="keyword">size_t</span> age;               <span class="comment">//分代回收中使用，表示年龄</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">header</span> *<span class="title">next_free</span>;</span> <span class="comment">//回收链表中使用，指向下一个空闲内存</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">header</span> *<span class="title">forwarding</span>;</span><span class="comment">//复制算法中使用, 指向拷贝后的新内存地址</span></span><br><span class="line">&#125; Header;</span><br></pre></td></tr></table></figure></p><p>为了更好的描述gc算法的实现，各种算法的公用标志都统一放到同一个header中，实际中肯定不能这么搞，太耗费空间了，很多都是用位来标记</p><ol><li><code>ref</code> 在引用计数中代表被引用的次数</li><li><code>flags</code> 有多个位标记</li><li><code>size</code> 指示当前内存块的大小 注意:<code>size = sizeof(Header) + sizeof(Obj)</code> 是包含了当前头部信息了的</li><li><code>age</code> 分代回收中表示年龄</li><li><code>next_free</code> 指向下一个空闲的内存,在内存分配的时候直接通过该字段来遍历空闲内存</li><li><code>forwarding</code> 复制类算法中指向了新地址</li></ol><p>header头 每个用户申请的内存都有一个隐形的头部,例如: gc_alloc(16) 实际申请了 16 + sizeof(header) 那么返回给用户的地址其实是 ptr + sizeof(header).<br>同样的也可以通过 ptr-sizeof(header) 拿到header头</p><p><img src="/images/blog/gc-learning/VBUXNWMHKD.png" alt=""></p><h2 id="宏定义和全局变量"><a href="#宏定义和全局变量" class="headerlink" title="宏定义和全局变量"></a>宏定义和全局变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* marco */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  TINY_HEAP_SIZE 4 * 1024              <span class="comment">//计算指针 所占内存大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  PTRSIZE ((size_t) sizeof(void *))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  HEADER_SIZE ((size_t) sizeof(Header))<span class="comment">//堆的上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  HEAP_LIMIT 100000                    <span class="comment">//字节对齐 向上取整</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ALIGN(x,a) (((x) + (a - 1)) &amp; ~(a - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  NEXT_HEADER(x) ((Header *)((size_t)(x+1) + (x-&gt;size- HEADER_SIZE))) <span class="comment">//[ [header] x-&gt;size [header] x-&gt;size ....]</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  CURRENT_HEADER(x) ((Header *)x - 1)</span></span><br></pre></td></tr></table></figure><ol><li><code>ALIGN</code> 是向上进行地址对齐，<code>ALIGN(6,8) == 8, ALIGN(9,8) == 16</code></li><li><code>NEXT_HEADER</code> 方便直接获取下一个连续内存地址</li><li><code>CURRENT_HEADER</code> 这个宏需要注意的一点是:需要自己保证传入的指针已经确认是堆里分配的，否则会导致不可预料的错误</li></ol><p>一些<code>flags</code> 标志位<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* flags */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_ALLOC  0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_MARK   0x2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_COPIED 0x4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_REMEMBERED 0x8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_SET(x, f) (((Header *)x)-&gt;flags |= f)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_UNSET(x, f) (((Header *)x)-&gt;flags &amp;= ~(f))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  FL_TEST(x, f) (((Header *)x)-&gt;flags &amp; f)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  IS_MARKED(x) (FL_TEST(x, FL_ALLOC) &amp;&amp; FL_TEST(x, FL_MARK))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  IS_COPIED(x) (FL_TEST(x, FL_ALLOC) &amp;&amp; FL_TEST(x, FL_COPIED))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  IS_REMEMBERED(x) (FL_TEST(x, FL_ALLOC) &amp;&amp; FL_TEST(x, FL_REMEMBERED))</span></span><br></pre></td></tr></table></figure></p><p>一些全局变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global variable */</span></span><br><span class="line"><span class="keyword">extern</span>   Header *free_list;</span><br><span class="line"><span class="keyword">extern</span>   GC_Heap gc_heaps[HEAP_LIMIT];</span><br><span class="line"><span class="keyword">extern</span>   <span class="keyword">size_t</span> gc_heaps_used;</span><br><span class="line"><span class="keyword">extern</span>   <span class="keyword">int</span> auto_gc;                  <span class="comment">//测试的时候 有时候需要关闭内存不够时执行gc</span></span><br><span class="line"><span class="keyword">extern</span>   <span class="keyword">int</span> auto_grow;                <span class="comment">//测试的时候 有时候需要关闭内存不够时扩充堆</span></span><br></pre></td></tr></table></figure></p><ol><li><code>free_list</code> 是一个单向链表，将所有heap的空闲空间串联起来,在执行<code>gc_malloc</code>时直接基于<code>first-fit</code>分配法遍历当前链表进行查找符合的大小内存,关于分配法:</li></ol><ul><li>best-fit 遍历空闲链表，找出刚好符合那块内存，优点是减少了内存碎片，缺点是增加了分配时间</li><li>first-fit 找到第一块符合大小的空间，如果大于申请的则进行拆分，缺点显然是内存碎片</li><li>worse-fit 每次都去寻找最大的内存块 然后切割分配，增加了内存碎片 时间也不咋地，所以避免使用这种</li></ul><ol start="2"><li><code>gc_heaps</code> 用户态堆，管理用户所有内存，默认每个heap 4k大小</li><li><code>auto_gc</code> 为了方便测试增加的开关，表示在内存不够时是否需要去执行<code>gc</code></li><li><code>auto_grow</code> 为了方便测试，表示在内存不够时是否需要立即扩充堆，新增一个4k页大小</li></ol><h1 id="gc-malloc分配"><a href="#gc-malloc分配" class="headerlink" title="gc_malloc分配"></a>gc_malloc分配</h1><p>内存分配流程，从内存池中查找一块空闲内存返回给申请方，主要流程如下:</p><ol><li>遍历<code>free_list</code>链表，找到大于等于当前内存的块</li><li>刚好满足则直接更新下返回即可，否则需要拆分块大小</li><li>步骤1没找到可用的块，则考虑进行gc</li><li>步骤3依然无可用块，则考虑扩充堆</li></ol><h2 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line">req_size += HEADER_SIZE;</span><br><span class="line"><span class="comment">//对齐 字节</span></span><br><span class="line">req_size = ALIGN(req_size, PTRSIZE);</span><br></pre></td></tr></table></figure><p>对申请的内存进行字节对齐,并且除了本身的size外，还要额外加上<code>header</code>的空间</p><h2 id="搜索块"><a href="#搜索块" class="headerlink" title="搜索块"></a>搜索块</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从空闲链表上去搜寻 空余空间</span></span><br><span class="line">prevp = free_list;</span><br><span class="line"><span class="comment">//死循环 遍历</span></span><br><span class="line"><span class="keyword">for</span> (p = prevp; p; prevp = p, p = p-&gt;next_free) &#123;</span><br><span class="line">    <span class="comment">//堆的内存足够</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;size &gt;= req_size) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;size == req_size)&#123;</span><br><span class="line">            <span class="comment">//刚好满足</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//需要拆分当前块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>直接遍历<code>free_list</code>空闲链表，前提是这个free_list已经将所有可用内存串联在一起了，而这些主要是在<code>gc_free</code>中做到的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从空闲列表上 移除当前的 堆，因为申请的大小刚好把堆消耗完了</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;size == req_size)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == prevp)</span><br><span class="line">        free_list = prevp = p-&gt;next_free;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prevp-&gt;next_free = p-&gt;next_free;    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    prevp = (<span class="keyword">void</span>*)prevp + req_size;</span><br><span class="line">    <span class="built_in">memcpy</span>(prevp,p,HEADER_SIZE);</span><br><span class="line">    prevp-&gt;size = p-&gt;size - req_size;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果空闲块刚刚好，则直接将空闲块移除链表，然后返回即可</p><p>如果空闲块比较大，则需要进行拆分,拆分从块起始处开始拆分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;size = req_size;</span><br><span class="line">free_list = prevp;</span><br><span class="line"><span class="comment">//给新分配的p 设置为标志位 fl_alloc 为新分配的空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>,p);</span><br><span class="line">p-&gt;flags = <span class="number">0</span>;</span><br><span class="line">p-&gt;ref   = <span class="number">1</span>;</span><br><span class="line">FL_SET(p, FL_ALLOC);</span><br><span class="line"><span class="comment">//设置年龄为0</span></span><br><span class="line">p-&gt;age = <span class="number">0</span>;</span><br><span class="line">p-&gt;forwarding = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这里是对新分配的块进行初始化操作，比如标志位置0等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!do_gc &amp;&amp; auto_gc) &#123;</span><br><span class="line">    gc();</span><br><span class="line">    do_gc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> alloc;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(auto_grow)&#123; <span class="comment">//上面说明 执行了gc之后 内存依然不够用 那么需要扩充堆大小</span></span><br><span class="line">    p = gc_grow(req_size);</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="keyword">goto</span> alloc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩充堆-amp-gc"><a href="#扩充堆-amp-gc" class="headerlink" title="扩充堆&amp;gc"></a>扩充堆&amp;gc</h2><p>上面如果没有找到可用的空闲块，则需要考虑进行辅助操作，<code>gc or grow</code></p><p>接下来看看<code>grow</code>扩充一个堆的逻辑:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function">Header* <span class="title">gc_grow</span><span class="params">(<span class="keyword">size_t</span> req_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Header *cp, *up;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(cp = add_heap(req_size)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    up = (Header *) cp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(free_list == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(up +  <span class="number">1</span>,<span class="number">0</span>,up-&gt;size - HEADER_SIZE);</span><br><span class="line">        free_list = up;</span><br><span class="line">        up-&gt;flags = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> free_list;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        gc_free((<span class="keyword">void</span> *)(up+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> free_list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>通过<code>add_heap</code> 申请一块最小为<code>4k</code>的空间</li><li>如果空闲链表为空则直接替换上去，返回</li><li><code>gc_free</code>不但可以释放小内存块，也可以将新的堆串联到空闲链表上</li></ol><p>这里基本就完成了内存块的分配</p><h1 id="gc-free释放"><a href="#gc-free释放" class="headerlink" title="gc_free释放"></a>gc_free释放</h1><p>释放的流程要稍微多一点，主要分为三个步骤:</p><ol><li>格式化待释放的内存</li><li>找到内存所对应的位置</li><li>挂载的链表上后结束</li></ol><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>格式化内存<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">gc_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Header *target, *hit,*prevp;</span><br><span class="line">    <span class="comment">//调用方需要保证内存是合法的当前堆内存，否则就会发生段错误</span></span><br><span class="line">    target = (Header *)ptr - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//回收的数据立马清空</span></span><br><span class="line">    <span class="built_in">memset</span>(ptr,<span class="number">0</span>,target-&gt;size-HEADER_SIZE);</span><br><span class="line">    target-&gt;flags = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>特殊情况一:free_list为空时直接替换free_list返回即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空闲链表为空，直接将当前target挂到上面</span></span><br><span class="line"><span class="keyword">if</span>(free_list == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    free_list = target;</span><br><span class="line">    target-&gt;flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>特殊情况二:当前内存在free_list头部<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(NEXT_HEADER(target) == free_list)&#123;</span><br><span class="line">    target-&gt;size += (free_list-&gt;size);</span><br><span class="line">    target-&gt;next_free = free_list-&gt;next_free;</span><br><span class="line">    free_list = target;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/blog/gc-learning/STMGAUIQAA.png" alt=""><br>直接将当前<code>target</code>合并到空闲链表头部</p><h2 id="定位内存在堆中的位置"><a href="#定位内存在堆中的位置" class="headerlink" title="定位内存在堆中的位置"></a>定位内存在堆中的位置</h2><p>定位待回收内存在堆中的位置，这个步骤是为了合并，相邻的两块内存必须要合并，否则会造成即使空闲空间足够但是依然不能够分配的窘迫</p><p><img src="/images/blog/gc-learning/BMZKONMDVQ.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//搜索target可能在空闲链表上的区间位置</span></span><br><span class="line">prevp = free_list;</span><br><span class="line"><span class="keyword">for</span>(hit = prevp; hit &amp;&amp; hit-&gt;next_free ; prevp = hit,hit = hit-&gt;next_free)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//刚好 target就在 [hit,hit-&gt;next_free] 之间</span></span><br><span class="line">    <span class="keyword">if</span>(target &gt;= hit &amp;&amp; target &lt;= hit-&gt;next_free)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跨堆的情况 说明target在两个堆之间 (heap1_end,heap2_start)</span></span><br><span class="line">    <span class="keyword">if</span>(hit &gt;= hit-&gt;next_free &amp;&amp; (target &gt; hit || target &lt; hit-&gt;next_free))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要分为4种情况:</p><ol><li><code>target</code> 属于右区间</li></ol><p><img src="/images/blog/gc-learning/XMJLYZNPYQ.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 判断右区间  如果target属于右区间 则合并</span></span><br><span class="line"><span class="keyword">if</span> (NEXT_HEADER(target) == hit-&gt;next_free) &#123;</span><br><span class="line">    target-&gt;size += hit-&gt;next_free-&gt;size;</span><br><span class="line">    target-&gt;next_free = hit-&gt;next_free-&gt;next_free;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    target-&gt;next_free = hit-&gt;next_free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候说明<code>NEXT_HEADER(target) == hit-&gt;next_free</code>成立，需要合并<code>target + hit-&gt;next_free</code></p><ol start="2"><li><code>target</code>不属于右区间</li></ol><p>如果右区间没有相邻，则直接插入<code>hit-&gt;next_free</code>前就行了</p><ol start="3"><li><code>target</code> 属于左区间</li></ol><p><img src="/images/blog/gc-learning/GSPPCNNPCH.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 判断左区间  如果target属于左区间 则合并</span></span><br><span class="line"><span class="keyword">if</span> (NEXT_HEADER(hit) == target) &#123;</span><br><span class="line">    <span class="comment">/* merge */</span></span><br><span class="line">    hit-&gt;size += target-&gt;size;</span><br><span class="line">    hit-&gt;next_free = target-&gt;next_free;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    hit-&gt;next_free = target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候<code>NEXT_HEADER(hit) == target</code>成立，合并左区间</p><ol start="4"><li><code>target</code> 不属于左区间</li></ol><p>直接挂在hit后就可以了</p><p>如果是新初始化的扩充堆基本上都不会触发上面的条件，直接挂到<code>free_list</code>尾节点即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;heap&lt;/code&gt;也就是堆，本意应该是系统堆的概念的，现代的语言为了加快内存分配速度，基本上都会自己预先分配一块大内存，也可以叫做内存池。这块大内存就是用户态的堆&lt;/p&gt;
&lt;p&gt;在gc概念中就是heap,例如在标记类算法中，有一个gc环节叫做&lt;code&gt;清除
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="gc-learning" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/"/>
    
      <category term="前言" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/%E5%89%8D%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="gc" scheme="http://wiki.brewlin.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="http://wiki.brewlin.com/wiki/blog/gc-learning/%E5%89%8D%E8%A8%80/1.%E7%AE%80%E4%BB%8B/"/>
    <id>http://wiki.brewlin.com/wiki/blog/gc-learning/前言/1.简介/</id>
    <published>2020-11-09T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要阅读<code>垃圾回收的算法与实现</code>一书进行的实现解说，主要因为之前没有完整的gc算法实现的代码样例，书中各种实现都是基于伪码讲解，虽能理解作者的意思但难免还是有些抽象</p><p>遂写这些文章，记录下自己在学习算法理论并实际实现的过程。后续会追加分析其他语言的<code>gc实现</code>，深入理解生产级别是如何应用gc，以及如何极限的优化gc性能</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>下面是目录分级</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>什么是root根? </li><li>什么是heaps堆?</li></ol><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><ol><li>标记清除算法 - 基础实现</li><li>标记清除算法 - 多空闲链表法</li><li>引用计数算法</li><li>GC  复制算法</li><li>复制+标记清除 - 组合实现的多空间复制算法</li><li>标记压缩算法 - 基础实现</li><li>标记压缩算法 - two_finger实现</li><li>保守式gc算法 - <code>当前都是基于保守式gc算法</code></li><li>分代垃圾回收 - 复制算法+标记清除组合实现</li><li>增量式垃圾回收 - 三色标记</li></ol><h1 id="OS-环境参数"><a href="#OS-环境参数" class="headerlink" title="OS 环境参数"></a>OS 环境参数</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; gcc -v</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)</span><br><span class="line"></span><br><span class="line">&gt; uname -a</span><br><span class="line">Linux ubuntu 4.4.0-157-generic <span class="comment">#185-Ubuntu SMP Tue Jul 23 09:17:01 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h2 id="关于测试"><a href="#关于测试" class="headerlink" title="关于测试"></a>关于测试</h2><p>每个算法实现目录都有<code>test.c</code>,都是对当前算法的简单逻辑验证</p><p>根目录有一个<code>auto_test.sh</code> 脚本可以一次性跑全部的测试用例<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> gc-learning</span><br><span class="line">&gt; dos2unix auto_test.sh</span><br><span class="line">&gt; sh auto_test.sh</span><br></pre></td></tr></table></figure></p><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gc-learning</span><br><span class="line"></span><br><span class="line">----- gc.c</span><br><span class="line">----- gc.h</span><br><span class="line"></span><br><span class="line">----- mark-sweep </span><br><span class="line">----- mark-sweep-mulit-free-list</span><br><span class="line">----- reference-count</span><br><span class="line">----- copying</span><br><span class="line">----- copying-or-mark</span><br><span class="line">----- compact-lisp2</span><br><span class="line">----- compact-two-finger</span><br><span class="line">----- generational</span><br><span class="line">----- tri-color-marking</span><br></pre></td></tr></table></figure><p>所有的gc算法都依赖于公用<code>gc.c</code>中的的<code>heaps</code>堆内存池实现，可以先看<a href="./什么是堆?">什么是堆?</a>了解内存管理</p><p><code>gc.c</code>和<code>gc.h</code>是公用内存实现</p><h1 id="关于保守式gc"><a href="#关于保守式gc" class="headerlink" title="关于保守式gc"></a>关于保守式gc</h1><p>当前所有的gc实现都是基于<code>保守式gc</code>实现的，特点就是实现简单、容易理解，对应用层友好</p><p>比如一个内存分配如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gc.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></span><br><span class="line">        .....</span><br><span class="line">    &#125;Obj;</span><br><span class="line">    </span><br><span class="line">    Obj* obj = gc_malloc(<span class="keyword">sizeof</span>(Obj);</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没有任何依赖，只需要调用<code>gc_malloc()</code>分配一块空间即可，不需要应用层去操心如(标记，内嵌指针啥的)，实现简单</p><p>在这简单的背后自然也有保守式gc的一个<code>缺陷</code>,那就是<code>不能识别指针和非指针</code>。接着上上面的函数来说,举个例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">0x555555</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内存不够了 自动执行gc</span></span><br><span class="line">    <span class="keyword">void</span>* pp = gc_malloc(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>调用<code>test</code>函数,如果<code>obj == 0x555555</code></li><li><code>test函数</code>返回后继续执行，此时栈上有一个<code>double p == 0x555555</code> 和上面test函数的指针值相同</li><li>假如再次申请空间时，内存不够了，默认启动<code>gc</code>垃圾回收</li><li>首先: test作用域已经退出了，在进行root扫描时(可以先去看<a href="./什么是root">什么是root?</a>) <code>Obj *p</code>已经是不可达对象，称为垃圾对象</li><li>但是: 在main中root扫描，扫到了 <code>double p</code> 且刚好该值是我们实现的堆里的一个合法地址</li><li>最终: 导致test的<code>obj</code>对象本来该回收，但是因为 <code>double p</code>导致了回收失败</li></ol><p>这就是保守式gc，某些情况下会无法<code>准确识别指针 or 非指针</code>,导致内存得不到释放</p><p>当然现代很多语言都是基于保守式gc，也有很多对策来降低这种误差</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要阅读&lt;code&gt;垃圾回收的算法与实现&lt;/code&gt;一书进行的实现解说，主要因为之前没有完整的gc算法实现的代码样例，书中各种实现都是基于伪码讲解，虽能理解作者的意思但难免还是有些抽象&lt;/p&gt;
&lt;p&gt;遂写这些文章，记录下自己在学习算法理论并实际实现的过程。后续会
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="gc-learning" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/"/>
    
      <category term="前言" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/%E5%89%8D%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="gc" scheme="http://wiki.brewlin.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>什么是Root</title>
    <link href="http://wiki.brewlin.com/wiki/blog/gc-learning/%E5%89%8D%E8%A8%80/2.%E4%BB%80%E4%B9%88%E6%98%AFroots/"/>
    <id>http://wiki.brewlin.com/wiki/blog/gc-learning/前言/2.什么是roots/</id>
    <published>2020-11-09T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<p>讲<code>root</code>根之前我们要先理解什么是<code>gc 回收</code>，怎么定义垃圾等等,区别垃圾可以简单这么理解:</p><ol><li>如果某对象没有被任何地方引用 - <code>垃圾对象</code></li><li>如果某对象至少还有一次被引用 - <code>合法对象</code></li></ol><p>那么如何辨别对象没有被任何地方引用呢，这就是<code>root</code>的作用了</p><h1 id="当前root的定义"><a href="#当前root的定义" class="headerlink" title="当前root的定义"></a>当前root的定义</h1><p>root根在不同场景有不同的意思，但有一点不变<code>通过root能够访问到的对象一定是合法对象</code>，则不应该被清除</p><p>root通常有以下的形式表示:</p><ul><li><code>全局变量空间</code></li><li><code>寄存器</code></li><li><code>函数栈</code></li></ul><p>并非只有上面的空间才能成为根,通常情况下对于动态运行时语言来说，都会在程序层面创建一个集合，然后自己来管理分配的对象，实现了根对象的管理</p><p>当前系列的gc实现不会真的去<code>搜索上面的这些区域去实现根的查找</code>,因为这样有些复杂而且不方便测试和演示</p><p><code>为了更加集中于gc算法的实现表示</code>，采用了一个<code>roots</code>数组来作为根，有如下的规则:</p><ol><li>只要是存在数组里的对象，都称为可达对象，<code>一定是合法对象，不可以回收</code></li><li>只要不在数组里的对象，都是不可达对象，作为垃圾需要回收<code>(被引用的内存除外)</code></li></ol><h2 id="root结构体定义"><a href="#root结构体定义" class="headerlink" title="root结构体定义"></a>root结构体定义</h2><p>root结构体的定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gc.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">root_</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ptr; <span class="comment">//从heap中申请的内存地址</span></span><br><span class="line">    <span class="keyword">void</span> *optr;<span class="comment">//用户栈变量的地址</span></span><br><span class="line">&#125;root;</span><br></pre></td></tr></table></figure></p><p><code>ptr</code> 指向了我们从<code>heaps</code>中分配的内存地址,也就是用户使用的对象</p><p><code>opr</code> 指向了用户变量的地址，这里讲一下这个成员的作用:</p><p>在有些算法中，例如<code>gc复制算法</code>,在执行gc之后，也许当前对象不是垃圾对象不会被回收,但是:当前对象的内存发生了拷贝，内存位置发生了改变<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Obj* p = gc_malloc(<span class="keyword">sizeof</span>(Obj));</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure></p><p><img src="/images/blog/gc-learning/SINPOOLLMX.png" alt=""></p><p>例如这种情况，<code>optr</code>的作用就体现出来了，在发生gc复制后，<code>p</code>本来应该指向新的空间，但是如果不更新p的值的话那么就会导致异常</p><p>因为我们的根保留了引用对象的地址(<code>临时变量基本都是存储在栈上的</code>，其实就是保留了栈的地址<code>rbp - offset</code>),这样只需要在gc执行复制的时候将引用对象一并修改了即可</p><p>root全局数组的定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ROOT_RANGES_LIMIT 100000</span></span><br><span class="line"><span class="keyword">extern</span>   <span class="keyword">size_t</span> root_used;</span><br><span class="line"><span class="keyword">extern</span>   root roots[ROOT_RANGES_LIMIT];</span><br></pre></td></tr></table></figure></p><p>为了方便测试，直接在栈上分配了默认100000大小的根,通过<code>root_used</code>来记录根对象的个数</p><h2 id="添加root"><a href="#添加root" class="headerlink" title="添加root"></a>添加root</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Obj* p= gc_malloc(Obj);</span><br><span class="line">add_roots(&amp;p);</span><br></pre></td></tr></table></figure><p>通过<code>add_roots</code>将对象加入root，成为可达对象，那么只要一直在root中，当前对象永远不会被回收</p><p><code>&amp;p</code>注意这里是引用，在上面部分说了，如果执行的内存被拷贝到新地址了，需要同时更新p的地址</p><h1 id="Real-Root-尝试"><a href="#Real-Root-尝试" class="headerlink" title="Real Root 尝试"></a>Real Root 尝试</h1><p>上面基本都是讲的模拟的根，那么我们来尝试一下可不可以实现真正意义的根访问呢</p><p>这里的测试主要分为<code>寄存器的访问</code>，<code>系统栈的遍历搜索</code></p><p>完整代码可以在<code>gc-try</code>下测试</p><h2 id="寄存器的扫描"><a href="#寄存器的扫描" class="headerlink" title="寄存器的扫描"></a>寄存器的扫描</h2><p>首先来统计一下我们在程序运行期间能够使用到的寄存器</p><ol><li><code>函数参数寄存器</code>: rdi,rsi,rdx,rcx,r8,r9 多的就存放在栈上了不用管</li><li><code>通用寄存器</code>    : rax,rbx,rbp,rsp,%10-%15</li></ol><p>不严谨的说上面这些寄存器是我们最常用的通用寄存器，也就是说寄存器里面可能存储着有我们的对象，需要我们gc的时候进行扫描<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan_register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *reg;</span><br><span class="line">    <span class="keyword">if</span>(reg = get_sp())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_bp())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_di())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_si())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_dx())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_cx())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_r8())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_r9())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_ax())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">    <span class="keyword">if</span>(reg = get_bx())  gc_mark(*(<span class="keyword">void</span>**)reg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面相关的函数可以在这里找到<code>/gc-try/root.s</code></p><h2 id="系统栈的扫描"><a href="#系统栈的扫描" class="headerlink" title="系统栈的扫描"></a>系统栈的扫描</h2><p>这里是gc过程的一部分<code>遍历root</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在开始是真正的扫描系统栈空间</span></span><br><span class="line"><span class="keyword">void</span> * cur_sp = get_sp();</span><br><span class="line"><span class="comment">//高低往低地址增长</span></span><br><span class="line">assert(sp_start &gt;= cur_sp);</span><br><span class="line"><span class="keyword">for</span> (; cur_sp &lt; sp_start ; cur_sp += <span class="number">4</span>)&#123;</span><br><span class="line">    gc_mark(*(<span class="keyword">void</span>**)cur_sp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>通过<code>get_sp()</code> 直接获取当前的系统栈顶,也就是<code>rsp寄存器</code>的地址</li><li><code>sp_start</code> 是我们在<code>main</code>开始前记录的栈起始位置</li><li><code>[sp_start,cur_sp]</code> 这个区间就是我们当前的栈范围，直接扫描整个区间就可以访问我们所有的可达变量</li><li><code>(void**)cur_sp</code> 是一个解引用操作，此时获取的值就是我们的代码里的临时变量</li></ol><p>要理解我们扫描栈的意义就要先理解什么是栈，一张图说明一下c的函数栈帧结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">                         +--------------+  -&gt; 这里就是函数A的栈帧范围了</span><br><span class="line">                         |              |  </span><br><span class="line">                    +    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |   arg(N-1)   |  -&gt; 参数超过6个后，其他参数就放在这里</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |Return address|  -&gt; 这里指向函数A的中断的下一个指令地址</span><br><span class="line">Stack grows down    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |     %rbp     |  -&gt; 这里指向函数A的起始栈帧rbp</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+  -&gt; 下面就是函数B的栈帧，当前rbp</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |  local(N-1)  |  -&gt; 函数B的本地变量</span><br><span class="line">                    |    |              |</span><br><span class="line">                    v    +--------------+  </span><br><span class="line">                         |              |</span><br><span class="line">                         |              |</span><br><span class="line">                         +--------------+  -&gt; 当前栈顶</span><br></pre></td></tr></table></figure><p><code>上面get_sp()</code>函数是通过汇编实现获取当前寄存器<code>rsp</code>的值，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">.globl get_sp</span><br><span class="line">get_sp:</span><br><span class="line">    movq %rsp,%rax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></p><p>其实就是简单的返回了<code>rsp</code>寄存器的值而已，翻译为c函数的话像这样:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">get_sp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">register</span>(rsp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里就是实现了真正意义上的<code>根root</code>，只要当前栈未被释放，那么当前栈帧上能搜索到的的对象都是合法对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;讲&lt;code&gt;root&lt;/code&gt;根之前我们要先理解什么是&lt;code&gt;gc 回收&lt;/code&gt;，怎么定义垃圾等等,区别垃圾可以简单这么理解:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果某对象没有被任何地方引用 - &lt;code&gt;垃圾对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果某对象至少还
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="gc-learning" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/"/>
    
      <category term="前言" scheme="http://wiki.brewlin.com/categories/blog/gc-learning/%E5%89%8D%E8%A8%80/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="algorithm" scheme="http://wiki.brewlin.com/tags/algorithm/"/>
    
      <category term="gc" scheme="http://wiki.brewlin.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Goos-底层协程实现(三)</title>
    <link href="http://wiki.brewlin.com/wiki/blog/goos/Goos-%E5%BA%95%E5%B1%82%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0(%E4%B8%89)/"/>
    <id>http://wiki.brewlin.com/wiki/blog/goos/Goos-底层协程实现(三)/</id>
    <published>2020-08-13T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<p>本节主要讲解什么是多线程协程的投递、调度、以及切换的汇编实现</p><ul><li><a href="">Goos-多线程协程实现简要</a></li><li><a href="">Goos-协程底层实现(一)</a></li><li><a href="">Goos-线程协程隔离(二)</a></li><li>Goos-线程切换实现(三)</li><li><a href="">Goos-抢占调度实现(四)</a></li><li><a href="">Goos-监控线程实现(五)</a></li></ul><h1 id="协程调度流程"><a href="#协程调度流程" class="headerlink" title="协程调度流程"></a>协程调度流程</h1><h2 id="全局队列队列投递"><a href="#全局队列队列投递" class="headerlink" title="全局队列队列投递"></a>全局队列队列投递</h2><p>我们在php层创建一个协程的方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go(function())&#123;</span><br><span class="line">   //do something...;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>调用<code>go</code>函数，将一个php函数参数传入协程调度器执行，这里go函数执行完毕之前是异步的，不会立即就执行该任务，而是将该任务投递到一个全局队列里，等待线程接收后处理</p><p>投递任务:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//coroutine/Coroutine.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">Coroutine::run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//投递到 proc 线程去执行该协程</span></span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"未初始化线程"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"未初始化线程"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    proc-&gt;gogo(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//本来是会新生成一个协程id返回的，但是目前没什么用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>主要是判断 线程调度器有没有初始化，<code>proc == nullptr</code></li><li>调用全局<code>proc-&gt;gogo(ctx)</code> 将封装好的一个ctx协程投递到线程中去</li></ol><h2 id="全局队列结构"><a href="#全局队列结构" class="headerlink" title="全局队列结构"></a>全局队列结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/Proc.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//method ....</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//...省略其他字段</span></span><br><span class="line">    condition_variable  cond;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Context *&gt;    tasks;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;thread&gt;      workers;</span><br><span class="line">    mutex queue_mu;</span><br><span class="line">    <span class="keyword">bool</span> stop;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><code>cond</code> 条件变量，用户获取锁的时候使cpu睡眠时等待唤醒的条件</li><li><code>tasks</code> 为一个全局队列，用于接收投递的协程G</li><li><code>workers</code> 默认启动的线程M</li><li><code>queue_mu</code> 线程锁</li></ol><p>新的协程创建后会投递到<code>tasks</code>队列，然后随机唤醒一个线程M来处理该协程:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/proc.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Proc::gogo</span><span class="params">(Context* ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(queue_mu)</span></span>;</span><br><span class="line">    now = chrono::steady_clock::now();</span><br><span class="line">    <span class="keyword">this</span>-&gt;tasks.emplace(ctx);</span><br><span class="line">    cond.notify_one();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="协程调度执行"><a href="#协程调度执行" class="headerlink" title="协程调度执行"></a>协程调度执行</h2><p>每个线程M的初始化执行后，会进入schedule事件循环，如果没有信号过来则默认会进入睡眠状态，等待唤醒后处理投递进来的协程G，并初始化协程环境后绑定当前M-G的关系后执行该php用户态函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/pro.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Proc::schedule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        Context*   ctx;</span><br><span class="line">        Coroutine* co;</span><br><span class="line">        <span class="comment">//省略本地队列 。。相关逻辑</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(<span class="keyword">this</span>-&gt;queue_mu)</span></span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;cond.wait(lock,[<span class="keyword">this</span>,rq]&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.empty();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.empty())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>-&gt;tasks.empty())&#123;</span><br><span class="line">                ctx = move(<span class="keyword">this</span>-&gt;tasks.front());</span><br><span class="line">                <span class="keyword">this</span>-&gt;tasks.pop();</span><br><span class="line">                co = <span class="keyword">static_cast</span>&lt;Coroutine *&gt;(ctx-&gt;func_data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(co == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"co exception:"</span>&lt;&lt;co&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前线程分配到一个未初始化的G</span></span><br><span class="line">        <span class="keyword">if</span>(co-&gt;gstatus == Gidle) co-&gt;newproc();</span><br><span class="line">        <span class="comment">//恢复被暂停的G</span></span><br><span class="line">        <span class="keyword">else</span> co-&gt;resume();</span><br><span class="line">        <span class="comment">//G运行结束 销毁栈</span></span><br><span class="line">        <span class="keyword">if</span>(ctx-&gt;is_end) co-&gt;close();</span><br><span class="line">        <span class="comment">//省略一些其他的。。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>当前线程处于cpu睡眠态，等待唤醒的方式目前有两个情景<ul><li><code>gogo()</code> 协程投递的时候会触发唤醒随机线程 <code>cond-&gt;notify_one()</code></li><li><code>sysmon</code> 监控线程有一些管理任务会涉及当前线程去处理任务</li></ul></li><li><code>pop tasks</code> 出队列拿到一个协程G任务</li><li>判断该G是<code>新协程</code>还是需要再次<code>恢复</code>的调度协程</li><li>新协程为<code>co-&gt;newproc()</code> 开始走新协程的调用</li><li>中断协程的恢复走<code>co-&gt;resume()</code>恢复协程的继续运行</li><li>如果协程状态为<code>close</code>则回收该协程资源</li></ol><h1 id="协程的c栈内存模型"><a href="#协程的c栈内存模型" class="headerlink" title="协程的c栈内存模型"></a>协程的c栈内存模型</h1><h2 id="协程的创建执行"><a href="#协程的创建执行" class="headerlink" title="协程的创建执行"></a>协程的创建执行</h2><p>针对新协程的执行:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//coroutine/Coroutine.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Coroutine::newproc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    callback-&gt;is_new = <span class="number">0</span>;</span><br><span class="line">    callback-&gt;prepare_functions(<span class="keyword">this</span>);</span><br><span class="line">    PHPCoroutine::save_stack(&amp;main_stack);</span><br><span class="line">    GO_ZG(_g) =  <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//每次切入时出去时需要更新tick 和时间</span></span><br><span class="line">    GO_ZG(schedwhen) = chrono::steady_clock::now();</span><br><span class="line">    GO_ZG(schedtick) += <span class="number">1</span>;</span><br><span class="line">    gstatus = Grunnable;</span><br><span class="line">    ctx-&gt;swap_in();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>准备当前G的php环境，比如拷贝当前G对应引用的php<code>全局变量</code>，<code>类对象</code>，<code>外部引用</code>等等,这个会在<code>线程协程隔离中说明</code></li><li>保存当前<code>php栈</code>信息，如第一章中函数本质部分说的，在调用一个函数前，会将当前<code>sp,bp,ss:ip</code>等必要寄存器压栈保存，在函数放回的时候会找到该地址，然后进行跳转实现返回。不过这个是<code>php栈</code></li><li><code>GO_ZG(_g) = this</code> 将当前G绑定到M上 </li><li><code>gstatus = Grunable</code> 标记当前G运行状态</li><li><code>ctx-&gt;swap_in()</code> 正式执行该协程</li></ol><h2 id="C栈内存结构"><a href="#C栈内存结构" class="headerlink" title="C栈内存结构"></a>C栈内存结构</h2><p>首先是c栈的内存申请过程<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/Context.cpp</span></span><br><span class="line"></span><br><span class="line">Context::Context(run_func func,<span class="keyword">void</span> *data):_fn(func),func_data(data)</span><br><span class="line">&#123;</span><br><span class="line">    bp =  <span class="keyword">new</span> <span class="keyword">char</span>[DEFAULT_STACK];</span><br><span class="line">    make_context(&amp;cur_ctx,&amp;context_run, <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(<span class="keyword">this</span>),bp,DEFAULT_STACK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>创建一个<code>8k</code>的堆内存，用于实现c的函数栈</li><li>调用<code>make_context</code> 初始化该栈帧内存结构</li></ol><p>在实际执行用户传递的php函数前还有一个包装流程:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/Context.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要运行的函数</span></span><br><span class="line"><span class="comment"> * @param arg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Context::context_run</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Context *_this = <span class="keyword">static_cast</span>&lt;Context *&gt;(arg);</span><br><span class="line">    _this-&gt;_fn(_this-&gt;func_data);</span><br><span class="line">    _this-&gt;is_end = <span class="literal">true</span>;</span><br><span class="line">    GO_ZG(_g) = <span class="literal">nullptr</span>;</span><br><span class="line">    _this-&gt;swap_out();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>这里的<code>_this-&gt;func_data</code>就是协程G对象，实际执行单元</li><li><code>_this-&gt;_fn</code> 是一个函数指针，指向<code>PHPCoroutine.cpp::run()</code>,该函数初始化php栈帧信息，准备执行实际的php函数</li><li><code>_this-&gt;_fn</code> 执行完毕则代表该G生命周期完毕，否则说明当前G已经被暂停，切换出去了，等待恢复继续执行</li><li><code>_this-&gt;is_end =true</code> 标志当前G 已结束,</li><li><code>GO_ZG(_g) = nullptr</code> 解绑当前<code>G - M</code>的绑定关系</li><li><code>_this-&gt;swap_out()</code>  这里很重要，当前函数依然是在协程范围内，所以必须显式通过<code>swap_out()</code>模拟函数<code>return</code>返回到之前的函数调用，否则没有任何意义，因为cpu不知道下一条待执行的指令是什么，无法回到正常的执行流程</li></ol><h2 id="c栈的内存模型"><a href="#c栈的内存模型" class="headerlink" title="c栈的内存模型"></a>c栈的内存模型</h2><p>这里比较重要，需要将堆内存转换为函数栈，且将一些必要配置初始化，例如将协程G的函数地址压栈<code>(压堆)</code>，以及增加安全机制</p><p>通过调用<code>make_context</code> 将堆内存转换为普通c函数栈模型，为实现函数调用做准备<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/asm/make_context.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_SAVED 6</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_context</span> <span class="params">(asm_context *ctx, run_func fn, <span class="keyword">void</span> *arg, <span class="keyword">void</span> *sptr, <span class="keyword">size_t</span> ssize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fn)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  ctx-&gt;sp = (<span class="keyword">void</span> **)(ssize + (<span class="keyword">char</span> *)sptr);</span><br><span class="line">  *--ctx-&gt;sp = (<span class="keyword">void</span> *)<span class="built_in">abort</span>; </span><br><span class="line">  *--ctx-&gt;sp = (<span class="keyword">void</span> *)arg;</span><br><span class="line">  *--ctx-&gt;sp = (<span class="keyword">void</span> *)fn;</span><br><span class="line">  ctx-&gt;sp -= NUM_SAVED;</span><br><span class="line">  <span class="built_in">memset</span> (ctx-&gt;sp, <span class="number">0</span>, <span class="keyword">sizeof</span> (*ctx-&gt;sp) * NUM_SAVED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>检查<code>fn</code>是否存在</li><li>因为函数栈内存是从高地址往低地址增长，所以 <code>sp寄存器指向的栈顶</code>要指向堆的结束地址位置<code>((void **)(ssize + (char *)sptr))</code></li><li><code>*--ctx-&gt;sp = (void *)abort;</code> 其实就是压栈，将一个<code>abort</code>函数地址压栈，且sp地址自动下移，abort函数是一个保障机制，如果某个协程G没有实现跳转回主流程，则调用<code>abort</code>报异常</li><li><code>*--ctx-&gt;sp = (void *)arg;</code> 将函数参数压栈，在跳转的时候可能需要传递参数，到时候通过<code>popq %rdi</code>将arg送入<code>rdi</code>寄存器实现函数传参</li><li><code>*--ctx-&gt;sp = (void *)fn</code>   将函数地址压栈，cpu在执行时通过获取该地址后跳转，实现函数调用</li><li><code>ctx-&gt;sp - = 6</code>; 腾出6个变量的位置，用于存储上下文信息，比如在函数切换前要保存之前的寄存器变量信息<br><img src="/images/blog/goos/3-stack.png" alt="image"></li></ol><h1 id="协程切换的汇编解析"><a href="#协程切换的汇编解析" class="headerlink" title="协程切换的汇编解析"></a>协程切换的汇编解析</h1><p>协程切换的汇编实现为<code>/runtime/asm/jump_context.s</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">.globl jump_context</span><br><span class="line">jump_context:</span><br><span class="line">    pushq %rbp</span><br><span class="line">    pushq %rbx</span><br><span class="line">    pushq %r12</span><br><span class="line">    pushq %r13</span><br><span class="line">    pushq %r14</span><br><span class="line">    pushq %r15</span><br><span class="line">    movq %rsp, (%rdi)</span><br><span class="line">    movq (%rsi), %rsp</span><br><span class="line">    popq %r15</span><br><span class="line">    popq %r14</span><br><span class="line">    popq %r13</span><br><span class="line">    popq %r12</span><br><span class="line">    popq %rbx</span><br><span class="line">    popq %rbp</span><br><span class="line">    popq %rcx</span><br><span class="line">    popq %rdi</span><br><span class="line">    jmpq *%rcx</span><br><span class="line">    popq %rcx</span><br><span class="line">    jmpq *%rcx</span><br></pre></td></tr></table></figure></p><h2 id="汇编指令解析"><a href="#汇编指令解析" class="headerlink" title="汇编指令解析"></a>汇编指令解析</h2><ul><li><code>.text</code> 标明下面是一块代码段，在cpu指令执行过程中能够确认他们是指令段而非数据段</li><li><code>.globl jump_context</code> 这里相当于c语言声明一个函数名的作用，对于cpu来说函数其实就是一个指令地址，这里也是用于在连接过程中将当前函数的地址进行标记</li></ul><h2 id="保存上下文"><a href="#保存上下文" class="headerlink" title="保存上下文"></a>保存上下文</h2><ul><li>保存当前函数的上下文，对于程序上下文来说，其实细分到cpu，就是保存该函数时刻的寄存器对应的值和函数栈bp,sp的位置，基本靠这些就可以标明当前某个函数的执行状态了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下面的6个寄存器应该符合调用者规约，也就是在调用其他函数前应该由调用者保存起来，防止在子函数中被篡改</span><br><span class="line">%rbx,%rbp,%r12,%r13,%r14,%r15</span><br><span class="line"></span><br><span class="line">    pushq %rbp 将当前函数栈底rbp寄存器保存起来 </span><br><span class="line">    pushq %rbx 将基地址寄存器保存起来，bx操作评率较高，bx默认指 ds数据段，一般用作内存访问</span><br><span class="line">    pushq %r12</span><br><span class="line">    pushq %r13</span><br><span class="line">    pushq %r14</span><br><span class="line">    pushq %r15</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul><li><code>接受参数</code>: jump_context() 接收两个参数，<code>prev指针，其实就是当前c栈</code>,<code>next* 目标c栈</code>，因为函传参的底层汇编实现是通过寄存器来实现的，所以<code>prev,next</code>参数默认是按照保存到<code>rdi,rdx</code>寄存器中</li></ul><p><img src="/images/blog/goos/3-stack2.png" alt="image"></p><p>顺便提一下:通常如果参数比较少的话（一般6个作为界限），则通过寄存器进行传参数。顺序为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%rdi,%rsi,%rdx,%rcx,%r8,%r9 </span><br><span class="line">依次对应</span><br><span class="line">func(arg1,arg2,arg3,arg4,arg5,arg6);</span><br></pre></td></tr></table></figure></p><p>如果超过了6个，就需要栈来辅助接受函数参数了，如上图所示。在调用者函数栈顶前一个，则是存储的函数参数</p><h2 id="函数栈祯切换"><a href="#函数栈祯切换" class="headerlink" title="函数栈祯切换"></a>函数栈祯切换</h2><p>这个就是核心功能了，我们知道在正常的函数调用执行流中，我们都是使用了程序装载前分配的那个系统栈，不出意外从程序开始到结束都是不断的复用该程序栈。<br>但是由于协程的出现，基于堆内存模拟的函数栈。那么在调用函数的时候就必须<code>切换栈</code><br><img src="/images/blog/goos/3-stack3.png" alt="image"><br>如上图，只要是默认的c函数或者业务函数都是基于系统栈祯的，例如调用<code>A</code>函数的时候默认在系统栈祯下面使用新的空间来存储A函数的栈祯，都是使用的系统栈</p><p>而如果我们此时要进行协程调用，则需要将cpu的<code>sp</code>等寄存器切换到我们的协程B函数的栈祯首地址，那么cpu的执行流就会切换到协程B栈上执行，所有的变量内存都会依赖心的协程B栈，<code>注意</code>:毕竟协程B的栈是堆模拟出来的，所以是预分配有限制大小的内存，在使用的时候不要越栈，并且协程B栈执行完后一定要恢复到兄台你栈祯的继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movq %rsp, (%rdi)</span><br><span class="line">movq (%rsi), %rsp</span><br></pre></td></tr></table></figure><p>这两条汇编指令实现了系统栈 - 协程栈的切换，<code>rsp</code>当前系统栈栈顶，<code>rdi</code>第一个函数参数,保存调用者的栈信息(可能是系统栈，也可能是协程切换了多次，也可能是协程栈本身)。<code>rsi</code>第二个函数参数,保存的被调用者函数的地址信息(可能是协程栈祯，也可能是协程结束后，准备切换为系统栈的栈祯)</p><h2 id="恢复环境上下文"><a href="#恢复环境上下文" class="headerlink" title="恢复环境上下文"></a>恢复环境上下文</h2><p>到这里已经切换到了协程栈，远离的系统栈，下面的汇编指令是实现恢复上下文寄存器，<code>在第一次协程创建的时候是空的</code>，但是当切换多次后就会发现，者6个寄存器永远保持上一个协程状态的环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">popq %r15</span><br><span class="line">popq %r14</span><br><span class="line">popq %r13</span><br><span class="line">popq %r12</span><br><span class="line">popq %rbx</span><br><span class="line">popq %rbp</span><br></pre></td></tr></table></figure><p>pop的过程如下，总的来说就是将栈上的变量恢复到寄存器中，实现函数状态的恢复，<code>第一次协程是没有意义的</code>因为默认是6个寄存器的占位符<br><img src="/images/blog/goos/3-stack4.png" alt="image"></p><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><p>目前的函数栈祯如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">|   abort  |</span><br><span class="line">------------</span><br><span class="line">|   arg    |</span><br><span class="line">------------</span><br><span class="line">|   func   |</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure></p><p>可以看到我们的函数栈只剩下三个值了，接下来的汇编指令将pop栈，实现函数调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">popq %rcx</span><br><span class="line">popq %rdi</span><br><span class="line">jmpq *%rcx</span><br></pre></td></tr></table></figure></p><p>这里有两次<code>pop</code>说明出栈了两个数据<code>func,arg</code>刚好对应我们的函数地址和函数参数地址，</p><p><code>popq %rcx</code>： 这里将函数地址保存到<code>rcx寄存器</code>,为什么选rcx寄存器呢，没啥区别，选啥都可以，反正就是为了拿到函数地址而已</p><p><code>pop %rdi</code> :  这里就是将arg指针保存到<code>rdi</code>寄存器，前面说过函数传参按照顺序来说第一个参数的寄存器就是<code>rdi</code>所以讲arg指针保存到<code>rdi</code>寄存器实现函数传参</p><p><code>jmpq *%rcx</code>:  这里就是真正执行的函数调用，<code>rcx</code>保存的是我们的函数地址，jumq 就是让cpu跳转到该函数指令地址执行，实现函数调用</p><h2 id="协程栈收尾"><a href="#协程栈收尾" class="headerlink" title="协程栈收尾"></a>协程栈收尾</h2><p>到这里的时候，说明程序已经崩溃了，目前协程栈内存模型:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">|   abort  |</span><br><span class="line">------------</span><br></pre></td></tr></table></figure></p><p>如果执行到这里，说明我们的协程==没有切回主系统栈==,那么这里直接调用<code>abort</code>给一个通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">popq %rcx</span><br><span class="line">jmpq *%rcx</span><br></pre></td></tr></table></figure><p>执行<code>abort()</code>函数</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过自己申请一块堆内存来模拟函数栈实现函数调用是为了更好的控制该函数的生命周期，以此实现函数的暂停、恢复等操作，有点类似于线程，但是性能更好、代价更小，甚至和普通函数调用无差别，这就是协程、一种用户态线程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节主要讲解什么是多线程协程的投递、调度、以及切换的汇编实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Goos-多线程协程实现简要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Goos-协程底层实现(一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Goos
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="goos" scheme="http://wiki.brewlin.com/categories/blog/goos/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="coroutine" scheme="http://wiki.brewlin.com/tags/coroutine/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/tags/thread/"/>
    
      <category term="scheduler" scheme="http://wiki.brewlin.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>Goos-底层协程实现(一)</title>
    <link href="http://wiki.brewlin.com/wiki/blog/goos/Goos-%E5%BA%95%E5%B1%82%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0(%E4%B8%80)/"/>
    <id>http://wiki.brewlin.com/wiki/blog/goos/Goos-底层协程实现(一)/</id>
    <published>2020-08-10T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<p>本节主要讲解什么是协程、协程的实现、php的协程封装的内容，从为什么我们需要协程到如何实现协程，主要讲解协程、php、c、汇编指令的相关关系，从整体窥探它的整个结构</p><ul><li><a href="">Goos-多线程协程实现简要</a></li><li>Goos-协程底层实现(一)</li><li><a href="">Goos-线程协程隔离(二)</a></li><li><a href="">Goos-线程切换实现(三)</a></li><li><a href="">Goos-抢占调度实现(四)</a></li><li><a href="">Goos-监控线程实现(五)</a></li></ul><h1 id="协程本质"><a href="#协程本质" class="headerlink" title="协程本质"></a>协程本质</h1><p>协程最直观的就是我们将一个闭包函数当做<code>参数</code>丢给了某个任务去执行，那么实际执行的其实就是我们自定义的函数，如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Runtime::GOMAXPROCS(<span class="number">10</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"start doing sth"</span>;</span><br><span class="line">&#125;</span><br><span class="line">go(task);</span><br><span class="line"></span><br><span class="line">Runtime::wait();</span><br></pre></td></tr></table></figure></p><p>可以看到我们将<code>task</code>函数交给<code>go</code>去执行，某些情况下和我们直接<code>task()</code>调用无任何区别，那么我们为什么还要通过<code>go</code>来调用呢，因为我们想要更好的控制该函数的生命周期，试下一下如下场景:</p><ol><li><p>网络等待导致当前进程阻塞与网络调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//maybe 10s+ waiting</span></span><br><span class="line">    $data = scoket_read(fd);</span><br><span class="line">    <span class="comment">//then do sting</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务逻辑死循环导致进程挂起</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sth is <span class="keyword">true</span>)</span><br><span class="line">            then <span class="keyword">break</span> loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单纯是需要利用多核cpu，且不想采用多进程的方式</p></li></ol><p>如果我们直接就调用执行了<code>task</code>。上面的三种情况都会导致性能杀手或者进程卡死，有没有一种方法可以控制函数的执行并且能无需受到到所写的业务代码还要担心阻塞等心智负担呢。有没有办法能够充分利用多核实现并行执行呢，所以多线程协程才有了意义。</p><ol><li>针对第一种网络阻塞等三方接口调用导致的阻塞，将该代码丢入协程调度器去执行，那么发生阻塞的时候会自动跳过当前函数，继续执行其他任务，完美解决当前问题。当然我们还需要一个契机去恢复上一次函数的继续执行，这就是后续要实现的<code>poller</code>网络轮训器来作为调度过程的一部分，当网络事件到来则恢复刚才暂停的函数继续去执行</li><li>如果某个函数长期占有cpu，导致其他函数得不到执行，这种情况就可以发起抢占，将当前函数从调度器中移除，继续执行其他的任务，很好的解决了进程卡死和效率低的问题</li><li>当然对于多线程来说本身就是可以利用多核cpu的，这样就更好的控制了并发</li></ol><p>继续回到协程本质的话题，协程本质就是可以通过调度器来管理一个用户自定义的函数，且该自定义函数被执行的期间的任务可以称为协程，和直接调用函数的区别在于协程的整个期间可以由内由外来进行控制，</p><h1 id="函数本质"><a href="#函数本质" class="headerlink" title="函数本质"></a>函数本质</h1><p>我们通过函数来将我们的业务逻辑划分为多个子集，为了更好的管理工程和设计，我们可以拿函数来作为例子讲解一下实际的执行过程</p><h2 id="php函数的实现"><a href="#php函数的实现" class="headerlink" title="php函数的实现"></a>php函数的实现</h2><p>引用这里的文档:<a href="https://www.kancloud.cn/lifei6671/php-kernel/675135,来简单分析下函数的本质">https://www.kancloud.cn/lifei6671/php-kernel/675135,来简单分析下函数的本质</a></p><p>php函数实际对应于c语言的<code>zend_function</code>结构体:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span>  _zend_function        zend_function;</span><br><span class="line"></span><br><span class="line"><span class="comment">//zend_compile.h</span></span><br><span class="line"><span class="keyword">union</span> _zend_function &#123;</span><br><span class="line">    zend_uchar type;    <span class="comment">/* MUST be the first element of this struct! */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        zend_uchar type;  <span class="comment">/* never used */</span></span><br><span class="line">        zend_uchar arg_flags[<span class="number">3</span>]; <span class="comment">/* bitset of arg_info.pass_by_reference */</span></span><br><span class="line">        <span class="keyword">uint32_t</span> fn_flags;</span><br><span class="line">        zend_string *function_name;</span><br><span class="line">        zend_class_entry *scope; <span class="comment">//成员方法所属类，面向对象实现中用到</span></span><br><span class="line">        <span class="keyword">union</span> _zend_function *prototype;</span><br><span class="line">        <span class="keyword">uint32_t</span> num_args; <span class="comment">//参数数量</span></span><br><span class="line">        <span class="keyword">uint32_t</span> required_num_args; <span class="comment">//必传参数数量</span></span><br><span class="line">        zend_arg_info *arg_info; <span class="comment">//参数信息</span></span><br><span class="line">    &#125; common;</span><br><span class="line"></span><br><span class="line">    zend_op_array op_array; <span class="comment">//函数实际编译为普通的zend_op_array</span></span><br><span class="line">    zend_internal_function internal_function;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>php实际有两种函数，一种是普通函数，另外一只是对象成员函数。 成员函数和普通函数的区别在于,底层zend_function指针内部的scope 会指向一个对象，普通函数则为<code>NULL</code>，成员函数则会指向当前的<code>zend_class_entry</code>对象指针来实现<code>this</code>功能</p><p>对于php函数还有两个区别,用户自定义函数和内部函数,虽然所有的函数都被包装成为了<code>zend_function</code>，但<code>zend_function</code>是一个联合体，所以不同类型的函数在结构上还是有区别的</p><ol><li>php的内部函数、动态扩展提供的c函数等，这些都是直接存储了一个函数指针给php层面调用即可，即<code>zend_function-&gt;internal_function</code>指向的是c层面的函数指针，无需其他初始化操作</li><li>php用户自定义函数，这个时候就有点复杂了，这个层面是zend引擎通过词法、语法分析等将php代码翻译为opcode码、基本就是汇编代码，直接装到<code>op_array</code>中，在发生函数调用是,会将<code>op_array</code>载入全局execute_globals执行引擎，等待执行opcode码</li></ol><h2 id="c函数的实现"><a href="#c函数的实现" class="headerlink" title="c函数的实现"></a>c函数的实现</h2><p>c语言函数就显得非常纯粹了，完全是按照cpu的执行方式来进行思考的，需要完整的考虑内存如:堆、栈等信息，在c层面我们就能想到很多问题，那么我们来讲讲什么是堆？什么是栈?</p><p>对于cpu来说内部有多个寄存器，同一时间只能存储一个值，所以显然是不够的，我们的程序拥有无比复杂的变量定义和逻辑运算，例如x64位cpu有16个通用寄存器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通用: %rax %rbx %rdx %esi %edi %rbp %rsp %8-%15 </span><br><span class="line">栈段: %ss  %sp</span><br><span class="line">码段: %cs %ip</span><br><span class="line">数据段: %ds,%es</span><br></pre></td></tr></table></figure></p><p>即使这样依然是不够的，我们需要一种比较持久的方法来存储我们的变量以及相关函数地址。那就是栈,那怎么标识一个栈的位置呢，比如栈的起始位置和结束位置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cpu中有两个关键的寄存器用于标识栈的信息，ss:sp:bp 等段基础寄存器</span><br><span class="line">ss: 指向栈段的顶点边界</span><br><span class="line">sp: 指向的是栈底边界</span><br><span class="line">bp: 一般在函数开始的时候，指向当前函数的栈底，sp=bp 然后对于栈上的变量都是基于bp+偏移量访问的</span><br></pre></td></tr></table></figure></p><h3 id="问题-同时多个实例的内存是怎么区分的"><a href="#问题-同时多个实例的内存是怎么区分的" class="headerlink" title="问题: 同时多个实例的内存是怎么区分的"></a>问题: 同时多个实例的内存是怎么区分的</h3><p>每个程序在编译为机器码后，对应的ss，sp段寄存器的地址都是一样的，在编译期间就计算了，例如<br><img src="/images/blog/goos/1.png" alt="image"></p><p>这个是一个win 16的debug.exe，可以看到每个cpu指令执行期间的每个寄存器的值，当你的程序被启动多次，也就是产生了多个进程时，对于cpu来说执行的指令没有任何区别，包括上面<code>ss</code>,<code>sp</code>对于的栈地址也是一样</p><p>那就产生一个疑问，这样的话多进程下岂不是变量共享了，其实到这里就需要引申一个<code>虚拟地址</code>的问题，其实我们的运行的程序所有变量的地址都是虚拟地址，在实际访问时，由操作系统转为实际的物理地址</p><p>这就是为什么你针对多个进程debug，查看同一个变量地址时都是相同的，但是实际所指的地址却不是同一个东西的原因</p><h3 id="函数栈的形成"><a href="#函数栈的形成" class="headerlink" title="函数栈的形成"></a>函数栈的形成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">SP 栈顶: 0x10000</span><br><span class="line">1. 这里是main函数        +--------------+ main函数起始地址</span><br><span class="line">                         |              |</span><br><span class="line">                    +    |              | 这里是本地的变量存储区域</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |   arg(N-1)   | 这里起始就开始准备调用函数了</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |     argN     |</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">2.start call        |    |Return address|  %rbp + 8</span><br><span class="line">Stack grows down    |    |              |</span><br><span class="line"></span><br><span class="line">===================================================================================</span><br><span class="line"></span><br><span class="line">3.new function      |    +--------------+  新的函数栈起始地址</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |     %rbp     |  在刚初始化的时候 sp=bp</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |  local var1  |  %rbp - 8</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    | local var 2  | &lt;-- %rsp</span><br><span class="line">                    |    |              |</span><br><span class="line">                    v    +--------------+</span><br><span class="line">                         |              |</span><br><span class="line">                         |              |</span><br><span class="line">                         +--------------+</span><br><span class="line">SS 栈段边界         0x00000</span><br></pre></td></tr></table></figure><ol><li><p>main函数开始执行时从sp栈开始初开始存储，这个sp当前是栈内存区域的最大边界，没新增一个变量或者一些存储操作则进行 压栈操作，如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">会被翻译为如下汇编指令</span><br><span class="line">main:</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        <span class="comment">// 通过rbp -4 也就是用了栈的下面4字节来存储 int 2</span></span><br><span class="line">        <span class="comment">// 也就是压栈操作，其实这是一种直接操作栈的方式，这是编译器优化的结果</span></span><br><span class="line">        <span class="comment">// 正常情况下 应该使用  push 2;这种方式来操作栈，这样的话 sp始终会指向栈顶</span></span><br><span class="line">        <span class="comment">// 而通过偏移量来操作栈则不会引起 sp栈顶的变化</span></span><br><span class="line">        mov     DWORD PTR [rbp<span class="number">-4</span>], <span class="number">2</span></span><br><span class="line">        mov     eax, <span class="number">0</span></span><br><span class="line">        pop     rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></li><li><p>函数返回时的执行流程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//汇编指令</span></span><br><span class="line">test:</span><br><span class="line">        <span class="comment">//这里是压栈，当前的rbp其实是 调用放函数的rsp地址</span></span><br><span class="line">        push    rbp</span><br><span class="line">        <span class="comment">//将当前栈顶 复制给rbp寄存器，从此开辟了一个新的函数栈区</span></span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        <span class="comment">//这里就是我们程序实际逻辑开始的地方</span></span><br><span class="line">        mov     eax, <span class="number">2</span></span><br><span class="line">        <span class="comment">//程序结束，恢复调用方函数的栈底</span></span><br><span class="line">        pop     rbp</span><br><span class="line">        <span class="comment">//这里就是返回调用方调用函数的地方，恢复函数继续运行</span></span><br><span class="line">        ret</span><br><span class="line">        <span class="comment">//所谓函数返回，其实只是修改cpu的ip cs寄存器，修改cpu下一条需要执行的指令</span></span><br><span class="line">        <span class="comment">//那么下一条需要执行的指令其实就是 上面的Return address地址，我们也可以通过其他方法来实现ret</span></span><br><span class="line">        <span class="comment">// jmp %rbp+8;(%rbp+8  就是调用方函数的下一个cpu指令地址)从而实现了返回函数的功能</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="函数调用流程整理"><a href="#函数调用流程整理" class="headerlink" title="函数调用流程整理"></a>函数调用流程整理</h3><p>来自：<a href="https://juejin.im/post/6844903930497859591">https://juejin.im/post/6844903930497859591</a>  go plan9 汇编的函数调用图</p><p>因为总体流程大致相似<br><img src="/images/blog/goos/stack.png" alt="image"></p><ol><li>每个函数执行期间 通过 <code>bp,sp</code>寄存器来表示内存区域</li><li><code>bp</code>寄存器一般不会发生改变，一般通过bp+偏移量来获取相关栈上的变量</li><li><code>sp</code>表示的是栈顶，调用<code>push</code>指令会自动修改sp指向的值</li><li>通过整体流程的熟悉后，就能明白为什么栈数据是局部变量，会被回收（其实不是立即回收）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们的栈是一个整段内存 0x00000 - 010000,整个栈内存都会不断复用，如上所示，当函数返回时，当前bp就会被恢复为之前调用方函数的栈，那么当前函数的区域就保持不变。</span><br><span class="line">如果发生其他调用，则会复用当前函数的区域，则会覆盖当前变量</span><br><span class="line"></span><br><span class="line">所以在c语言中返回一个局部变量地址，在其他地方依然能够访问的前提是因为没有新函数的栈内存将当前栈覆盖</span><br></pre></td></tr></table></figure></li></ol><h3 id="栈-amp-堆的区别"><a href="#栈-amp-堆的区别" class="headerlink" title="栈&amp;堆的区别"></a>栈&amp;堆的区别</h3><ol><li>栈是一块连续内存，由操作系统在程序执行期间为整个进程分配的生命周期</li><li>堆内存是独立于当前栈的另外一个快内存，自然该内存不会受到像栈那样覆盖的影响，所以需要开发者自己管理，所以在c等静态语言中存在一个非常恐怖的问题(内存泄露),堆内存如果申请次数！=释放次数，那么你的内存就会逐渐飙升，等待系统给你kill吧</li></ol><p>其实对于计算机来说，所有的都是二进制数据，没有代码和数据的区别，那怎么区分代码和数据呢，在cpu中有一个寄存器叫<code>ip</code>寄存器，存储的是下一条指令的地址，如果不发生中断的情况下顺序读取ip寄存器的值来进行执行，所谓的数据段只是应用层面划分的一块区域，使ip寄存器不会去访问该区域而实现的一个数据块，堆和栈就是典型的数据块，栈数据块会被多次复用，而堆数据块是栈快之外的额外需要向操作系统申请的一块内存</p><h2 id="函数翻译后的cpu指令"><a href="#函数翻译后的cpu指令" class="headerlink" title="函数翻译后的cpu指令"></a>函数翻译后的cpu指令</h2><p>再来看看一个c语言函数被编译后的汇编指令，因为汇编语言已经是最底层的语法表达，基本就是二进制指令一一对应，所以可以用汇编来表示最底层的cpu指令</p><p>下面是一个函数调用<code>test</code>和定义一个全局变量的例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *str = <span class="string">"string data"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译后的汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">        .string &quot;string data&quot;</span><br><span class="line">str:</span><br><span class="line">        .quad   .LC0</span><br><span class="line">test:</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        mov     eax, 2</span><br><span class="line">        pop     rbp</span><br><span class="line">        ret</span><br><span class="line">main:</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        sub     rsp, 16</span><br><span class="line">        mov     DWORD PTR [rbp-4], 2</span><br><span class="line">        mov     eax, 0</span><br><span class="line">        call    test</span><br><span class="line">        mov     eax, 0</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><p>汇编最左边是一个标号，也可以当做地址，在其他地方直接通过该标号就可以引用到该地址</p><ol><li>main: 这个标号是在程序启动时由外部来进行调用跳转的，所以程序开始的地方就是 <code>main</code>标号，也就是 <code>$rip = main:</code>设置 ip寄存器为main，开始执行main函数</li><li><code>push rbp</code>: 基本所有的函数在执行前都要执行这行指令，表示将之前的栈底<code>rbp</code>保存起来，我们知道函数调用返回后需要恢复当前的栈环境，那么在调用函数之前，要保存当前的栈信息，所以需要<code>push rbp</code></li><li><code>mov rbp,rsp</code>: 这个就比较清楚了，表示开辟一个新栈，把当前的<code>栈顶</code>设置为新函数的<code>栈底</code>,那么新函数的执行环境就在新的栈空间使用</li><li><code>sub rsp,16</code> : 这个模拟压栈，我们知道<code>rsp</code>代表的是栈顶，那么我们也可以手动将栈顶下移一定的空间，而申请的空间我们可以存储变量等信息,这行和手动执行2次<code>push ***</code>是相同的，因为push首先<code>rsp -= 8</code>然后在将数据写入栈区</li><li><code>mov dword ptr [rbp-4],2</code>: 步骤4的时候新开辟了16字节的空间，这里就是通过对rbp进行偏移量来获取第一个4字节空间，然后将2存储进去，实现的一种手动压栈</li><li><code>mov eax,0</code>: 这个没什么特别的，ax寄存器一般用作计算、传参等作用的寄存器，这里先初始化恢复为0</li><li><p><code>call test</code>: 如1所说的，test是一个标号，也是一个地址，所以这里实际的执行可以分为如下两个步骤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push cs //将代码段基段 cs保存起来</span><br><span class="line">push ip //将ip段保存起来，这里相当于这个ip就是返回地址，当被调用函数返回的时，会获取当前换个ip在jmp %rip</span><br><span class="line">jmp  test // 跳转到test标号的地址，实现函数调用</span><br></pre></td></tr></table></figure></li><li><p>test: 进入test函数内部，首先执行<code>push rbp</code> 保存上一个函数的栈底指针</p></li><li><code>mov rbp,rsp</code>: 和main函数一样开辟新栈</li><li><code>mov eax,2</code>: 这里就是我们的c代码<code>return 2</code>的实际汇编指令，因为返回一般用ax寄存器存储，所以这里现将2存入eax寄存器</li><li><code>pop rbp</code>: 恢复main函数的栈底指针，准备返回到main函数的下一行代码继续执行</li><li><code>ret</code>: 可以表示为如下汇编<code>pop ip</code>实际就是获取main函数的之前保存的ip值，然后恢复到ip寄存器中，实现函数返回</li><li>最后讲讲全局变量:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//char *str = &quot;string data&quot;;</span><br><span class="line">c代码会被翻译为如下的汇编指令，可以看到全局变量也是放到整个代码段上面的，如何区分该代码是数据还是代码呢，区别就在我们的程序如何去对待他</span><br><span class="line">比如我们不管在何时引用.LCO时都是把他当做一个数据来处理，而不是加载到ip当做指令来执行</span><br><span class="line">.LC0:</span><br><span class="line">        .string &quot;string data&quot;</span><br><span class="line">str:</span><br><span class="line">        .quad   .LC0</span><br></pre></td></tr></table></figure></li></ol><h1 id="协程的创建"><a href="#协程的创建" class="headerlink" title="协程的创建"></a>协程的创建</h1><p>这里来讲讲我们php扩展怎么创建一个协程，php代码和扩展的c代码怎么交互的问题</p><h2 id="php创建协程"><a href="#php创建协程" class="headerlink" title="php创建协程"></a>php创建协程</h2><p>php执行一个协程函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"go task"</span>;</span><br><span class="line">&#125;</span><br><span class="line">go(task);</span><br></pre></td></tr></table></figure></p><p>c层面获取该函数<code>wrapper/coroutine.cpp</code>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(go_create)</span><br><span class="line">&#123;</span><br><span class="line">    zend_fcall_info fci = empty_fcall_info;</span><br><span class="line">    zend_fcall_info_cache fcc = empty_fcall_info_cache;</span><br><span class="line">    <span class="comment">//1 -1 可变参数</span></span><br><span class="line">    ZEND_PARSE_PARAMETERS_START(<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line">    Z_PARAM_FUNC(fci,fcc)</span><br><span class="line">    Z_PARAM_VARIADIC(<span class="string">"*"</span>,fci.params,fci.param_count)</span><br><span class="line">    ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE);</span><br><span class="line">    <span class="keyword">long</span> cid = PHPCoroutine::go(fcc.function_handler,fci.params,fci.param_count);</span><br><span class="line">    RETURN_LONG(cid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>PHP_FUNCTION</code>申明一个提供给php调用的api，<code>go</code>实际执行的是c的<code>go_create</code>。<code>fci,fcc</code>可以表示一个php传过来的函数参数.<br>通过<code>PHPCoroutine::go</code>来初始化一个协程，并投递到调度器去执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/coroutine/PHPCoroutine.cpp</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个协程G运行</span></span><br><span class="line"><span class="comment"> * @param call</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">PHPCoroutine::go</span><span class="params">(zend_function *func,zval *argv,<span class="keyword">uint32_t</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ZendFunction *call = <span class="keyword">new</span> ZendFunction(func,argv,argc);</span><br><span class="line">    Coroutine *ctx = <span class="keyword">new</span> Coroutine(run, call);</span><br><span class="line">    <span class="keyword">return</span> ctx-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>拷贝当前用户函数，因为多线程协程情况下已经采取了线程隔离<code>TSRM</code>,所以该闭包任务呗调度到其他线程执行时环境不同，且当前函数返回后可能被回收等因素，需要对用户的函数进行硬拷贝，拷贝会专门在线程隔离中说明。</li><li>创建一个<code>G</code>绑定当前php用户函数，等待投递调度</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//coroutine/Coroutine.cpp</span></span><br><span class="line"> * 投递到调度到其他线程CPU中去执行</span><br><span class="line"> * @<span class="keyword">return</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">long</span> Coroutine::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//投递到 proc 线程去执行该协程</span></span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"未初始化线程"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"未初始化线程"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    proc-&gt;gogo(ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里基本就完成了一个php协程创建到执行的过程了，<code>proc-&gt;gogo</code>后面就是属于调度和任务投递的事情了，这个是多线程调度处理的，会有专门的章节讲解</p><h1 id="全局队列与本地队列"><a href="#全局队列与本地队列" class="headerlink" title="全局队列与本地队列"></a>全局队列与本地队列</h1><p>目前实现的多线程协程基于两个队列来调度任务，一个是全局队列，所有线程获取时需要枷锁，另外一个是本地队列，目前只处理被调度过的协程，不接受新协程投递<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runtime/proc.cpp</span></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(<span class="keyword">this</span>-&gt;queue_mu)</span></span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;cond.wait(lock,[<span class="keyword">this</span>,rq]&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>-&gt;stop || !<span class="keyword">this</span>-&gt;tasks.empty() || !rq-&gt;q-&gt;isEmpty();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;stop &amp;&amp; <span class="keyword">this</span>-&gt;tasks.empty() &amp;&amp; rq-&gt;q-&gt;isEmpty())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>-&gt;tasks.empty())&#123;</span><br><span class="line">                ctx = move(<span class="keyword">this</span>-&gt;tasks.front());</span><br><span class="line">                <span class="keyword">this</span>-&gt;tasks.pop();</span><br><span class="line">                co = <span class="keyword">static_cast</span>&lt;Coroutine *&gt;(ctx-&gt;func_data);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                co = rq-&gt;q-&gt;pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(co == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"co exception:"</span>&lt;&lt;co&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ol><li><code>tasks</code> 是一个全局队列，新创建的协程优先投递到tasks等待所以线程获取，这里的问题就是会导致竞争严重，多线程会同时获取锁来争抢该协程</li><li><code>rq-&gt;q</code> 是一个本地队列，通过<code>GO_ZG(rq)</code>来获取该队列，所以调度的前提就是本地队列和全局队列都有数据则触发调度循环，获取待处理的协程进行切入</li></ol><h1 id="协程的释放"><a href="#协程的释放" class="headerlink" title="协程的释放"></a>协程的释放</h1><p>协程的释放，目前协程的释放会回收c栈和php栈，会极大的影响性能，后面会实现c和php栈复用，更好的提高性能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//coroutine/coroutine.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Coroutine::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_vm_stack <span class="built_in">stack</span> = EG(vm_stack);</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    restore_stack(&amp;main_stack);</span><br><span class="line">    <span class="keyword">delete</span> ctx;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>将当前的通过堆申请的栈销毁，也就是销毁php栈</li><li>恢复在协程切入前的主php栈，模拟函数返回</li><li>删除<code>ctx</code>也就是c栈，回收c栈</li><li><code>delete this</code>删除G相关内存，回收内存</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节主要讲解什么是协程、协程的实现、php的协程封装的内容，从为什么我们需要协程到如何实现协程，主要讲解协程、php、c、汇编指令的相关关系，从整体窥探它的整个结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Goos-多线程协程实现简要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="goos" scheme="http://wiki.brewlin.com/categories/blog/goos/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="coroutine" scheme="http://wiki.brewlin.com/tags/coroutine/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/tags/thread/"/>
    
      <category term="scheduler" scheme="http://wiki.brewlin.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>Goos-多线程协程实现简要</title>
    <link href="http://wiki.brewlin.com/wiki/blog/goos/Goos-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%AE%80%E8%A6%81/"/>
    <id>http://wiki.brewlin.com/wiki/blog/goos/Goos-多线程协程实现简要/</id>
    <published>2020-07-10T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Goos 是一个借鉴Golang的多线程协程调度器的设计而利用C++实现的PHP扩展。笔者在接触golang的协程调度器的力量后不能自拔，感受到协程的魅力后也想试试能不能为php也实现这么炫酷的功能</p><p>Goos 目的是实现一个真正意义的单进程多线程协程调度器，充分利用多核,使动态语言也能高效的开发出高性能的服务。目前主要实现进展如下:</p><ul><li style="list-style: none"><input type="checkbox" checked></input> php环境线程隔离，协程隔离</li><li style="list-style: none"><input type="checkbox" checked></input> 实现G-M调度,任意协程G创建后，自动绑定到线程M上去执行</li><li style="list-style: none"><input type="checkbox" checked></input> 实现多线程协程G调度，切出与恢复</li><li style="list-style: none"><input type="checkbox" checked></input> 优化php内存相关</li><li style="list-style: none"><input type="checkbox"></input> 引入P, 实现G-P-M 任务窃取调度</li><li style="list-style: none"><input type="checkbox"></input> 协程栈自动收缩，防止 stack overflow</li><li style="list-style: none"><input type="checkbox" checked></input> 实现抢占调度,可以对任意在执行的协程发起抢占</li><li style="list-style: none"><input type="checkbox" checked></input> 优化抢占调度,检查任意超过10ms持有G的线程，发起抢占调度</li></ul><p>目前主要在优化内存方面的实现、引入P的实现、周边工具的开发(lock…)</p><p>接下来的其他文章将陆续讲解从底层至汇编指令-php应用层的整个实现过程</p><ul><li>Goos-多线程协程实现简要</li><li><a href="">Goos-协程底层实现(一)</a></li><li><a href="">Goos-线程协程隔离(二)</a></li><li><a href="">Goos-线程切换实现(三)</a></li><li><a href="">Goos-抢占调度实现(四)</a></li><li><a href="">Goos-监控线程实现(五)</a></li></ul><p>现在php其实也有许多相关扩展都带有协程实现的、如swoole。swoole和golang区别还是挺大的。下面来讲讲swoole和golang的简单区别吧</p><h1 id="swoole的协程相关"><a href="#swoole的协程相关" class="headerlink" title="swoole的协程相关"></a>swoole的协程相关</h1><p>swoole的协程为单进程协程,无完整调度器，只有触发了相关hook后才能切换，例如：swoole可以替换<code>function_table</code>中的sleep变成非阻塞，当调用sleep后直接切出当前协程</p><p>在内存方面swoole会申请c栈和php栈，基本上每个协程会占有2m的堆内存，且在协程销毁后该内存没有复用而是直接释放，因为swoole协程没有栈的收缩，所以需要注意在协程内的不要越栈Stack Overflow，否则system会给你一个segment error kill 进程。</p><p>综上建议不要什么都往协程上扔，针对这种协程机制需要严格考虑场景否则协程就是你的瓶颈。</p><p>总结一下swoole的协程机制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 无协程调度只能依赖hook原生函数实现切换</span><br><span class="line"></span><br><span class="line">- 协程栈无复用导致频繁大内存申请释放</span><br><span class="line"></span><br><span class="line">- 无栈内存收缩，当协程栈溢出后即致命错误</span><br><span class="line"></span><br><span class="line">- 无抢占调度(发生for死循环将永远占用cpu)、</span><br><span class="line"></span><br><span class="line">- 同步协程模型</span><br></pre></td></tr></table></figure></p><p>上面的声明只是针对swoole的协程相关，因为swoole在多进程模式下也能充分利用多核cpu，弥补了一些不足，并且swoole的task-worker模型也做的足够出色了，可以轻松的实现一个多进程常驻通讯服务</p><h2 id="为什么无完整调度器协程"><a href="#为什么无完整调度器协程" class="headerlink" title="为什么无完整调度器协程"></a>为什么无完整调度器协程</h2><p>我认为调度过程应该是一个底层的分配管理过程，就像linux的调度一样是一个更加底层的管理，无需用户去关注，而针对协程的调度目前主要有两个方面</p><p>协程让出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个正在运行的G，享有独立的栈空间，该栈是从堆上分配的一块独立内存来模拟栈行为。</span><br><span class="line">且该独立的函数栈在执行过程中能够中断，能够暂停后被切出</span><br><span class="line">就像我们的系统进程，线程一样，对于上层开发者来说是无感知的，</span><br><span class="line">其实系统随时都在进行着切换</span><br></pre></td></tr></table></figure></p><p>协程恢复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个独立的函数栈因为在执行到一半的时候被调度出去了，那么在恢复的时候我们要能够让cpu继续执行在让出时的那条指令。</span><br><span class="line">从而达到该暂停的函数能够继续向下执行，在执行完毕的时候要能够返回到我们正常的流程这里</span><br></pre></td></tr></table></figure></p><p>具体协程的底层实现和流程我们会单独拿一个文章来说</p><p>swoole目前的协程是能够进行随意的切出和让出的，但是我想标注的点在于切出和让出的点应该有调度器来完全完成，而swoole目前是需要开发者具备协程的切出和恢复时机的</p><p>接下来讲讲swoole协程调度的点，swoole目前主要有两种实现来切换让出协程</p><ol><li>Hook php原生函数</li><li>swoole相关api都加入检查是否需要切出</li></ol><h3 id="Hook-php原生函数"><a href="#Hook-php原生函数" class="headerlink" title="Hook php原生函数"></a>Hook php原生函数</h3><p>在讲讲hook前，我们先说一下php函数的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php在脚本初始化阶段会初始化所有模块，并将对应模块函数 zend_function* 和php内置的函数存入一个全局EG(function_table)中，这个是一个hash表。</span><br><span class="line">其实就是php里的数组底层的实现，然后key就是对应的php内置的函数名</span><br><span class="line"></span><br><span class="line">那么能够想到value就是该函数的实际地址或者opcode汇编指令，这里不细说，因为php函数有好几种类型。</span><br><span class="line">普通的c动态库扩展的函数就是一个函数指针指向扩展里的实际函数地址，而php内部函数比如用户自定义的函数可能就是一份编译过后的opcode码指令</span><br><span class="line"></span><br><span class="line">在函数调用前(针对内置函数 比如sleep)，会先去全局EG(function_table)-&gt;zend_hash_index(sleep) </span><br><span class="line">查找是否存在，如果存在则获取对应的value，并设置对应的php函数栈帧信息，并执行</span><br></pre></td></tr></table></figure></p><p>所以这里所说的hook，我们就可以理解为，在我们的php扩展里将全局函数替换为自己的自定函数，当用户执行sleep时<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">10000</span>);<span class="comment">//实际被替换为协程版的sleep实现</span></span><br><span class="line">&#125;</span><br><span class="line">go(co);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------</span></span><br><span class="line">demo.sleep.c</span><br><span class="line">EG(function_table)-&gt;zend_hash_update_ptr(<span class="string">"sleep"</span>,co_sleep);</span><br><span class="line"></span><br><span class="line">void co_sleep(long sec)</span><br><span class="line">&#123;</span><br><span class="line">    timer.add(_g,sec);</span><br><span class="line">    _g.swap_out();</span><br><span class="line">&#125;</span><br><span class="line">void timer_loop()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    int n = epoll_wait(epfd,events,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(....)&#123;</span><br><span class="line">        g = events[i];</span><br><span class="line">        <span class="comment">//在timer定时器中在执行恢复该协程</span></span><br><span class="line">        g.swap_out()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际执行的是一个协程切换的方法，并且将当前协程加入 timer中，等待epoll时间片到期后恢复</p><h3 id="在api中埋点监测协程"><a href="#在api中埋点监测协程" class="headerlink" title="在api中埋点监测协程"></a>在api中埋点监测协程</h3><p>这个容易想到，在swoole的新增api中，都会监测是否需要切入或者恢复，例如调用swoole协程客户端<code>send</code>，因为该tcp端点属性被设置为边缘模式，也就是如果没有就绪事件则不阻塞进程，而是直接返回EAGAIN，那么此时swoole就会将该G加入到epoll_add中管理，等待事件到来后 在恢复该执行</p><h2 id="什么是栈复用"><a href="#什么是栈复用" class="headerlink" title="什么是栈复用"></a>什么是栈复用</h2><p>一个协程的准备环境是需要申请两次大内存，一个是php栈，一个是c栈，来看看什么是函数栈，来着曹大的图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">                         +--------------+</span><br><span class="line">                         |              |</span><br><span class="line">                    +    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |   arg(N-1)   |  starts from 7&apos;th argument for x86_64</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |     argN     |</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |Return address|  %rbp + 8</span><br><span class="line">Stack grows down    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |     %rbp     |  Frame base pointer</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    |  local var1  |  %rbp - 8</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    +--------------+</span><br><span class="line">                    |    |              |</span><br><span class="line">                    |    | local var 2  | &lt;-- %rsp</span><br><span class="line">                    |    |              |</span><br><span class="line">                    v    +--------------+</span><br><span class="line">                         |              |</span><br><span class="line">                         |              |</span><br><span class="line">                         +--------------+</span><br></pre></td></tr></table></figure></p><p>首先受限于寄存器数量的原因，大多数变量都是存储在在栈中，每次新调用一个函数，那么就会保存当前上下文变量到栈中，最后将当前指令地址 <code>cs,ip</code>(就是函数的返回地址)压栈，然后在jump到目的指令地址实现函数调用，新函数栈会在系统栈<code>下面继续使用</code>，不断从高地址往低地址增长，如果函数返回则低地址往高地址增长<code>出栈</code>。所以这就是为什么栈上的变量在函数退出后不能再使用了的原因(虽然变量不会被立即销毁，但是如果发生其他函数调用，则会复用该地址的数据，这样就会导致非法内存访问，发生难以排查的致命bug)</p><p>上面的图加上粗略的描述了函数栈后来讲讲为什么要用堆模拟栈：</p><p>协程也是一个函数，那为什么要另外申请一个堆内存来当做该函数的执行栈呢，而不用本身系统为当前进程分配的栈呢，正如上面讲的当前栈在函数退出后，会被其他函数栈给覆盖，那么当前函数的所有上下文和变量都变成了未知内存</p><p>所以想要支持协程函数的切换和恢复，那么肯定是需要一直保存该函数栈的上下文信息的，所以只能用堆内存来当做栈使用</p><p>让我们继续回到swoole栈复用的问题，因为每次协程创建都会申请8kphp栈和2mc栈，且协程释放后会销毁该内存，所有目前swoole会存在这种频繁申请和释放的浪费情况，因为swooole是进程模型所以协程是同步的，所以就算创建千万协程也是同步排队执行，不会导致内存飙升</p><h2 id="为什么是无栈内存收缩"><a href="#为什么是无栈内存收缩" class="headerlink" title="为什么是无栈内存收缩"></a>为什么是无栈内存收缩</h2><p>上面降了函数栈的模型，我们知道在函数内所有产生的栈变量都会压栈，不断的使用栈空间，但是这个栈是系统分配的栈空间，默认是可以<code>达到进程上限</code>的</p><p>而我们要实现的协程是申请的一份堆内存来模拟的栈，所以大小一开始就固定好的且不会太大，当我们在协程内做了大量操作栈溢出后，就会<code>触发堆溢出</code>引发致命问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">高地址位 堆内存的末尾位置</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  返回值g   │</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  返回值f   │</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  返回值e   │</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  参数之c   │</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  参数之b   │</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │  参数之a   │     &lt;-- FP</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                │    PC     │     &lt;-- SP</span><br><span class="line">                ┼───────────┼</span><br><span class="line">                |。。。。。 |</span><br><span class="line">                </span><br><span class="line">低地址位  堆内存的起始位置</span><br></pre></td></tr></table></figure></p><p>swoole貌似目前在协程里跑大的数组进行遍历就会导致栈溢出，这就需要开发者在开发中小心这类问题</p><p>这就是无栈收缩会导致的问题，如果栈能够自动收缩，就无需考虑协程<code>预分配大小</code>,<code>栈溢出</code>等问题，既能节省内存也能是开发效率高效</p><h2 id="为什么无抢占调度"><a href="#为什么无抢占调度" class="headerlink" title="为什么无抢占调度"></a>为什么无抢占调度</h2><p>何谓抢占调度，就是强制的被动触发的调度。在正常情况下发生调度都依赖于函数执行流遇到了阻塞或是主动让出才会触发切换。那抢占的意义又是什么呢,想象一下如下场景在swoole中使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">go(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">      <span class="comment">//do sth</span></span><br><span class="line">      <span class="comment">//then break</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ol><li><p>如果上面的没有发生死循环，始终会等到某个条件中断该循环，那么依然会存在如下问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果该协程是在网络触发事件中被恢复的协程，那么自然能想到如下的情景</span><br><span class="line">for(;;)&#123;</span><br><span class="line">    epoll_wait(...)</span><br><span class="line">    </span><br><span class="line">    //co-&gt;resume()</span><br><span class="line">&#125;</span><br><span class="line">那么如果这时候上面那个协程执行的时间过长，都会直接影响其他流程的精度，比如timer是挂在epoll上触发的，那么定时器就会一直得不到执行，且网络事件也得不到执行</span><br><span class="line"></span><br><span class="line">这时候就会有其他意外产生</span><br></pre></td></tr></table></figure></li><li><p>如果上面的协程发生死循环，永远不会中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在目前没有抢占调度的情况下，自然阻塞当前进程，任何其他都得不到执行，基本就是死锁的样子了</span><br></pre></td></tr></table></figure></li></ol><p>这个时候就知道了抢占调度的意义了，监测每个协程的执行时间，严格控制时间，发生超时则调度该协程切出，这都是一个完整的协程调度器需要考虑的事情</p><h1 id="golang的调度"><a href="#golang的调度" class="headerlink" title="golang的调度"></a>golang的调度</h1><p>golang 的调度就非常完整了，golang走的单进程多线程协程实现并发控制，swoole基于多进程同步协程实现并发控制，各有优缺点，我认为最大的区别就是</p><p>对于技术实现来说：</p><blockquote><p>golang的多线程协程对于实现者来说非常复杂，而swoole的多进程同步协程对于实现者来说要相对友好，反正基于线程的实现都是异常恐怖的</p></blockquote><p>对于技术使用者来说:</p><blockquote><p>多线程的协程当然用起来要高效简单很多，无需关心进程通信等，而多进程对于开发者来说就稍微不友好一点</p></blockquote><p>golang的协程和swoole比起来当然是完全不同的，golang走的多线程协程，所以几乎上面的特性都支持例如:</p><ol><li>多线程调度</li><li>任务窃取器调度</li><li>抢占式调度</li><li>以及一些协程的优化:栈内存自动收缩</li><li>还有超多的协程生态工具链:lock,channel..等等</li></ol><h1 id="简要总结"><a href="#简要总结" class="headerlink" title="简要总结"></a>简要总结</h1><p>上面的协程方面的设计确实还是和golang相差较大，swoole本身走的是多进程路线，同步协程只是为它在加了一份力，所以硬要和golang完整的单进程多线程协程比是没意义的</p><p>所以GOOS由此而来，想为php生效一个多线程协程版调度，从而使php既能保持动态语言编写代码的高效又能实现golang等静态语言的高性能并发控制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Goos 是一个借鉴Golang的多线程协程调度器的设计而利用C++实现的PHP扩展。笔者在接触golang的协程调度器的力量后不能自拔，感
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="goos" scheme="http://wiki.brewlin.com/categories/blog/goos/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="coroutine" scheme="http://wiki.brewlin.com/tags/coroutine/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/tags/thread/"/>
    
      <category term="scheduler" scheme="http://wiki.brewlin.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>mini_ngx_实现四-event模块</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/4.mini_ngx_%E5%AE%9E%E7%8E%B0%E5%9B%9B-event%E6%A8%A1%E5%9D%97/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/4.mini_ngx_实现四-event模块/</id>
    <published>2020-04-18T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件模型概述"><a href="#事件模型概述" class="headerlink" title="事件模型概述"></a>事件模型概述</h1><p>主要分为两个方面事件收集器、事件分发器</p><h2 id="事件收集器"><a href="#事件收集器" class="headerlink" title="事件收集器"></a>事件收集器</h2><p>也就是向epoll添加、更新、删除等事件，让epoll事件去管理</p><ul><li>EPOLL_CTL_MOD</li><li>EPOLL_CTL_ADD</li><li>EPOLL_CTL_DEL<h2 id="事件分发器"><a href="#事件分发器" class="headerlink" title="事件分发器"></a>事件分发器</h2>实际是调用epoll_wait 收集内核通知的<code>就绪</code>事件，然后调用<code>ev-&gt;handler</code>执行用户自定义该事件的处理方法</li></ul><h1 id="ngx-事件初始化"><a href="#ngx-事件初始化" class="headerlink" title="ngx 事件初始化"></a>ngx 事件初始化</h1><p>事件的初始化实际就是对<code>epoll</code>进行初始化，如<code>epoll_create（）调用创建epollfd</code> <code>event_list事件列表内存申请</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cycle-&gt;modules[m]-&gt;type != EVENT_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cycle-&gt;modules[m]-&gt;ctx_index != ecf-&gt;use) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;actions.init(cycle, timer_resolution) != OK) &#123;</span><br><span class="line">            <span class="comment">/* fatal */</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>这里是event核心模块被<code>cycle_init（）</code>主函数进行<code>init_process()</code>初始化时调用的函数，在上一节有说明，该函数是对<code>连接池</code> ,<code>读事件</code> ,<code>写事件</code>等进行内存申请初始化，串联成链表</p><p>这里也是其中的工作之一，因为nginx高度可扩展，所以<code>event</code>实际的系统实现有很多种<code>epoll,kqueue,pool,select..</code>等，在<code>./configure</code>时会进行环境检查，将兼容平台的实现，如<code>epoll_module.c</code>加入到<code>cycle-&gt;modules[m]</code>中，所以上面的循环就是找出如<code>epoll</code>的实现并去调用该初始化方法，准备好接受事件</p><h2 id="全局epoll接口"><a href="#全局epoll接口" class="headerlink" title="全局epoll接口"></a>全局epoll接口</h2><p>加入平台的event实现为<code>epoll</code>则会调用epoll_moudle.c 的初始化方法，将相关的接口添加到 <code>event_actions</code>全局变量上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//src/event/module/epoll_module.c:369</span><br><span class="line">static event_module_t  epoll_module_ctx = &#123;</span><br><span class="line">    &amp;epoll_name,</span><br><span class="line">    epoll_create_conf,               /* create configuration */</span><br><span class="line">    epoll_init_conf,                 /* init configuration */</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        epoll_add_event,             /* add an event */</span><br><span class="line">        epoll_del_event,             /* delete an event */</span><br><span class="line">        epoll_add_event,             /* enable an event */</span><br><span class="line">        epoll_del_event,             /* disable an event */</span><br><span class="line">        epoll_add_connection,        /* add an connection */</span><br><span class="line">        epoll_del_connection,        /* delete an connection */</span><br><span class="line"></span><br><span class="line">        epoll_process_events,        /* process the events */</span><br><span class="line">        epoll_init,                  /* init the events */</span><br><span class="line">        epoll_done,                  /* done the events */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event_actions = epoll_module_ctx.actions;</span><br></pre></td></tr></table></figure></p><p>也就是将epoll的<code>add,del,add_con,del_con,epoll_process_events</code>等接口条件到全局<code>actions</code>上，提供外部访问，收集外部事件，并分发就绪事件</p><h1 id="事件相关api"><a href="#事件相关api" class="headerlink" title="事件相关api"></a>事件相关api</h1><p>下面统一接口的实现假定为epoll实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    int_t  (*add)(event_t *ev, int_t event, uint_t flags);</span><br><span class="line">    int_t  (*del)(event_t *ev, int_t event, uint_t flags);</span><br><span class="line"></span><br><span class="line">    int_t  (*enable)(event_t *ev, int_t event, uint_t flags);</span><br><span class="line">    int_t  (*disable)(event_t *ev, int_t event, uint_t flags);</span><br><span class="line"></span><br><span class="line">    int_t  (*add_conn)(connection_t *c);</span><br><span class="line">    int_t  (*del_conn)(connection_t *c, uint_t flags);</span><br><span class="line"></span><br><span class="line">    int_t  (*notify)(event_handler_pt handler);</span><br><span class="line"></span><br><span class="line">    int_t  (*process_events)(cycle_t *cycle, msec_t timer,</span><br><span class="line">                                 uint_t flags);</span><br><span class="line"></span><br><span class="line">    int_t  (*init)(cycle_t *cycle, msec_t timer);</span><br><span class="line">    void       (*done)(cycle_t *cycle);</span><br><span class="line">&#125; event_actions_t;</span><br><span class="line"></span><br><span class="line">event_actions_t   event_actions;</span><br></pre></td></tr></table></figure></p><p>在event.c 中会定义全局变量<code>event_actions</code>，改变量对应的平台实现的相关事件接口，如上文初始化时，如果平台支持<code>epoll</code>则将<code>epoll</code>事件的相关api添加到全局变量<code>event_actions</code>中，提供外部调用注册事件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> process_events   event_actions.process_events</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> done_events      event_actions.done</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add_event        event_actions.add</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> del_event        event_actions.del</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add_conn         event_actions.add_conn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> del_conn         event_actions.del_conn</span></span><br></pre></td></tr></table></figure><p>并且默认提供了相关宏定义，直接通过宏定义更加方便些</p><h2 id="add-event-注册事件"><a href="#add-event-注册事件" class="headerlink" title="@add_event 注册事件"></a>@add_event 注册事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_add_event(<span class="keyword">event_t</span> *ev, <span class="keyword">int_t</span> event, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>                  op;</span><br><span class="line">    <span class="keyword">uint32_t</span>             events, prev;</span><br><span class="line">    <span class="keyword">event_t</span>         *e;</span><br><span class="line">    <span class="keyword">connection_t</span>    *c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>   <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    c = ev-&gt;data;</span><br><span class="line"></span><br><span class="line">    events = (<span class="keyword">uint32_t</span>) event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event == READ_EVENT) &#123;</span><br><span class="line">        e = c-&gt;write;</span><br><span class="line">        prev = EPOLLOUT;</span><br><span class="line">        events = EPOLLIN;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        e = c-&gt;read;</span><br><span class="line">        prev = EPOLLIN;</span><br><span class="line">        events = EPOLLOUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e-&gt;active) &#123;</span><br><span class="line">        op = EPOLL_CTL_MOD;</span><br><span class="line">        events |= prev;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        op = EPOLL_CTL_ADD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ee.events = events | (<span class="keyword">uint32_t</span>) flags;</span><br><span class="line">    ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | ev-&gt;instance);</span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add event %d "</span>,c-&gt;fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl %d failed\n"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ev-&gt;active = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是新增还是修改，<code>e-&gt;active</code>如果为1，说明之前注册过该事件，需要走更改事件流程<code>epoll_ctl_mod</code></p><p>例如http流程中假如需要等待客户端发送<code>body</code>才能进行下面的操作，那么就可以将该http的读事件通过这个接口注册到<code>epoll</code>中</p><p>当客户端发送了数据，内核收到的数据后分发该就绪事件，将内核数据拷贝到用户态空间调用<code>ev-&gt;handler()</code>回调函数继续执行上一次中断的函数</p><h2 id="del-event-删除事件"><a href="#del-event-删除事件" class="headerlink" title="@del_event 删除事件"></a>@del_event 删除事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_del_event(<span class="keyword">event_t</span> *ev, <span class="keyword">int_t</span> event, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">.......</span><br><span class="line">    <span class="keyword">if</span> (e-&gt;active) &#123;</span><br><span class="line">        op = EPOLL_CTL_MOD;</span><br><span class="line">        ee.events = prev | (<span class="keyword">uint32_t</span>) flags;</span><br><span class="line">        ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | ev-&gt;instance);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        op = EPOLL_CTL_DEL;</span><br><span class="line">        ee.events = <span class="number">0</span>;</span><br><span class="line">        ee.data.ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl %d"</span>,c-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl :%d failed"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ev-&gt;active = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样当http请求生命周期结束，也就是<code>http 引用计数count</code>真正为0的时候，会触发<code>event_del,pool_destory,socket_close..</code>等进行事件删除，内存池回收，tcp关闭等一系列回收机制</p><p>event事件删除后，epoll不在负责相关事件监控</p><h2 id="add-conn-注册连接事件"><a href="#add-conn-注册连接事件" class="headerlink" title="@add_conn 注册连接事件"></a>@add_conn 注册连接事件</h2><p>该方法更加方便，直接将<code>connection_t</code>连接注册到epoll中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_add_connection(<span class="keyword">connection_t</span> *c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>  <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    ee.events = EPOLLIN|EPOLLOUT|EPOLLET;</span><br><span class="line">    ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | c-&gt;read-&gt;instance);</span><br><span class="line"></span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add connection fd:%d"</span>,c-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, EPOLL_CTL_ADD, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add connection fd:%d failed"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;read-&gt;active = <span class="number">1</span>;</span><br><span class="line">    c-&gt;write-&gt;active = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接调用epoll_ctl()将该事件添加到epoll_ctl中</p><h2 id="del-conn-删除事件"><a href="#del-conn-删除事件" class="headerlink" title="@del_conn 删除事件"></a>@del_conn 删除事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_del_connection(<span class="keyword">connection_t</span> *c, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>                 op;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>  <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CLOSE_EVENT) &#123;</span><br><span class="line">        c-&gt;read-&gt;active = <span class="number">0</span>;</span><br><span class="line">        c-&gt;write-&gt;active = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line">    op = EPOLL_CTL_DEL;</span><br><span class="line">    ee.events = <span class="number">0</span>;</span><br><span class="line">    ee.data.ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"del connection failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;read-&gt;active = <span class="number">0</span>;</span><br><span class="line">    c-&gt;write-&gt;active = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接del移除该事件即可</p><h1 id="process-events-事件分发"><a href="#process-events-事件分发" class="headerlink" title="@process_events 事件分发"></a>@process_events 事件分发</h1><p>nginx是所有的事件执行都来自事件循环监测事件并发事件执行,该函数在nginx<code>woker</code>进程启动后作为<code>while(1){}</code>循环事件调用,<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_process_events(<span class="keyword">cycle_t</span> *cycle, <span class="keyword">msec_t</span> timer, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事件分发主要分为如下重要部分</p><ol><li><p>调用<code>epoll_wait</code>监测就绪事件，如tcp连接，数据读写，tcp关闭。。。等等就绪事件,events为就绪事件的总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">events = epoll_wait(ep, event_list, (int) nevents, timer);</span><br></pre></td></tr></table></figure></li><li><p>分发所有就绪事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    for (i = 0; i &lt; events; i++) &#123;</span><br><span class="line">        c = event_list[i].data.ptr;</span><br><span class="line"></span><br><span class="line">        instance = (uintptr_t) c &amp; 1;</span><br><span class="line">        c = (connection_t *) ((uintptr_t) c &amp; (uintptr_t) ~1);</span><br><span class="line"></span><br><span class="line">        rev = c-&gt;read;</span><br><span class="line">        //判断该连接是否已经失效，因为如果在执行之前的连接事件的时候将当前连接关闭了，单该连接又被新连接给复用了，这就需要instance来解决了，closed无法解决新连接将之前连接复用的例外</span><br><span class="line">        if (c-&gt;fd == -1 || rev-&gt;instance != instance) &#123;</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * the stale event from a file descriptor</span><br><span class="line">             * that was just closed in this iteration</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line">            log_debug1(LOG_DEBUG_EVENT, cycle-&gt;log, 0,</span><br><span class="line">                           &quot;epoll: stale event %p&quot;, c);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        取出事件</span><br><span class="line">        revents = event_list[i].events;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里比较重要，nginx是基于事件来执行的，如果其中任何一个事件阻塞了，将会导致整个进程得不到处理任何任务，例如新连接<code>accept</code>可能需要优先执行，而普通收发数据可能需要放到延迟队列去执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flags &amp; POST_EVENTS) &#123;</span><br><span class="line">    post_event(wev, &amp;posted_events);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wev-&gt;handler(wev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件模型概述&quot;&gt;&lt;a href=&quot;#事件模型概述&quot; class=&quot;headerlink&quot; title=&quot;事件模型概述&quot;&gt;&lt;/a&gt;事件模型概述&lt;/h1&gt;&lt;p&gt;主要分为两个方面事件收集器、事件分发器&lt;/p&gt;
&lt;h2 id=&quot;事件收集器&quot;&gt;&lt;a href=&quot;#事件收集器
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
      <category term="mini_ngx" scheme="http://wiki.brewlin.com/categories/blog/nginx/mini-ngx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mini_ngx_实现三-http模块</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/3.mini_ngx_%E5%AE%9E%E7%8E%B0%E4%B8%89-http%E6%A8%A1%E5%9D%97/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/3.mini_ngx_实现三-http模块/</id>
    <published>2020-04-17T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-process-init-主要启动函数"><a href="#http-process-init-主要启动函数" class="headerlink" title="@http_process_init 主要启动函数"></a>@http_process_init 主要启动函数</h1><p>上面cycle初始化的时候<code>start_module</code>启动的就是当前http入口模块函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里其实应该是核心http模块的启动，主要是启动监听端口</span></span><br><span class="line"><span class="comment">//但是端口配置添加 listening_t 在nginx中是通过nginx.conf配置解析时添加的</span></span><br><span class="line"><span class="comment">//我们这里作为演示就直接放到http core模块启动方法中</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int_t</span> <span class="title">http_process_init</span><span class="params">(<span class="keyword">cycle_t</span> *cycle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log_info(cycle-&gt;<span class="built_in">log</span>,<span class="string">"http: process init"</span>);</span><br><span class="line">    <span class="keyword">http_listen_opt_t</span>   lsopt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span>   </span><br><span class="line">    memzero(&amp;lsopt, <span class="keyword">sizeof</span>(<span class="keyword">http_listen_opt_t</span>));</span><br><span class="line">    memzero(&amp;serv_addr,<span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="comment">// listen 127.0.0.1:8000;</span></span><br><span class="line">    <span class="comment">// listen 127.0.0.1 不加端口，默认监听80端口;</span></span><br><span class="line">    <span class="comment">// listen 8000</span></span><br><span class="line">    <span class="comment">// listen *:8000</span></span><br><span class="line">    <span class="comment">// listen localhost:8000</span></span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    serv_addr.sin_port = htons(<span class="number">8089</span>);</span><br><span class="line"></span><br><span class="line">    lsopt.sockaddr = (struct sockaddr *)&amp;serv_addr;</span><br><span class="line">    lsopt.socklen = <span class="keyword">sizeof</span>(serv_addr);</span><br><span class="line"></span><br><span class="line">    lsopt.backlog = BACKLOG;</span><br><span class="line">    lsopt.rcvbuf = <span class="number">-1</span>;</span><br><span class="line">    lsopt.sndbuf = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">listening_t</span>           *ls;</span><br><span class="line">    ls = http_add_listening(cycle, &amp;lsopt);</span><br><span class="line">    <span class="keyword">if</span> (ls == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化对应socket</span></span><br><span class="line">    <span class="keyword">return</span> open_listening_sockets(cycle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之前有讲过，nginx会在启动期间<code>init_cycle</code>会去解析nginx.conf配置并且将所有匹配的配置项传递给对应的模块，其实就是寻找<code>ngx_command_t</code>定义的模块配置项，可以看模块开发文章相关介绍:<a href="http://wiki.brewlin.com/wiki/blog/nginx/http_%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%9A%84%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%B8%80%EF%BC%89/">http://wiki.brewlin.com/wiki/blog/nginx/http_%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%9A%84%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%B8%80%EF%BC%89/</a></p><p>那么当发现一个<code>listen 80;</code>配置后就会立即调用如上方法，新增初始化一个<code>listening_t</code>对象保存到<code>cycle-&gt;listening</code>上用于后面监听对应端口</p><p>我们这里也模仿对应的事件，因为不是配置行为，所以在这里手动添加了一个端口，模仿解析到了配置<code>listen</code></p><h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h1><h2 id="handler-处理新连接事件"><a href="#handler-处理新连接事件" class="headerlink" title="@handler 处理新连接事件"></a>@handler 处理新连接事件</h2><p>每个监听对象上面都会有一个<code>listening-&gt;handler</code>回调事件，每个模块都会去重写他，那么在http模块中为 <code>http_init_connection</code>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/http/http.c:<span class="number">71</span></span><br><span class="line"></span><br><span class="line">ls-&gt;handler = http_init_connection;</span><br></pre></td></tr></table></figure></p><p>该方法在event事件监测到该端口有新连接到来时，会立即<code>accept</code>然后调用但当前<code>http_init_connection</code>方法表明接下来都会进行http相关操作</p><p>这种方法很好的解耦操作，不同协议之间只需要替换handler就可替换不同的实现</p><h2 id="http-init-connection-初始化http请求"><a href="#http-init-connection-初始化http请求" class="headerlink" title="@http_init_connection 初始化http请求"></a>@http_init_connection 初始化http请求</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">http_init_connection</span><span class="params">(<span class="keyword">connection_t</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">event_t</span>         *rev;</span><br><span class="line">    rev = c-&gt;read;</span><br><span class="line">    rev-&gt;handler = http_init_request;</span><br><span class="line">    c-&gt;write-&gt;handler = http_empty_handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rev-&gt;ready) &#123;</span><br><span class="line">        rev-&gt;handler(rev);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handle_read_event(rev, <span class="number">0</span>) != OK) &#123;</span><br><span class="line">        http_close_connection(c);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将该新的http连接的read事件取出来，判断是否已标示为可读状态</li><li>如果当前事件已就绪，则直接执行对应的handler也就是<code>http_init_request</code></li><li>如果不是的话，就将该事件在放回到<code>epoll</code>中，等待下次事件就绪，在从连接中拿出来继续处理上次中断的地方</li></ol><h2 id="http-init-request-解析http协议"><a href="#http-init-request-解析http协议" class="headerlink" title="@http_init_request 解析http协议"></a>@http_init_request 解析http协议</h2><p>走到这里，说明tcp连接以就绪，客户端已发送了http数据包，准备解析，如果没有则如上面一样继续丢到<code>epoll</code>中继续监听，直到http协议数据包就绪<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">http_init_request</span><span class="params">(<span class="keyword">event_t</span> *rev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">connection_t</span>           *c;</span><br><span class="line">    http_connection         *hc;</span><br><span class="line">    c = rev-&gt;data;</span><br><span class="line">    hc = c-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (hc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        hc = pcalloc(c-&gt;pool, <span class="keyword">sizeof</span>(http_connection));</span><br><span class="line">        <span class="keyword">if</span> (hc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            http_close_connection(c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c-&gt;data = hc;</span><br><span class="line">    hc-&gt;connection = c;</span><br><span class="line">    hc-&gt;<span class="built_in">log</span> = c-&gt;<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line">    connection_init(hc);</span><br><span class="line">    rev-&gt;handler = connection_handler;</span><br><span class="line">    <span class="comment">// connection_handler(hc);</span></span><br><span class="line">    <span class="comment">// connection_close(hc);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// http_close_connection(c);</span></span><br><span class="line">    rev-&gt;handler(rev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>分配一个<code>http_connection_t</code> http请求对象并挂载到connection中</li><li>将事件handler置为<code>connection_handler</code>以后事件触发默认就走<code>connection_handler</code></li><li>直接执行对应事件 <code>rev-&gt;handler(rev)</code> </li></ol><p>我们这里没有关闭连接，而是一气呵成在<code>connection_handler</code>去关闭他，而真实nginx处理的时候要复杂的多。 因为现在是全部基于事件来处理对应流程，所以每个函数可能会多次调用，那么释放的问题就变的头疼，所以nginx真正对于http_request的释放是增加了<code>引用计数</code>的机制，也就是每个事件都负责<code>引用计数+1</code>当该函数执行完毕<code>-1</code>并且判断是否为0，为0则真正释放连接，不为0说明有其他事件被派生出来了，所以每个事件只需要关注当前自己的<code>session即可</code></p><p>而我们的程序只有单一流程，所以不需要做引用计数，只需要读取本地html文件，响应客户端，然后在<code>connection_handler</code>中关闭连接释放资源即可</p><h1 id="http核心处理函数"><a href="#http核心处理函数" class="headerlink" title="http核心处理函数"></a>http核心处理函数</h1><p>上面说了，nginx一个请求的处理可能涉及到<code>数十个`</code>子模块<code>和</code>子过程`所以在哪里释放就是一个重要的问题，nginx用引用计数来解决了这个问题，而我们的mini版只涉及一个流程，所以不用引用计数来实现</p><p>直接在当前函数处理请求、响应请求、关闭请求、释放资源即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * HTTP请求处理函数</span></span><br><span class="line"><span class="comment"> * - 从socket中读取数据并解析HTTP请求</span></span><br><span class="line"><span class="comment"> * - 解析请求</span></span><br><span class="line"><span class="comment"> * - 发送响应</span></span><br><span class="line"><span class="comment"> * - 记录请求日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// int connection_handler(http_connection *con) &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connection_handler</span><span class="params">(<span class="keyword">event_t</span> *ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">connection_t</span> *sock = (<span class="keyword">connection_t</span> *)ev-&gt;data;</span><br><span class="line">    http_connection *con = sock-&gt;data;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">int</span> nbytes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((nbytes =  sock-&gt;recv(sock,(u_char*)buf,<span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        string_append_len(con-&gt;recv_buf, buf, nbytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (http_request_complete(con) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nbytes == <span class="number">0</span>) &#123;</span><br><span class="line">            log_info(con-&gt;<span class="built_in">log</span>, <span class="string">"socket %d closed"</span>, sock-&gt;fd);</span><br><span class="line">            http_close_connection(sock);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nbytes == AGAIN) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handle_read_event(ev, <span class="number">0</span>) != OK) &#123;</span><br><span class="line">                http_close_connection(sock);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log_error(con-&gt;<span class="built_in">log</span>, <span class="string">"read: %s"</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    http_request_parse(con); </span><br><span class="line">    http_response_send(con);</span><br><span class="line">    log_request(con);</span><br><span class="line">    http_close_connection(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>当我们调用<code>sock-&gt;recv</code>的时候，可能会返回<code>AGAIN</code>,说明该连接可能没有数据可读，我们只需要再次加入<code>epoll</code>监听即可，</li><li>当<code>sock-&gt;recv</code>返回0 ，说明对方主动关闭，我们也只需要关闭资源，释放连接即可</li><li>其他情况，我们只需要读出用户态缓冲区数据，解析http协议，处理请求，并释放资源就可以了</li><li><code>http_request_parse</code>： 解析http请求</li><li><code>http_response_send</code>:  响应客户端数据</li><li><code>log_request(con)</code>  :  记录请求日志</li><li><code>http_close_connection</code> ： 回收资源、连接等</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-process-init-主要启动函数&quot;&gt;&lt;a href=&quot;#http-process-init-主要启动函数&quot; class=&quot;headerlink&quot; title=&quot;@http_process_init 主要启动函数&quot;&gt;&lt;/a&gt;@http_process
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
      <category term="mini_ngx" scheme="http://wiki.brewlin.com/categories/blog/nginx/mini-ngx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mini_ngx_实现二-core模块</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/2.mini_ngx_%E5%AE%9E%E7%8E%B0%E4%BA%8C-core%E6%A8%A1%E5%9D%97/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/2.mini_ngx_实现二-core模块/</id>
    <published>2020-04-16T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="main启动函数"><a href="#main启动函数" class="headerlink" title="main启动函数"></a>main启动函数</h1><p>主要调用init_cycle() 进入框架事件循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cycle_t * cycle = init_cycle();</span><br><span class="line">    //程序结束 回收内存池内存    </span><br><span class="line">    if(cycle-&gt;pool)&#123;</span><br><span class="line">        destroy_pool(cycle-&gt;pool);</span><br><span class="line">    &#125;</span><br><span class="line">    if(cycle-&gt;connections)&#123;</span><br><span class="line">        free(cycle-&gt;connections);</span><br><span class="line">    &#125;</span><br><span class="line">    if(cycle-&gt;read_events)&#123;</span><br><span class="line">        free(cycle-&gt;read_events);</span><br><span class="line">    &#125;</span><br><span class="line">    if(cycle-&gt;write_events)&#123;</span><br><span class="line">        free(cycle-&gt;write_events);</span><br><span class="line">    &#125;</span><br><span class="line">    free(cycle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当返回时，说明程序已经结束，剩下的只需要销毁内存池，连接池，读写事件内存即可</p><h1 id="cycle-相关函数"><a href="#cycle-相关函数" class="headerlink" title="cycle 相关函数"></a>cycle 相关函数</h1><h2 id="init-cycle-主循环函数"><a href="#init-cycle-主循环函数" class="headerlink" title="@init_cycle 主循环函数"></a>@init_cycle 主循环函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cycle_t* init_cycle()&#123;</span><br><span class="line">    //初始化全局结构体</span><br><span class="line">    cycle_t* cycle = init();</span><br><span class="line"></span><br><span class="line">    //初始化模块</span><br><span class="line">    init_module(cycle);</span><br><span class="line"></span><br><span class="line">    //启动模块</span><br><span class="line">    if(start_module(cycle) != OK)&#123;</span><br><span class="line">        return cycle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //epoll wait 分发事件</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        if(process_events(cycle,event_flags) == ERROR)&#123;</span><br><span class="line">            goto end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">end:</span><br><span class="line">    close_listening_sockets(cycle);</span><br><span class="line">    </span><br><span class="line">    return cycle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>初始化cycle结构体： 如nginx那样做一些初始工作，分配内存池，初始化监听socket列表、打开日志文件，判断是否需要守护进程，注意：nginx都是基于配置来做的，但是我们省去了配置相关流程，直接手动在代码里面配置</li><li>初始化模块： 如nginx一样，变量全局模块数组，执行所有的模块初始化工作</li><li>启动模块： 调用每个模块<code>init_process</code>方法，例如http则启动监听socket初始化，event则初始化连接池，创建epoll等等</li><li>事件循环：接下来则是事件循环，调用event等待事件就绪，注意nginx的实现是有定时器的，我们这里为了跑通主流程，将定时器省去</li></ol><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cycle_t</span> *GCYCLE;</span><br><span class="line"><span class="keyword">module_t</span>* modules[] = &#123;</span><br><span class="line">    &amp;http_core_module,</span><br><span class="line">    &amp;event_core_module,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>如nginx一样 有一个全局cycle</li><li>modules 保存了所有模块的地址，也就掌握了程序的核心启动入口，nginx所有的功能都是以单独的模块<code>module_t</code>来进行扩充的，而且模块之前还有启动顺序</li></ol><h2 id="init-初始化cycle"><a href="#init-初始化cycle" class="headerlink" title="@init 初始化cycle"></a>@init 初始化cycle</h2><ol><li>申请内存池，默认1024字节，不够会单独扩充，注意需要先调用<code>getpagesize()</code>获取内核内存分页大小初始化全局pagesize变量</li><li>有了内存池后，其他所有内存申请都走内存池管理</li><li>打开日志文件</li><li>判断是否需要守护进程，这里在nginx中依然是通过解析配置来对应设置相关参数的，我们这里直接设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//创建初始化cycle 全局结构体</span><br><span class="line">static cycle_t * init()</span><br><span class="line">&#123;</span><br><span class="line">    pagesize = getpagesize();</span><br><span class="line">    cycle_t * cycle = (cycle_t*) malloc(sizeof(cycle_t));</span><br><span class="line">    memzero(cycle,sizeof(cycle_t));</span><br><span class="line">    cycle-&gt;pool = create_pool(1024);</span><br><span class="line">    cycle-&gt;pool-&gt;max = MAX_ALLOC_FROM_POOL;</span><br><span class="line">    GCYCLE = cycle;//global cycle</span><br><span class="line"></span><br><span class="line">    //初始化监听端口链表</span><br><span class="line">    if (array_init(&amp;cycle-&gt;listening, cycle-&gt;pool, 10,sizeof(listening_t)) != OK)&#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打开日志文件</span><br><span class="line">    cycle-&gt;log = palloc(cycle-&gt;pool,sizeof(log_t));</span><br><span class="line">    cycle-&gt;log-&gt;use_logfile = 1;</span><br><span class="line">    log_open(cycle-&gt;log, &quot;./run.log&quot;);</span><br><span class="line"></span><br><span class="line">    //开启守护进程</span><br><span class="line">    cycle-&gt;is_daemon = 0;</span><br><span class="line">    daemonize(cycle);</span><br><span class="line"></span><br><span class="line">    return cycle; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="init-module-初始化模块"><a href="#init-module-初始化模块" class="headerlink" title="@init_module 初始化模块"></a>@init_module 初始化模块</h2><p>这里在nginx中其实是非常复杂的，因为在编译之前环境检查的时候就已经构造好了模块数组，所以做了大量的工作，但是本质其实就是将所有模块都加入到全局模块数组中，在后面<code>cycle-&gt;init()</code>的时候统一初始化</p><p>我们这里省去了前面初始化工作，直接加入我们仅有的两个模块<code>http</code>,<code>event</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//模拟nginx模块注册流程</span><br><span class="line">static void init_module(cycle_t *cycle)</span><br><span class="line">&#123;</span><br><span class="line">    log_info(cycle-&gt;log,&quot;cycle: init module&quot;);</span><br><span class="line">    cycle-&gt;modules_n = 2;</span><br><span class="line">    cycle-&gt;modules = modules;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="start-module-启动模块"><a href="#start-module-启动模块" class="headerlink" title="@start_module 启动模块"></a>@start_module 启动模块</h2><p>如nginx一样，在cycle_init中初始化所有核心模块，非核心模块应该在核心模块启动后自己管理的，我们只有两个核心模块，像nginx那样变量数组，直接调用<code>init_process</code>即可</p><p>我们这里也是由顺序的，必须先启动http模块将所有socket资源先初始化，然后在启动event模块，因为在event模块中需要收集相关网络事件，如监听的端口等<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动模块</span></span><br><span class="line"><span class="function"><span class="keyword">int_t</span> <span class="title">start_module</span><span class="params">(<span class="keyword">cycle_t</span> *cycle)</span></span>&#123;</span><br><span class="line">    log_info(cycle-&gt;<span class="built_in">log</span>,<span class="string">"cycle: start module"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cycle-&gt;modules_n ; i++)&#123;</span><br><span class="line">        <span class="comment">//http 注册tcp监听端口</span></span><br><span class="line">        <span class="comment">//event 模块创建epoll  epoll_events</span></span><br><span class="line">        <span class="keyword">if</span>(cycle-&gt;modules[i]-&gt;init_process(cycle) != OK)&#123;</span><br><span class="line">            log_error(cycle-&gt;<span class="built_in">log</span>,<span class="string">"cycle: start module init process error"</span>);</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="connection-相关"><a href="#connection-相关" class="headerlink" title="connection 相关"></a>connection 相关</h1><p>封装了连接池相关代码，可以看 <a href="http://wiki.brewlin.com/wiki/blog/nginx/1.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%B8%80)/">http://wiki.brewlin.com/wiki/blog/nginx/1.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%B8%80)/</a></p><p><a href="http://wiki.brewlin.com/wiki/blog/nginx/2.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%BA%8C)/">http://wiki.brewlin.com/wiki/blog/nginx/2.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%BA%8C)/</a></p><h1 id="mem-pool-相关"><a href="#mem-pool-相关" class="headerlink" title="mem_pool 相关"></a>mem_pool 相关</h1><p>封装了内存池相关代码，可以看 <a href="http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/">http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/</a></p><h1 id="log-日志记录相关"><a href="#log-日志记录相关" class="headerlink" title="log 日志记录相关"></a>log 日志记录相关</h1><h2 id="log-open-日志打开"><a href="#log-open-日志打开" class="headerlink" title="@log_open 日志打开"></a>@log_open 日志打开</h2><p>这里可以看到，日志文件资源充分的利用了内存池机制，将资源类型自定义<code>handler</code>扔到内存池中，无需关心释放问题，在程序结束后销毁内存池时自动释放该文件资源</p><p>相关特性请看文章： <a href="http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/">http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 以append模式打开日志文件</span><br><span class="line">void log_open(log_t *log, const char *logfile) &#123;</span><br><span class="line">    if (log-&gt;use_logfile) &#123;</span><br><span class="line">        log-&gt;logfp = fopen(logfile, &quot;a&quot;);</span><br><span class="line"></span><br><span class="line">        if (!log-&gt;logfp) &#123;</span><br><span class="line">            perror(logfile);</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        //auto clean the file </span><br><span class="line">        pool_cleanup_t *cl = pool_cleanup_add(GCYCLE-&gt;pool,sizeof(log_t));</span><br><span class="line">        cl-&gt;handler = clean;</span><br><span class="line">        cl-&gt;data = log;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    openlog(&quot;weblog_t&quot;, LOG_NDELAY | LOG_PID, LOG_DAEMON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="log-request-记录日志请求"><a href="#log-request-记录日志请求" class="headerlink" title="@log_request 记录日志请求"></a>@log_request 记录日志请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 记录HTTP请求</span><br><span class="line">void log_request(http_connection *con) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="log-error-错误日志打印"><a href="#log-error-错误日志打印" class="headerlink" title="@log_error 错误日志打印"></a>@log_error 错误日志打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录出错信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log_error</span><span class="params">(<span class="keyword">log_t</span> *<span class="built_in">log</span>, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line"></span><br><span class="line">    va_start(ap, format);</span><br><span class="line">    log_write(<span class="built_in">log</span>, <span class="string">"error"</span>, format, ap);</span><br><span class="line">    va_end(ap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="log-info-普通日志记录信息"><a href="#log-info-普通日志记录信息" class="headerlink" title="@log_info 普通日志记录信息"></a>@log_info 普通日志记录信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 记录日志信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log_info</span><span class="params">(<span class="keyword">log_t</span> *<span class="built_in">log</span>, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line"></span><br><span class="line">    va_start(ap, format);</span><br><span class="line">    log_write(<span class="built_in">log</span>, <span class="string">"info"</span>, format, ap);</span><br><span class="line">    va_end(ap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cmake-编译配置相关"><a href="#cmake-编译配置相关" class="headerlink" title="cmake 编译配置相关"></a>cmake 编译配置相关</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project(demo)</span><br><span class="line"></span><br><span class="line">add_definitions(&quot;-Wall -g&quot;)</span><br><span class="line"></span><br><span class="line">include_directories(./include)</span><br><span class="line"></span><br><span class="line">add_subdirectory(./core)</span><br><span class="line">add_subdirectory(./event)</span><br><span class="line">add_subdirectory(./http)</span><br><span class="line"></span><br><span class="line">add_executable(demo main.c)</span><br><span class="line"></span><br><span class="line">target_link_libraries(demo </span><br><span class="line">                      core http </span><br><span class="line">                      event core</span><br><span class="line">                      http)</span><br></pre></td></tr></table></figure><p>在最后链接的时候，会发现有相互依赖的问题，原因是我们的程序相关隔离性还是没有划分的太好</p><p>比如在demo - core 中demo链接core中的函数，但是core中的函数又依赖http，所以只有在后面再多加一个连接即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;main启动函数&quot;&gt;&lt;a href=&quot;#main启动函数&quot; class=&quot;headerlink&quot; title=&quot;main启动函数&quot;&gt;&lt;/a&gt;main启动函数&lt;/h1&gt;&lt;p&gt;主要调用init_cycle() 进入框架事件循环&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
      <category term="mini_ngx" scheme="http://wiki.brewlin.com/categories/blog/nginx/mini-ngx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mini_ngx_实现一-简述</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/1.mini_ngx_%E5%AE%9E%E7%8E%B0%E4%B8%80-%E7%AE%80%E8%BF%B0/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/mini_ngx/1.mini_ngx_实现一-简述/</id>
    <published>2020-04-15T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>github: <a href="https://github.com/brewlin/just-for-fun/mini_nginx">https://github.com/brewlin/just-for-fun/mini_nginx</a></p><p>mini_ngx 主要是抽取出nginx主体框架实现一个mini版demo，拆分nginx<code>cycle</code> <code>http</code> <code>event</code>等主要模块</p><p>主要抽取的相关知识点有,<code>连接池</code>,<code>内存池</code>,<code>模块封装</code>,<code>epoll模块</code>,<code>非阻塞socket，端口复用</code>,<code>log</code>.nginx为了保证<code>高性能</code>和<code>挂平台</code>会有大量的兼容性代码和细节优化代码，当前demo为了保证主流程的连贯，去掉相关优化和兼容，例如时间模块指定<code>epoll</code>实现，http只进行本地文件读取后响应客户端</p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ol><li><code>cycle-&gt;is_daemon = 0|1;</code> 模拟nginx是否开启守护进程</li><li><code>cycle-modules_n = 2;cycle-&gt;modules = modules</code>; 模拟nginx的模块架构,因为nginx所有的功能都封装为模块化，在编译期间就将所有的模块添加到一个数组中，并且在启动期间赋值给<code>cycle-&gt;modules</code>，因为我们只实现了两个模块<code>http</code>,<code>event</code>所以默认为2个模块</li><li><p>日志配置，nginx日志很强大，目前我们只实现对应的日志记录功能即可，需要手动配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/core/cycle.c:92</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开日志文件</span></span><br><span class="line">cycle-&gt;<span class="built_in">log</span> = palloc(cycle-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">log_t</span>));</span><br><span class="line">cycle-&gt;<span class="built_in">log</span>-&gt;use_logfile = <span class="number">1</span>;</span><br><span class="line">log_open(cycle-&gt;<span class="built_in">log</span>, <span class="string">"./run.log"</span>)</span><br></pre></td></tr></table></figure></li><li><p>监听端口配置，因为nginx主要完全基于<code>nginx.conf</code>配置，所以每个模块都是根据配置中的参数做对应的初始化操作，例如<code>listen</code>配置会使用http模块来添加对应socket套接字和监听，我们的demo中就没有实现配置解析，所以模拟在个个模块中配置对应的监听端口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/http/http.c:28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里本来是http模块的初始化，每发现一个lisetn配置就会调用如下方法进行添加到cycle-&gt;istening链表上</span></span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"><span class="comment">//我们这里模仿nginx 就写死在模块初始化方法里默认监听8090端口</span></span><br><span class="line">serv_addr.sin_port = htons(<span class="number">8089</span>)</span><br></pre></td></tr></table></figure></li><li><p>连接池大小配置， nginx连接池大小是由<code>event{ worker_connection 1000;}</code>配置来决定的，同样我们在event模块初始化的时候是写在初始化方法里，模仿由配置文件中读取的连接池大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/event/event.c:74</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化100个连接池</span></span><br><span class="line">cycle-&gt;connection_n = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化epoll事件的大小内存申请</span></span><br><span class="line"><span class="comment">//init epoll_create epoll_events</span></span><br><span class="line">event_actions.init(cycle,cycle-&gt;connection_n/<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><p><img src="/images/mini_ngx/des.png" alt="image"></p><ol><li>监听8089 tcp协议</li><li>将8090 加入epoll监听可读事件</li><li>http请求到来，触发epoll_wait就绪事件 分发8090socket <code>accept</code>接受新连接</li><li>为该连接分配内存池，并加入epoll读事件，等待客户端发送<code>body</code>数据</li><li>http请求发送body请求，触发epoll_wait就绪事件，分发该tcp连接连接<code>ev-&gt;handler</code></li><li>解析http协议，读取对应html文件内容，响应客户端</li><li>回收内存池，删除epoll事件，关闭客户端fd，回收该连接</li></ol><h1 id="组织代码结构"><a href="#组织代码结构" class="headerlink" title="组织代码结构"></a>组织代码结构</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mini_nginx</span><br><span class="line">----------core                  核心模块</span><br><span class="line">--------------cycle.c           启动函数</span><br><span class="line">--------------<span class="built_in">array</span>.c           链表库</span><br><span class="line">--------------connection.c      连接池</span><br><span class="line">--------------mem_pool.c        内存池</span><br><span class="line">--------------<span class="built_in">log</span>.c             日志记录</span><br><span class="line">--------------CMakeLists.txt    编译配置</span><br><span class="line"></span><br><span class="line">----------event                 事件模块</span><br><span class="line">---------------event.c          核心函数</span><br><span class="line">---------------epoll_module.c   主要实现</span><br><span class="line">---------------event_accept.c   accept</span><br><span class="line">---------------CMakeLists.txt   编译配置</span><br><span class="line"></span><br><span class="line">----------http                  http模块</span><br><span class="line">--------------http.c            主要函数</span><br><span class="line">--------------http_connection.c </span><br><span class="line">--------------http_header.c     </span><br><span class="line">--------------request.c</span><br><span class="line">--------------response.c</span><br><span class="line">--------------stringutils.c</span><br><span class="line">--------------CMakeLists.txt     编译配置</span><br><span class="line"></span><br><span class="line">----------include                头文件库</span><br><span class="line"></span><br><span class="line">----------main.c                 main函数</span><br><span class="line">----------CMakeLists.txt         链接配置</span><br></pre></td></tr></table></figure><h1 id="编译启动"><a href="#编译启动" class="headerlink" title="编译启动"></a>编译启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /just-for-fun/mini_nginx</span><br><span class="line">&gt; cp -r www /tmp/www</span><br><span class="line">&gt; mkdir bin;cd bin</span><br><span class="line">&gt; cmake ../</span><br><span class="line">&gt; make</span><br></pre></td></tr></table></figure><p><img src="/images/mini_ngx/make.png" alt="image"></p><p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./demo</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl http://127.0.0.1:8089/index.html</span><br><span class="line">&gt; tailf ./run.log</span><br></pre></td></tr></table></figure><p><img src="/images/mini_ngx/console.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;github: &lt;a href=&quot;https://github.com/brewlin/just-for-fun/mini_nginx&quot;&gt;h
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
      <category term="mini_ngx" scheme="http://wiki.brewlin.com/categories/blog/nginx/mini-ngx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ngx_连接池与事件封装(二)</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/2.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%BA%8C)/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/2.ngx_连接池与事件封装(二)/</id>
    <published>2020-04-12T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件模型概述"><a href="#事件模型概述" class="headerlink" title="事件模型概述"></a>事件模型概述</h1><p>主要分为两个方面事件收集器、事件分发器</p><h2 id="事件收集器"><a href="#事件收集器" class="headerlink" title="事件收集器"></a>事件收集器</h2><p>也就是向epoll添加、更新、删除等事件，让epoll事件去管理</p><ul><li>EPOLL_CTL_MOD</li><li>EPOLL_CTL_ADD</li><li>EPOLL_CTL_DEL<h2 id="事件分发器"><a href="#事件分发器" class="headerlink" title="事件分发器"></a>事件分发器</h2>实际是调用epoll_wait 收集内核通知的<code>就绪</code>事件，然后调用<code>ev-&gt;handler</code>执行用户自定义该事件的处理方法</li></ul><h1 id="ngx-事件初始化"><a href="#ngx-事件初始化" class="headerlink" title="ngx 事件初始化"></a>ngx 事件初始化</h1><p>事件的初始化实际就是对<code>epoll</code>进行初始化，如<code>epoll_create（）调用创建epollfd</code> <code>event_list事件列表内存申请</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/event/ngx_event.c:608  ngx_event_process_init()</span></span><br><span class="line">.....</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cycle-&gt;modules[m]-&gt;type != NGX_EVENT_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cycle-&gt;modules[m]-&gt;ctx_index != ecf-&gt;use) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;actions.init(cycle, ngx_timer_resolution) != NGX_OK) &#123;</span><br><span class="line">            <span class="comment">/* fatal */</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>这里是event核心模块被<code>cycle_init（）</code>主函数进行<code>init_process()</code>初始化时调用的函数，在上一节有说明，该函数是对<code>连接池</code> ,<code>读事件</code> ,<code>写事件</code>等进行内存申请初始化，串联成链表</p><p>这里也是其中的工作之一，因为nginx高度可扩展，所以<code>event</code>实际的系统实现有很多种<code>epoll,kqueue,pool,select..</code>等，在<code>./configure</code>时会进行环境检查，将兼容平台的实现，如<code>epoll_module.c</code>加入到<code>cycle-&gt;modules[m]</code>中，所以上面的循环就是找出如<code>epoll</code>的实现并去调用该初始化方法，准备好接受事件</p><h2 id="全局epoll接口"><a href="#全局epoll接口" class="headerlink" title="全局epoll接口"></a>全局epoll接口</h2><p>加入平台的event实现为<code>epoll</code>则会调用epoll_moudle.c 的初始化方法，将相关的接口添加到 <code>ngx_event_actions</code>全局变量上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//src/event/module/epoll_module.c:369</span><br><span class="line">static ngx_event_module_t  ngx_epoll_module_ctx = &#123;</span><br><span class="line">    &amp;epoll_name,</span><br><span class="line">    ngx_epoll_create_conf,               /* create configuration */</span><br><span class="line">    ngx_epoll_init_conf,                 /* init configuration */</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ngx_epoll_add_event,             /* add an event */</span><br><span class="line">        ngx_epoll_del_event,             /* delete an event */</span><br><span class="line">        ngx_epoll_add_event,             /* enable an event */</span><br><span class="line">        ngx_epoll_del_event,             /* disable an event */</span><br><span class="line">        ngx_epoll_add_connection,        /* add an connection */</span><br><span class="line">        ngx_epoll_del_connection,        /* delete an connection */</span><br><span class="line"></span><br><span class="line">        ngx_epoll_process_events,        /* process the events */</span><br><span class="line">        ngx_epoll_init,                  /* init the events */</span><br><span class="line">        ngx_epoll_done,                  /* done the events */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ngx_event_actions = ngx_epoll_module_ctx.actions;</span><br></pre></td></tr></table></figure></p><p>也就是将epoll的<code>add,del,add_con,del_con,epoll_process_events</code>等接口条件到全局<code>actions</code>上，提供外部访问，收集外部事件，并分发就绪事件</p><h1 id="事件相关api"><a href="#事件相关api" class="headerlink" title="事件相关api"></a>事件相关api</h1><p>下面统一接口的实现假定为epoll实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);</span><br><span class="line">    ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);</span><br><span class="line"></span><br><span class="line">    ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);</span><br><span class="line">    ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);</span><br><span class="line"></span><br><span class="line">    ngx_int_t  (*add_conn)(ngx_connection_t *c);</span><br><span class="line">    ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);</span><br><span class="line"></span><br><span class="line">    ngx_int_t  (*notify)(ngx_event_handler_pt handler);</span><br><span class="line"></span><br><span class="line">    ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,</span><br><span class="line">                                 ngx_uint_t flags);</span><br><span class="line"></span><br><span class="line">    ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);</span><br><span class="line">    void       (*done)(ngx_cycle_t *cycle);</span><br><span class="line">&#125; ngx_event_actions_t;</span><br><span class="line"></span><br><span class="line">ngx_event_actions_t   ngx_event_actions;</span><br></pre></td></tr></table></figure></p><p>在event.c 中会定义全局变量<code>ngx_event_actions</code>，改变量对应的平台实现的相关事件接口，如上文初始化时，如果平台支持<code>epoll</code>则将<code>epoll</code>事件的相关api添加到全局变量<code>ngx_event_actions</code>中，提供外部调用注册事件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_process_events   ngx_event_actions.process_events</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_done_events      ngx_event_actions.done</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_add_event        ngx_event_actions.add</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_del_event        ngx_event_actions.del</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_add_conn         ngx_event_actions.add_conn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_del_conn         ngx_event_actions.del_conn</span></span><br></pre></td></tr></table></figure><p>并且默认提供了相关宏定义，直接通过宏定义更加方便些</p><h2 id="ngx-add-event-注册事件"><a href="#ngx-add-event-注册事件" class="headerlink" title="@ngx_add_event 注册事件"></a>@ngx_add_event 注册事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_add_event(<span class="keyword">event_t</span> *ev, <span class="keyword">int_t</span> event, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>                  op;</span><br><span class="line">    <span class="keyword">uint32_t</span>             events, prev;</span><br><span class="line">    <span class="keyword">event_t</span>         *e;</span><br><span class="line">    <span class="keyword">connection_t</span>    *c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>   <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    c = ev-&gt;data;</span><br><span class="line"></span><br><span class="line">    events = (<span class="keyword">uint32_t</span>) event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event == READ_EVENT) &#123;</span><br><span class="line">        e = c-&gt;write;</span><br><span class="line">        prev = EPOLLOUT;</span><br><span class="line">        events = EPOLLIN;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        e = c-&gt;read;</span><br><span class="line">        prev = EPOLLIN;</span><br><span class="line">        events = EPOLLOUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e-&gt;active) &#123;</span><br><span class="line">        op = EPOLL_CTL_MOD;</span><br><span class="line">        events |= prev;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        op = EPOLL_CTL_ADD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ee.events = events | (<span class="keyword">uint32_t</span>) flags;</span><br><span class="line">    ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | ev-&gt;instance);</span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add event %d "</span>,c-&gt;fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl %d failed\n"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ev-&gt;active = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是新增还是修改，<code>e-&gt;active</code>如果为1，说明之前注册过该事件，需要走更改事件流程<code>epoll_ctl_mod</code></p><p>例如http流程中假如需要等待客户端发送<code>body</code>才能进行下面的操作，那么就可以将该http的读事件通过这个接口注册到<code>epoll</code>中</p><p>当客户端发送了数据，内核收到的数据后分发该就绪事件，将内核数据拷贝到用户态空间调用<code>ev-&gt;handler()</code>回调函数继续执行上一次中断的函数</p><h2 id="ngx-del-event-删除事件"><a href="#ngx-del-event-删除事件" class="headerlink" title="@ngx_del_event 删除事件"></a>@ngx_del_event 删除事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_del_event(<span class="keyword">event_t</span> *ev, <span class="keyword">int_t</span> event, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">.......</span><br><span class="line">    <span class="keyword">if</span> (e-&gt;active) &#123;</span><br><span class="line">        op = EPOLL_CTL_MOD;</span><br><span class="line">        ee.events = prev | (<span class="keyword">uint32_t</span>) flags;</span><br><span class="line">        ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | ev-&gt;instance);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        op = EPOLL_CTL_DEL;</span><br><span class="line">        ee.events = <span class="number">0</span>;</span><br><span class="line">        ee.data.ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl %d"</span>,c-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll_ctl :%d failed"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ev-&gt;active = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样当http请求生命周期结束，也就是<code>http 引用计数count</code>真正为0的时候，会触发<code>event_del,pool_destory,socket_close..</code>等进行事件删除，内存池回收，tcp关闭等一系列回收机制</p><p>event事件删除后，epoll不在负责相关事件监控</p><h2 id="ngx-add-conn-注册连接事件"><a href="#ngx-add-conn-注册连接事件" class="headerlink" title="@ngx_add_conn 注册连接事件"></a>@ngx_add_conn 注册连接事件</h2><p>该方法更加方便，直接将<code>connection_t</code>连接注册到epoll中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_add_connection(<span class="keyword">connection_t</span> *c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>  <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    ee.events = EPOLLIN|EPOLLOUT|EPOLLET;</span><br><span class="line">    ee.data.ptr = (<span class="keyword">void</span> *) ((<span class="keyword">uintptr_t</span>) c | c-&gt;read-&gt;instance);</span><br><span class="line"></span><br><span class="line">    log_info(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add connection fd:%d"</span>,c-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, EPOLL_CTL_ADD, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        log_error(c-&gt;<span class="built_in">log</span>,<span class="string">"epoll add connection fd:%d failed"</span>,c-&gt;fd);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;read-&gt;active = <span class="number">1</span>;</span><br><span class="line">    c-&gt;write-&gt;active = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接调用epoll_ctl()将该事件添加到epoll_ctl中</p><h2 id="ngx-del-conn-删除事件"><a href="#ngx-del-conn-删除事件" class="headerlink" title="@ngx_del_conn 删除事件"></a>@ngx_del_conn 删除事件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int_t</span></span><br><span class="line">epoll_del_connection(<span class="keyword">connection_t</span> *c, <span class="keyword">uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>                 op;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>  <span class="title">ee</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CLOSE_EVENT) &#123;</span><br><span class="line">        c-&gt;read-&gt;active = <span class="number">0</span>;</span><br><span class="line">        c-&gt;write-&gt;active = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line">    op = EPOLL_CTL_DEL;</span><br><span class="line">    ee.events = <span class="number">0</span>;</span><br><span class="line">    ee.data.ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(ep, op, c-&gt;fd, &amp;ee) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"del connection failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;read-&gt;active = <span class="number">0</span>;</span><br><span class="line">    c-&gt;write-&gt;active = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接del移除该事件即可</p><h1 id="ngx-process-events-事件分发"><a href="#ngx-process-events-事件分发" class="headerlink" title="@ngx_process_events 事件分发"></a>@ngx_process_events 事件分发</h1><p>nginx是所有的事件执行都来自事件循环监测事件并发事件执行,该函数在nginx<code>woker</code>进程启动后作为<code>while(1){}</code>循环事件调用,<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_epoll_process_events(<span class="keyword">ngx_cycle_t</span> *cycle, <span class="keyword">ngx_msec_t</span> timer, <span class="keyword">ngx_uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事件分发主要分为如下重要部分</p><ol><li><p>调用<code>epoll_wait</code>监测就绪事件，如tcp连接，数据读写，tcp关闭。。。等等就绪事件,events为就绪事件的总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">events = epoll_wait(ep, event_list, (int) nevents, timer);</span><br></pre></td></tr></table></figure></li><li><p>分发所有就绪事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    for (i = 0; i &lt; events; i++) &#123;</span><br><span class="line">        c = event_list[i].data.ptr;</span><br><span class="line"></span><br><span class="line">        instance = (uintptr_t) c &amp; 1;</span><br><span class="line">        c = (ngx_connection_t *) ((uintptr_t) c &amp; (uintptr_t) ~1);</span><br><span class="line"></span><br><span class="line">        rev = c-&gt;read;</span><br><span class="line">        //判断该连接是否已经失效，因为如果在执行之前的连接事件的时候将当前连接关闭了，单该连接又被新连接给复用了，这就需要instance来解决了，closed无法解决新连接将之前连接复用的例外</span><br><span class="line">        if (c-&gt;fd == -1 || rev-&gt;instance != instance) &#123;</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * the stale event from a file descriptor</span><br><span class="line">             * that was just closed in this iteration</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line">            ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0,</span><br><span class="line">                           &quot;epoll: stale event %p&quot;, c);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        取出事件</span><br><span class="line">        revents = event_list[i].events;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里比较重要，nginx是基于事件来执行的，如果其中任何一个事件阻塞了，将会导致整个进程得不到处理任何任务，例如新连接<code>accept</code>可能需要优先执行，而普通收发数据可能需要放到延迟队列去执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flags &amp; NGX_POST_EVENTS) &#123;</span><br><span class="line">    ngx_post_event(wev, &amp;ngx_posted_events);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wev-&gt;handler(wev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件模型概述&quot;&gt;&lt;a href=&quot;#事件模型概述&quot; class=&quot;headerlink&quot; title=&quot;事件模型概述&quot;&gt;&lt;/a&gt;事件模型概述&lt;/h1&gt;&lt;p&gt;主要分为两个方面事件收集器、事件分发器&lt;/p&gt;
&lt;h2 id=&quot;事件收集器&quot;&gt;&lt;a href=&quot;#事件收集器
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="epoll" scheme="http://wiki.brewlin.com/tags/epoll/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
      <category term="connection-pool" scheme="http://wiki.brewlin.com/tags/connection-pool/"/>
    
      <category term="event" scheme="http://wiki.brewlin.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>linux_内核_链表偏移量技巧</title>
    <link href="http://wiki.brewlin.com/wiki/blog/php/linux_%E5%86%85%E6%A0%B8_%E9%93%BE%E8%A1%A8%E5%81%8F%E7%A7%BB%E9%87%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://wiki.brewlin.com/wiki/blog/php/linux_内核_链表偏移量技巧/</id>
    <published>2020-04-10T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="container-of-定义"><a href="#container-of-定义" class="headerlink" title="@container_of 定义"></a>@container_of 定义</h1><p>在看<code>linux_os_link.c</code>内核链表的时候，看到的一个高级技巧，<code>通过结构体偏移量</code>定位实际对象的指针地址</p><p>定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) (&#123;\</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="title">typeof</span><span class="params">( ((type *)<span class="number">0</span>)-&gt;member )</span> *__mptr </span>= (ptr);\</span><br><span class="line">        (type *)( (<span class="keyword">char</span> *)__mptr - __offsetof(type,member) );&#125;)</span><br></pre></td></tr></table></figure></p><p>总的来说<code>ptr</code>一个<code>type</code>对象里面的<code>member</code>成员指针，现在如果你只有<code>member</code>成员的指针，但是<code>你想拿到type对象的地址</code>那么container_of就发挥了重要作用，如下图所示:<br><img src="/images/blog/linuxos/linux_link_os.png" alt="image"><br>整个链表通过node指针串联起来，所以能够想到，当我们通过<code>*node</code>指针遍历所有的节点时，<code>我们怎么获取到整个对象的地址呢</code>答案当然是上面提到的<code>container_of</code>技巧:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假如们已经遍历到了第一个node节点</span></span><br><span class="line">link_node *node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在我们想获取 struct test对象指针则可以这样</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span> *<span class="title">obj</span> = <span class="title">container_of</span>(<span class="title">node</span>,<span class="title">struct</span> <span class="title">test</span>,<span class="title">node</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在obj 就是模板对象的指针了，是不是很方便呢，</span></span><br></pre></td></tr></table></figure></p><p>当然这种技巧主要还是为了节省内存，你也可以在node结构体中加入一个自定义的结构体指针指向<code>struct test</code>即可，就不用通过偏移量定位了</p><p>通过<code>container_of</code>显然可以节省一个指针内存的空间了，这在很多高性能场景必然发挥了重要作用</p><h2 id="container-of-解析（一）"><a href="#container-of-解析（一）" class="headerlink" title="container_of 解析（一）"></a>container_of 解析（一）</h2><p>我们先来看第一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define container_of(ptr, type, member) (&#123;\</span><br><span class="line">        const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);\</span><br></pre></td></tr></table></figure></p><ol><li><code>((type *)0)-&gt;memeber</code> 通过将<code>0X00</code>地址转换为<code>type</code>自定义类型，再访问对应的member成员</li><li><code>typeof</code> 编译期间获取<code>member</code>成员类型，其实就是获取<code>node</code>节点的结构体类型</li><li><code>const node *_mptr = (ptr)</code> 首先ptr是链表的node节点指针，这行代码主要就是单独定义一个node指针执行<code>ptr</code>而已</li></ol><h2 id="container-of-解析-二"><a href="#container-of-解析-二" class="headerlink" title="container_of 解析 (二)"></a>container_of 解析 (二)</h2><p>这行代码是实际的偏移量计算代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(type *)( (char *)__mptr - __offsetof(type,member) );&#125;)</span><br></pre></td></tr></table></figure></p><ol><li><code>(char *)_mptr</code> 我们知道指针的运算受限于<code>指针类型</code>，如果指针类型为<code>int</code>那么<code>对int*指针 +1，则地址可能位移了4个字节</code>,所以强制转换为<code>char *</code> 保证更加精确</li><li><code>_offsetof(type,member)</code> 计算出成员member相对于结构体对象的内存偏移量</li><li><code>mptr - offsetof(type,membr)</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//加入有一个结构体如下</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    char a,</span><br><span class="line">    char b,</span><br><span class="line">    link_node *node;</span><br><span class="line">&#125;test;</span><br><span class="line"></span><br><span class="line">//mptr 就是node指针</span><br><span class="line">//那么有如下计算</span><br><span class="line">offsetof(test,node) = 2;</span><br><span class="line">//因为node之前有两个字节，所以node相对于test结构体的偏移量为2</span><br><span class="line"></span><br><span class="line">所以mptr-offsetof(test,node)  = test结构体的指针地址</span><br></pre></td></tr></table></figure></li></ol><h1 id="offsetof-定义"><a href="#offsetof-定义" class="headerlink" title="@offsetof 定义"></a>@offsetof 定义</h1><p>offsetof可以用于计算某个成员相对于结构体对应的偏移量，这样当我们能拿到<code>任意成员地址时</code>，都能获取到结构体对象地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER</span><br></pre></td></tr></table></figure></p><ol><li><code>( (TYPE *)0</code>) 将零转型为TYPE类型指针;</li><li><code>((TYPE *)0)-&gt;MEMBER</code> 访问结构中的数据成员;</li><li><code>&amp;( ( (TYPE *)0 )-&gt;MEMBER )</code>取出数据成员的地址;</li><li><code>(size_t)(&amp;(((TYPE*)0)-&gt;MEMBER))</code>结果转换类型.巧妙之处在于将<code>0转换成(TYPE*)</code>，结构以内存空间首地址<code>0作为起始地址</code>，则成员地址自然为<code>偏移地址</code>；</li></ol><h1 id="php扩展中的技巧场景"><a href="#php扩展中的技巧场景" class="headerlink" title="php扩展中的技巧场景"></a>php扩展中的技巧场景</h1><p>在通过c++开发对应php扩展<code>class</code>时，会有这样的场景，对应php扩展类实例化的时候通常对应一个<code>c++类</code>，那么就会存在<code>php-class</code>对应一个<code>c++-class</code>关系</p><p>那么他们怎么关联的呢？可能最容易想到的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zend_declare_property_string(lib_co_server_ce_ptr, ZEND_STRL(&quot;obj&quot;), &quot;&quot;, ZEND_ACC_PRIVATE)</span><br><span class="line"></span><br><span class="line">Test *test = new Test();</span><br><span class="line">zend_update_property_string(lib_co_server_ce_ptr, getThis(), ZEND_STRL(&quot;obj&quot;), Z_VAL_P(test));</span><br></pre></td></tr></table></figure></p><p>总的来说就是在php属性中增加一个私有成员变量，将实例化的c++对象赋值给php成员变量</p><p>这种做法总的来说是灾难的，php内核不保证会做什么其他操作，非常不安全，还有就是每次访问对应的<code>c++对象</code>都需要进行读取操作，非常不友好</p><h2 id="通过偏移量来绑定对应对象"><a href="#通过偏移量来绑定对应对象" class="headerlink" title="通过偏移量来绑定对应对象"></a>通过偏移量来绑定对应对象</h2><p>这种方式也是官方推荐的方式，健全、安全、且友好</p><p>首先定义主体结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    Server *serv;</span><br><span class="line">    zend_object std;</span><br><span class="line">&#125;serv</span><br></pre></td></tr></table></figure></p><p>可以看出 std成员就是php对象实际指针，serv成员就是c++对象指针</p><p>定义对象生成事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static serv* lib_server_fetch_object(zend_object *obj)</span><br><span class="line">&#123;</span><br><span class="line">    return (serv *)((char *)obj - lib_server_handlers.offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static zend_object* lib_server_create_object(zend_class_entry *ce)</span><br><span class="line">&#123;</span><br><span class="line">    serv *serv_t = (serv *)ecalloc(1, sizeof(serv) + zend_object_properties_size(ce));</span><br><span class="line">    zend_object_std_init(&amp;serv_t-&gt;std, ce);</span><br><span class="line">    object_properties_init(&amp;serv_t-&gt;std, ce);</span><br><span class="line">    serv_t-&gt;std.handlers = &amp;lib_server_handlers;</span><br><span class="line">    return &amp;serv_t-&gt;std;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>在php层面<code>new serv()</code>时，会调用<code>lib_server_create_object</code>函数，且函数内部我们<code>不是直接去创建一个zend_object返回</code>,而是创建一个<code>serv</code></li><li>当我们想要获取c++对象时会调用<code>fetch_object</code>函数传入php对象指针<code>obj</code>其实就是上面的那个<code>zend_object std</code>，所以根据上面的技巧我们显然可以通过偏移量来获得c++指针的地址</li><li>结构体地址 也可以当做是第一个成员的地址<code>这是c语言</code>内存布局的特性，所以通过这个技巧就可以巧妙绑定c++对象以及php对象指针</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;container-of-定义&quot;&gt;&lt;a href=&quot;#container-of-定义&quot; class=&quot;headerlink&quot; title=&quot;@container_of 定义&quot;&gt;&lt;/a&gt;@container_of 定义&lt;/h1&gt;&lt;p&gt;在看&lt;code&gt;linux_os
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/categories/blog/php/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="os" scheme="http://wiki.brewlin.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>ngx_连接池与事件封装(一)</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/1.ngx_%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85(%E4%B8%80)/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/1.ngx_连接池与事件封装(一)/</id>
    <published>2020-04-10T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接池概述"><a href="#连接池概述" class="headerlink" title="连接池概述"></a>连接池概述</h1><p>nginx的连接池是属于<code>短链接池</code>的，因为主要业务场景为代理服务器，生命周期是有限的，下面来看看两种类型的连接池的区别</p><h2 id="长连接连接池"><a href="#长连接连接池" class="headerlink" title="长连接连接池"></a>长连接连接池</h2><p>我们说<code>连接池</code>一般指的是：<code>http连接池</code>,<code>tcp连接池</code>,<code>udp连接池</code>等常用的网络连接复用。例如tcp连接池，当你有两个服务并且存在<code>相互调用</code>进行数据传输，那么必然存在连接建立(三次握手),连接关闭(四次挥手)等交互</p><p>问题是如果每次发送数据都要建立连接和关闭，那对于系统消耗还是很大的，每次创建连接不但要进行系统资源的消耗，而且用户层面也要申请内存来存放相关结构体</p><p>那么连接池的作用这时候就显得格外重要了，想象一下每次建立连接后不关闭呢，就让两个服务保持长连接通讯可以不呢？答案当然是yes</p><p>将所有连接<code>一次性初始化</code>,或者动态添加到连接池中，每次准备向对方发送数据时，直接去连接池里拿<code>存活连接</code>，没有就走新建连接流程</p><h2 id="短连接池"><a href="#短连接池" class="headerlink" title="短连接池"></a>短连接池</h2><p>nginx的连接池其实是属于短连接池的，连接池的主要作用当然也是为了节省内存，提高tcp交互速度</p><p>但是短连接池还是有一些不一样的，因为在短链接的场景下<code>网络连接是无法复用</code>的，唯一能够复用的就是<code>承载该网络连接的那个结构体</code>,对于nginx来说，内存当然是能省就省</p><p>当然连接池里的连接也可以被某个<code>持久长连接占用</code>,而且是长期占用，对于代理的场景，那可能是双倍占用</p><h2 id="连接池注意事项"><a href="#连接池注意事项" class="headerlink" title="连接池注意事项"></a>连接池注意事项</h2><p>nginx的连接池在初始化启动期间就完全根据<code>nginx.conf 中connections</code>数量分配对应的内存，所以内存是一次性占有的，新连接进来也就是有一个<code>fd</code>数据变更</p><p>注意：<code>连接池为空则丢弃该请求，不在处理新请求</code>,例如你的<code>worker_connections=5</code> 那么当6条长连接请求过来时，最后一条肯定是不会被处理，一直处于等待期间</p><h1 id="连接池初始化"><a href="#连接池初始化" class="headerlink" title="连接池初始化"></a>连接池初始化</h1><p>连接池初始化时属于<code>event</code>事件模块的任务，在<code>event_core_module</code>核心模块启动的时候（模块的启动由 cyle_init 中遍历所有的模块统一启动初始化）进行的初始化</p><p><code>static ngx_int_tngx_event_process_init(ngx_cycle_t *cycle)</code>为实际初始化连接池的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cycle-&gt;connections = ngx_alloc(<span class="keyword">sizeof</span>(<span class="keyword">ngx_connection_t</span>) * cycle-&gt;connection_n, cycle-&gt;<span class="built_in">log</span>);</span><br><span class="line"><span class="keyword">if</span> (cycle-&gt;connections == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cycle-&gt;connection_n</code>该参数在<code>cycle_init</code>主函数中 解析nginx.conf配置文件中<code>worker_connection</code>参数进行初始化，可以看出，该参数直接导致nginx在启动时会占用申请多少的内存，并且该内存会持续到nginx生命周期结束后释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cycle-&gt;read_events = ngx_alloc(<span class="keyword">sizeof</span>(<span class="keyword">ngx_event_t</span>) * cycle-&gt;connection_n,</span><br><span class="line">                                   cycle-&gt;<span class="built_in">log</span>);</span><br><span class="line"><span class="keyword">if</span> (cycle-&gt;read_events == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">rev = cycle-&gt;read_events;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cycle-&gt;connection_n; i++) &#123;</span><br><span class="line">    rev[i].closed = <span class="number">1</span>;</span><br><span class="line">    rev[i].instance = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接池和读写事件是密不可分的，这里先申请对应数量的<code>读事件</code>并初始化为<code>closed</code>，在下文会和连接池进行一一绑定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cycle-&gt;write_events = ngx_alloc(<span class="keyword">sizeof</span>(<span class="keyword">ngx_event_t</span>) * cycle-&gt;connection_n,</span><br><span class="line">                                    cycle-&gt;<span class="built_in">log</span>);</span><br><span class="line"><span class="keyword">if</span> (cycle-&gt;write_events == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wev = cycle-&gt;write_events;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cycle-&gt;connection_n; i++) &#123;</span><br><span class="line">    wev[i].closed = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请写事件内存，和上面读事件对应，都是用于向<code>epoll</code>添加事件时的关联参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i = cycle-&gt;connection_n;</span><br><span class="line">next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i--;</span><br><span class="line"></span><br><span class="line">    c[i].data = next;</span><br><span class="line">    c[i].read = &amp;cycle-&gt;read_events[i];</span><br><span class="line">    c[i].write = &amp;cycle-&gt;write_events[i];</span><br><span class="line">    c[i].fd = (<span class="keyword">ngx_socket_t</span>) <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    next = &amp;c[i];</span><br><span class="line">&#125; <span class="keyword">while</span> (i);</span><br></pre></td></tr></table></figure><p>将所有的连接 和对应的读写事件一一绑定，在<code>epoll_wait</code> 监听事件的时候就可以通过<code>connection_t *c = ev-&gt;data</code>获取对应连接对象</p><h1 id="连接池相关接口"><a href="#连接池相关接口" class="headerlink" title="连接池相关接口"></a>连接池相关接口</h1><ul><li>ngx_get_connection</li><li>ngx_free_connection</li><li>ngx_close_connection</li><li>ngx_reusable_connection</li><li>ngx_drain_connections</li></ul><h2 id="ngx-get-connection-获取空闲连接"><a href="#ngx-get-connection-获取空闲连接" class="headerlink" title="@ngx_get_connection 获取空闲连接"></a>@ngx_get_connection 获取空闲连接</h2><p>用的最多的接口，当<code>accept</code>被动打开新连接的时候，需要从连接池中获取空闲的<code>connection_t</code>结构体封装tcp连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = ngx_cycle-&gt;free_connections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    ngx_drain_connections((<span class="keyword">ngx_cycle_t</span> *) ngx_cycle);</span><br><span class="line">    c = ngx_cycle-&gt;free_connections;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    ngx_log_error(NGX_LOG_ALERT, <span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="string">"%ui worker_connections are not enough"</span>,</span><br><span class="line">                  ngx_cycle-&gt;connection_n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过<code>cycle-&gt;free_connections</code> 全局链表上拿表头的那个连接，如果不为空，说明空闲，直接走面初始化流程即可</p><p>如果连接为空，则需要调用<code>ngx_drain_connections</code>去释放空闲连接（去挨个执行所有的连接事件，尽可能的释放出一下空闲连接出来）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ngx_cycle-&gt;free_connections = c-&gt;data;</span><br><span class="line">ngx_cycle-&gt;free_connection_n--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ngx_cycle-&gt;files &amp;&amp; ngx_cycle-&gt;files[s] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    ngx_cycle-&gt;files[s] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rev = c-&gt;read;</span><br><span class="line">wev = c-&gt;write;</span><br><span class="line"></span><br><span class="line">ngx_memzero(c, <span class="keyword">sizeof</span>(<span class="keyword">ngx_connection_t</span>));</span><br><span class="line"></span><br><span class="line">c-&gt;read = rev;</span><br><span class="line">c-&gt;write = wev;</span><br><span class="line">c-&gt;fd = s;</span><br><span class="line">c-&gt;<span class="built_in">log</span> = <span class="built_in">log</span>;</span><br></pre></td></tr></table></figure><p>这里就是获取连接的主要操作了，连接池的所有连接都是在一个链表上通过<code>c-&gt;data</code>串起来的，所以，这里只是将空闲指针移动到下一位即可，回收的时候也只需要插入表头指针前面即可,存取的复杂度都是<code>O(1)</code></p><h2 id="ngx-drain-connections-释放空闲连接"><a href="#ngx-drain-connections-释放空闲连接" class="headerlink" title="@ngx_drain_connections 释放空闲连接"></a>@ngx_drain_connections 释放空闲连接</h2><p>在上面从连接池中获取连接的时候，会发现如果没有空余的连接则会调用如下的方法看看是否能<code>强制</code>空出一些连接来<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_drain_connections(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>          i;</span><br><span class="line">    <span class="keyword">ngx_queue_t</span>       *q;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_queue_empty(&amp;ngx_cycle-&gt;reusable_connections_queue)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q = ngx_queue_last(&amp;ngx_cycle-&gt;reusable_connections_queue);</span><br><span class="line">        c = ngx_queue_data(q, <span class="keyword">ngx_connection_t</span>, <span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">        ngx_log_debug0(NGX_LOG_DEBUG_CORE, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"reusing connection"</span>);</span><br><span class="line"></span><br><span class="line">        c-&gt;close = <span class="number">1</span>;</span><br><span class="line">        c-&gt;read-&gt;handler(c-&gt;read);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实主要就是看看queue长连接链表上选取32个出来，对他们全部执行<code>c-&gt;close = 1,read-&gt;handler(c-&gt;read)</code>,由于<code>close</code>属性会导致<code>http_close_connection</code>回收该链接</p><p>但是强制回收链接前会对他进行一个读取事件的操作<code>recv(fd)</code>，如果返回<code>0</code> 则说明对端已关闭，也需要在<code>handler</code>中释放该链接到<code>free_connections</code>上。</p><h2 id="ngx-reuseable-connection-添加长连接队列"><a href="#ngx-reuseable-connection-添加长连接队列" class="headerlink" title="@ngx_reuseable_connection 添加长连接队列"></a>@ngx_reuseable_connection 添加长连接队列</h2><p>该方法当客户端设置<code>keep-alive</code>长连接属性时，nginx会将它丢到<code>c-&gt;queue</code>队列上，遇到上面连接池不够时，会释放掉长连接队列上的 不活跃链接<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_reusable_connection(<span class="keyword">ngx_connection_t</span> *c, <span class="keyword">ngx_uint_t</span> reusable)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 一旦一个keepalive的连接正常处理了，就将其从reusable队列中移除</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;reusable) &#123;</span><br><span class="line">        ngx_queue_remove(&amp;c-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在ngx_http_set_keepalive中会将reusable置为1，reusable为1的直接效果</span></span><br><span class="line">    <span class="comment">// 就是将该连接插到reusable_connections_queue中</span></span><br><span class="line">    c-&gt;reusable = reusable;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当reusable为0时，意味着该keepalive被正常的处理掉了，不应该被再次添加</span></span><br><span class="line">    <span class="comment">// 到reusable队列中了。</span></span><br><span class="line">    <span class="keyword">if</span> (reusable) &#123;</span><br><span class="line">        <span class="comment">/* need cast as ngx_cycle is volatile */</span></span><br><span class="line">        <span class="comment">// 这里使用头插法，较新的连接靠近头部，时间越久未被处理的连接越靠尾</span></span><br><span class="line">        ngx_queue_insert_head(</span><br><span class="line">            (<span class="keyword">ngx_queue_t</span> *) &amp;ngx_cycle-&gt;reusable_connections_queue, &amp;c-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="free-connection-归还到空闲连接池链表上"><a href="#free-connection-归还到空闲连接池链表上" class="headerlink" title="@free_connection 归还到空闲连接池链表上"></a>@free_connection 归还到空闲连接池链表上</h2><h2 id="close-connection-关闭连接并清理回收"><a href="#close-connection-关闭连接并清理回收" class="headerlink" title="@close_connection 关闭连接并清理回收"></a>@close_connection 关闭连接并清理回收</h2><p>会进行一系列清除工作</p><ul><li>移除epoll监听的读写事件</li><li>删除任务队列<code>post_event队列</code></li><li>标记读写事件关闭</li><li>从长连接链表里面移除该链接归还到 空闲链表上</li><li>调用上面<code>free_connection</code>归还链接到空闲链表上</li><li><code>close(fd)</code> 关闭tcp对端</li></ul><h1 id="连接池在框架初始化中的体现"><a href="#连接池在框架初始化中的体现" class="headerlink" title="连接池在框架初始化中的体现"></a>连接池在框架初始化中的体现</h1><p>在nginx启动期间，读取<code>nginx.conf</code>中的配置，并调用个个模块的方法来处理它</p><p>例如<code>server{    listen 8080;}</code>这种配置，会全部被http核心模块解析</p><ol><li>每发现一个<code>listen</code>配置，就会调用http模块<code>create_conf,init_conf</code>等来保存该配置</li><li>并且将每一个端口 初始化为<code>listening_t</code>结构体保存到全局<code>cycle-&gt;listening</code>数组中</li><li>在<code>cycle_init</code>主函数中，调用每个模块的时候会触发<code>http-&gt;init_process</code>初始化http核心模块，然后将所有的端口都进行<code>sock_create(),bind(),listen</code>等操作创建socket</li><li>最后从连接池中为每个socket 分配一个<code>connection_t</code>连接包装其他</li><li>服务端socket 和 普通tcp的连接有什么不同呢？其实主要是在<code>conneciton-&gt;read</code>读事件为<code>accept</code>，非常灵活的将各种类型的连接都统一为相同的接口</li></ol><h2 id="ngx-create-listening-保存监听端口"><a href="#ngx-create-listening-保存监听端口" class="headerlink" title="@ngx_create_listening 保存监听端口"></a>@ngx_create_listening 保存监听端口</h2><p>每从<code>nginx.conf</code>中读取一个listen配置，都需要创建一个<code>listenint_t</code>结构体保存到全局链表上<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//core/ngx_connection.c:20</span></span><br><span class="line">    ls = ngx_array_push(&amp;cf-&gt;cycle-&gt;listening);</span><br><span class="line">    <span class="keyword">if</span> (ls == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(ls, <span class="keyword">sizeof</span>(<span class="keyword">ngx_listening_t</span>));</span><br><span class="line"></span><br><span class="line">    sa = ngx_palloc(cf-&gt;pool, socklen);</span><br><span class="line">    <span class="keyword">if</span> (sa == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="ngx-open-listening-sockets-创建所有socket"><a href="#ngx-open-listening-sockets-创建所有socket" class="headerlink" title="@ngx_open_listening_sockets 创建所有socket"></a>@ngx_open_listening_sockets 创建所有socket</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//core/ngx_connection.c:269</span></span><br><span class="line">ls = cycle-&gt;listening.elts;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cycle-&gt;listening.nelts; i++) &#123;</span><br><span class="line">    s = ngx_socket(ls[i].sockaddr-&gt;sa_family, ls[i].type, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (setsockopt(s, SOL_SOCKET, SO_REUSEADDR,</span><br><span class="line">                           (<span class="keyword">const</span> <span class="keyword">void</span> *) &amp;reuseaddr, <span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span><br><span class="line">    <span class="keyword">if</span> (bind(s, ls[i].sockaddr, ls[i].socklen) == <span class="number">-1</span>) </span><br><span class="line">    <span class="keyword">if</span> (listen(s, ls[i].backlog) == <span class="number">-1</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之就是初始化所有配置文件中定义的socket</p><h2 id="ngx-event-process-init-epoll监听所有socket"><a href="#ngx-event-process-init-epoll监听所有socket" class="headerlink" title="@ngx_event_process_init epoll监听所有socket"></a>@ngx_event_process_init epoll监听所有socket</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">event/event.c</span><br><span class="line">    ls = cycle-&gt;listening.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cycle-&gt;listening.nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">        c = ngx_get_connection(ls[i].fd, cycle-&gt;<span class="built_in">log</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c-&gt;<span class="built_in">log</span> = &amp;ls[i].<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line">        c-&gt;listening = &amp;ls[i];</span><br><span class="line">        ls[i].connection = c;</span><br><span class="line">        </span><br><span class="line">        rev = c-&gt;read;</span><br><span class="line">        rev-&gt;handler = ngx_event_accept;</span><br><span class="line">        <span class="keyword">if</span> (ngx_event_flags &amp; NGX_USE_RTSIG_EVENT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ngx_add_conn(c) == NGX_ERROR) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ngx_add_event(rev, NGX_READ_EVENT, <span class="number">0</span>) == NGX_ERROR) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>从连接池中获取空闲连接包装socket</li><li>将event事件设置为<code>ngx_event_accept</code> 当事件触发了，那一定可能是新是连接的到来需要<code>accept</code></li><li>将socket读写事件加入epoll监听</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;连接池概述&quot;&gt;&lt;a href=&quot;#连接池概述&quot; class=&quot;headerlink&quot; title=&quot;连接池概述&quot;&gt;&lt;/a&gt;连接池概述&lt;/h1&gt;&lt;p&gt;nginx的连接池是属于&lt;code&gt;短链接池&lt;/code&gt;的，因为主要业务场景为代理服务器，生命周期是有限的，下面来
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="epoll" scheme="http://wiki.brewlin.com/tags/epoll/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
      <category term="connection-pool" scheme="http://wiki.brewlin.com/tags/connection-pool/"/>
    
      <category term="event" scheme="http://wiki.brewlin.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://wiki.brewlin.com/wiki/c-ext/thread/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://wiki.brewlin.com/wiki/c-ext/thread/线程池/</id>
    <published>2020-03-31T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$pool = <span class="keyword">new</span> Lib\Thread\Pool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">$ref = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//future = Lib\Thread\Pool\Future</span></span><br><span class="line"><span class="comment">//future-&gt;get() 可以阻塞返回结果</span></span><br><span class="line">$future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">use</span><span class="params">(&amp;$ref)</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    var_dump($ref);</span><br><span class="line">&#125;);</span><br><span class="line">$future-&gt;get();</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="construct-创建线程数量"><a href="#construct-创建线程数量" class="headerlink" title="@construct 创建线程数量"></a>@construct 创建线程数量</h2><p>构造函数需要传入线程创建的参数，在初始化就默认创建固定的线程数量</p><h2 id="add-投递执行任务"><a href="#add-投递执行任务" class="headerlink" title="@add 投递执行任务"></a>@add 投递执行任务</h2><p><code>add()</code> 函数接受一个php闭包函数，可通过引用的方式附加传入参数</p><p>投递后如果有线程空闲，立即执行该任务</p><h2 id="线程池销毁-与释放流程"><a href="#线程池销毁-与释放流程" class="headerlink" title="@线程池销毁 与释放流程"></a>@线程池<code>销毁</code> 与释放流程</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $pool = <span class="keyword">new</span> Lib\Thread\Pool(<span class="number">4</span>);</span><br><span class="line">    $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$pool</code> 的生命周期在test函数内，如果函数调用结束，那么触发<code>$pool</code>垃圾回收，且该类为自定义类型，所以回收会触发如下线程回收流程:</p><ul><li>php : <code>$pool-&gt;destruct()</code>;    php对象释放</li><li>php : <code>$pool-&gt;free_object()</code>; php对象底层扩展进行释放内存处理</li><li>c++ : <code>pool-&gt;~pool()</code>  调用c++线程池对象析构函数</li><li><p>c++ : 加锁改变线程状态 并唤醒所有线程，等待回收线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool::~ThreadPool()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(queue_mu)</span></span>;</span><br><span class="line">        stop = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cond.notify_all();</span><br><span class="line">    <span class="keyword">for</span>(thread &amp;w : workers)&#123;</span><br><span class="line">        w.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>所以线程池的生命周期，依赖php对象实例，如果需要常驻运行，则需要将$pool 设置为全局或者静态变量</code></p></li></ul><h2 id="Lib-Thread-Pool-Future"><a href="#Lib-Thread-Pool-Future" class="headerlink" title="@Lib\Thread\Pool\Future"></a>@<code>Lib\Thread\Pool\Future</code></h2><p>投递任务后立即返回一个future包装器，可用于阻塞等待任务结束获取返回值，转换为同步阻塞程序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="furture-gt-get-等待该异步任务处理结束"><a href="#furture-gt-get-等待该异步任务处理结束" class="headerlink" title="@furture-&gt;get() 等待该异步任务处理结束"></a>@<code>furture-&gt;get()</code> 等待该异步任务处理结束</h3><p>该函数用于等待，当前线程执行的任务结束,并获取返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$future = $pool-&gt;add(function()&#123;</span><br><span class="line">    return [1,3,4,5];</span><br><span class="line">&#125;);</span><br><span class="line">$res = $future-&gt;get();</span><br><span class="line">//res = [1,3,4,5]</span><br></pre></td></tr></table></figure></p><h3 id="异步任务demo"><a href="#异步任务demo" class="headerlink" title="@异步任务demo"></a>@异步任务demo</h3><p>将100个任务全部投递到线程排队处理，然后当前继续执行其他任务<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">100</span> ;$i ++)&#123;</span><br><span class="line">    $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里继续执行其他任务</span></span><br></pre></td></tr></table></figure></p><h3 id="同步任务demo"><a href="#同步任务demo" class="headerlink" title="@同步任务demo"></a>@同步任务demo</h3><p>将100个任务投递到线程处理，并逐一等待每一任务执行完毕<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">100</span> ;$i ++)&#123;</span><br><span class="line">    $future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">use</span><span class="params">($i)</span></span>&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> $i;</span><br><span class="line">    &#125;);</span><br><span class="line">    var_dump($future-&gt;get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里继续阻塞，直到上面100s过期后任务处理完毕</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="c-ext" scheme="http://wiki.brewlin.com/categories/c-ext/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/categories/c-ext/thread/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/tags/thread/"/>
    
      <category term="pool" scheme="http://wiki.brewlin.com/tags/pool/"/>
    
  </entry>
  
  <entry>
    <title>ngx_内存池封装</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/nginx_内存池封装/</id>
    <published>2020-03-10T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存池主要作用"><a href="#内存池主要作用" class="headerlink" title="内存池主要作用"></a>内存池主要作用</h1><p>nginx里几乎所有内存申请都是从<code>ngx_pool_t</code>上申请的，nginx封装了自己的内存池技术提升性能主要有三点好处，<code>内存分配速度快</code>,<code>防止内存碎片</code>,<code>方便内存回收，防止内存泄漏</code></p><h2 id="内存分配速度快"><a href="#内存分配速度快" class="headerlink" title="内存分配速度快"></a>内存分配速度快</h2><p>主要因为c没有垃圾回收机制，没有gc，并且区分堆内存/栈内存。且堆内存上的数据申请后就必须由开发者手动回收，如果不释放则会内存一直堆积，直到系统资源消耗殆尽，系统回收进程</p><p>如果许许多多的变量创建并且都是通过直接像系统申请(<code>malloc</code>)的话，那么整体性能肯定会有所影响和下降，内存池是怎么发挥作用的呢：其实就是预分配的操作，创建内存池的时候首先向操作系统申请一块适当的内存(<code>16k</code>的样子)。在程序运行期间其他所有的内存申请都通过内存池去获取，直接用该段由内存池返回的内存即可</p><p>减少了向操作系统申请的次数</p><h2 id="防止内存碎片"><a href="#防止内存碎片" class="headerlink" title="防止内存碎片"></a>防止内存碎片</h2><p>摘自网友们的说法：</p><p>内存碎片的经典症状是，即使您似乎有足够的可用内存，您也尝试分配一个大块而您却无法分配。另一个可能的结果是该进程无法将内存释放回OS（因为从OS分配的所有块中仍然有一些对象在使用中，即使这些块现在几乎未使用）。</p><h2 id="方便内存回收，防止内存泄漏"><a href="#方便内存回收，防止内存泄漏" class="headerlink" title="方便内存回收，防止内存泄漏"></a>方便内存回收，防止内存泄漏</h2><p>这个特性是利好的，想像一下函数<code>A</code>里分配了一块内存，但是<code>b,c,d,e,ft...</code>等等其他地方都有调用，而且每个功能片区都有成百行代码，可想而知，该内存由谁来释放，或者多次释放将是多么灾难的事情</p><p>nginx的内存池其实主要是针对场景的。因为大多数程序都是有生命周期的，例如<code>http</code>请求到来，在整个处理期间可能会异步处理很多过程，分配很多数据，那么终会有连接断开和结束的时候，那么这个时候内存池的技术就发挥了非常重要的作用，<code>连接到来创建内存池 - 结束连接统一销毁所有内存</code>：中间其他所有的操作压根儿不用关系内存释放的问题，只管申请，想想都是非常轻松的事情<br><img src="/images/blog/nginx/pool.png" alt="image"><br>在连接期间各种模块之间的调用远比这个要复杂的多，要是每个地方都需要关注上下文将是多么灾难的事情</p><p><code>引入内存池后只需要两行代码即可消除大部分安全隐患</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool_t *pool = pool_create(default);</span><br><span class="line"></span><br><span class="line">//.....do  lot of things</span><br><span class="line"></span><br><span class="line">pool_destory(pool);</span><br></pre></td></tr></table></figure></p><h1 id="nginx内存池定义"><a href="#nginx内存池定义" class="headerlink" title="nginx内存池定义"></a>nginx内存池定义</h1><h2 id="相关定义结构体"><a href="#相关定义结构体" class="headerlink" title="相关定义结构体"></a>相关定义结构体</h2><h3 id="pool-t-内存池指针"><a href="#pool-t-内存池指针" class="headerlink" title="@pool_t 内存池指针"></a>@pool_t 内存池指针</h3><p>pool_t是一个链表头主结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct pool_s &#123;</span><br><span class="line">    pool_data_t      d;</span><br><span class="line">    size_t           max;</span><br><span class="line">    pool_t           *current;</span><br><span class="line">    pool_large_t     *large;</span><br><span class="line">    pool_cleanup_t   *cleanup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>新创建的内存池默认可用内存大小其实是这样计算的<code>size - sizeof(pool_t) = 可用内存大小</code>,因为总体内存池的首地址就是pool_t的地址</p><ul><li><p>pool_data_t </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当内存不够用，需要扩容时，会将新申请的内存通过pool_data_t-&gt;next串联起来，组成一个链表</span><br></pre></td></tr></table></figure></li><li><p>size_t max 判断待申请的内存属于大块还是小块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小块内存则直接在当前内存池返回一段可用内存即可</span><br><span class="line"></span><br><span class="line">打开内存需要单独向操作系统申请，并挂载到当前的内存池pool_large_t large的链表上</span><br></pre></td></tr></table></figure></li><li><p>current 指向当前可用内存池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为内存池扩容的机制是，重新生成一块内存并通过链表挂载一起，那么current就显得格外重要，它直接指向新生成的可用内存池即可</span><br></pre></td></tr></table></figure></li><li><p>large 挂载大块内存的链表，如上第2点所说</p></li><li>cleanup 内存池还有一个机制就是可以<code>管理非内存资源的释放</code>，后文详说</li></ul><h3 id="pool-data-t-链表"><a href="#pool-data-t-链表" class="headerlink" title="@pool_data_t 链表"></a>@pool_data_t 链表</h3><p>主要作用就是作为<code>pool_t</code>的一部分，将所有内存池串联成为一个链表，最后释放时遍历链表释放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    pool_t               *next;</span><br><span class="line">    uint_t               failed;</span><br><span class="line">&#125; pool_data_t;</span><br></pre></td></tr></table></figure></p><ul><li>last 指向可以用内存的首地址</li><li>end 指向内存池尾部地址</li><li>next指向 下一块内存池地址</li><li>failed 比较重要<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 当前内存池不够分配使用时，会新申请一个内存池，并通过next挂在链表上</span><br><span class="line">2. 同时failed += 1, 但是current指针不变</span><br><span class="line">3. 那么下次依然会去上面那个内存池继续分配，如果依然不满足条件，failed += 1；</span><br><span class="line">4. 直到failed 值 大于4时，内存池的current指向下一个内存池，实现完全转移到新的内存池</span><br></pre></td></tr></table></figure></li></ul><h3 id="pool-large-t-大内存块链表"><a href="#pool-large-t-大内存块链表" class="headerlink" title="@pool_large_t 大内存块链表"></a>@pool_large_t 大内存块链表</h3><p>这个比较容易理解，当待分配内存大于<code>pool-&gt;max</code>时，则向操作系统分配大内存块挂到<code>pool-&gt;large</code>链表上，最后在同一删除，也可以自己手动删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct pool_large_s  pool_large_t;</span><br><span class="line">struct pool_large_s &#123;</span><br><span class="line">    pool_large_t     *next;</span><br><span class="line">    void             *alloc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>alloc 实际内存地址</li></ul><h2 id="内存池主要接口"><a href="#内存池主要接口" class="headerlink" title="内存池主要接口"></a>内存池主要接口</h2><ul><li><code>create_pool(size_t size)</code> 创建一块内存池</li><li><code>desotry_pool(pool_t *pool)</code> 释放回收所有相关内存</li><li><code>reset_pool(pool_t *pool)</code>  复位内存池</li><li><code>palloc(pool_t *poo,size_t size)</code> 从内存池分配内存，默认字节对齐</li><li><code>pnalloc(pool_t *poo,size_t size)</code> 从内存池分配内存,不对齐字节</li><li><code>pmemalign(pool_t *pool,size_t size,size_t alignment)</code> 分配专用大块内存</li><li><code>pfree(pool_t *pool,void *p)</code> 回收大块内存</li><li><code>pool_cleanup_add(pool_t *p,size_t size)</code> 增加自定资源释放handler</li></ul><p>其实总的来说就3个接口比较重要<code>create_pool</code>,<code>destory_pool</code>,<code>palloc</code>，分别是创建内存池，销毁内存池，申请内存，就可以了</p><p>其他地方只需要调用<code>palloc</code>申请内存就行，<code>无需关系释放问题</code>,所以其他接口也不需要太关注</p><h1 id="内存池主要接口实现"><a href="#内存池主要接口实现" class="headerlink" title="内存池主要接口实现"></a>内存池主要接口实现</h1><h2 id="create-pool-创建内存池实现"><a href="#create-pool-创建内存池实现" class="headerlink" title="@create_pool 创建内存池实现"></a>@create_pool 创建内存池实现</h2><p>nginx内存池的申请场景主要是针对每个连接而言的，例如针对<code>http</code>连接有如下的条件:</p><ol><li>未每个http连接申请一个内存池,该内存池指针会随着http的生命周期一直存在</li><li>每个连接期间通过该pool进行内存申请，<code>无需关注释放</code></li><li>http生命周期结束，也就是tcp连接关闭的时候释放内存池<code>pool_t *pool</code>释放内存完成任务</li></ol><p>所以基本上每个请求都是自带自己的内存池，这样减少了内存释放不干净的风险（大概是吧，有太多原因这样做了）。</p><p>还有就是每个连接池默认大小为<code>deafult_pool_size = 16k</code>，所以不用担心每个连接都申请内存这种做法会太耗内存，实际内存会在使用中进行扩容</p><p>实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pool_t</span>  *p;</span><br><span class="line"> <span class="comment">//分配对齐内存</span></span><br><span class="line"> p = memalign(POOL_ALIGNMENT, size);</span><br><span class="line"> <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line"> p-&gt;d.end = (u_char *) p + size;</span><br><span class="line"> p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line"> p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> size = size - <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line"> p-&gt;max = (size &lt; MAX_ALLOC_FROM_POOL) ? size : MAX_ALLOC_FROM_POOL;</span><br><span class="line"></span><br><span class="line"> p-&gt;current = p;</span><br><span class="line"> p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line"> p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure></p><ol><li>分配对其内存，默认16k</li><li>总体可分配内存=  <code>16k - sizeof(pool_t)</code></li><li>d.last指针指向可用内存</li><li>d.end指针指向内存池末尾</li><li>d.failed 归 0 </li><li>current指向当前内存池，因为初始化的就是当前可用内存池</li><li>其他都置为空指针</li></ol><h2 id="destory-pool-回收内存池实现"><a href="#destory-pool-回收内存池实现" class="headerlink" title="@destory_pool 回收内存池实现"></a>@destory_pool 回收内存池实现</h2><p>一般是在连接的生命周期结束<code>close</code>的时候销毁内存池，那么内存池会<code>逐个遍历内存池链表</code>挨个释放所有的内存，包括<code>小内存块</code>,<code>大内存块</code>,<code>释放自定义资源</code></p><p>代码实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存池销毁</span></span><br><span class="line"><span class="comment">//1.调用所有注册在pool_t上的清理事件</span></span><br><span class="line"><span class="comment">//2.清理large内存块</span></span><br><span class="line"><span class="comment">//3.清理所有pool_t内存块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>          *p, *n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>    *l;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>遍历自定义事件，清除所有的自定义<code>非内存资源</code>：如文件fd</li><li>遍历大内存块，回收所有大内存块数据</li><li>遍历小内存块，回收所有小内存块，相当简洁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为pool_t *pool;就是整个小内存块首地址，所以直接</span><br><span class="line">free(p) 即可，非常灵活</span><br></pre></td></tr></table></figure></li></ol><h2 id="palloc-内存分配实现"><a href="#palloc-内存分配实现" class="headerlink" title="@palloc 内存分配实现"></a>@palloc 内存分配实现</h2><p>作为使用场景最多的接口，提供分配内存，并内部自动管理内存，无需手动释放</p><p>该接口分配的内存默认是字节对齐，为了减少内存碎片而设计</p><p>代码实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size, <span class="keyword">uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   u_char      *m;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = align_ptr(m, ALIGNMENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">size_t</span>) (p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">            p-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_block(pool, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>获取当前可分配内存池的指针<code>pool-&gt;current</code></li><li>遍历当前内存池链表，找到可容纳的内存并直接返回，如果不满足则进行<code>第3步</code></li><li><p>说明当前内存池空间不够，需要向操作系统申请内存<code>palloc_block</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">size_t</span>       psize;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p, *<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="keyword">size_t</span>) (pool-&gt;d.end - (u_char *) pool);</span><br><span class="line"></span><br><span class="line">    m = memalign(POOL_ALIGNMENT, psize);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> = (<span class="keyword">pool_t</span> *) m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.end = m + psize;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m += <span class="keyword">sizeof</span>(<span class="keyword">pool_data_t</span>);</span><br><span class="line">    m = align_ptr(m, ALIGNMENT);</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向操作系统分配一块和之前内存池一样大小(<code>psize</code>)的内存</p></li><li>初始化新申请的<code>pool_t</code>内存池结构</li><li>遍历之前所有可用内存池链表，将失败次数<code>failed</code>+1，如果大于4，则将<code>current</code>可用内存池指针下移，丢弃该不可用内存池</li><li>将新申请的小块内存池挂载到整个内存池链表的末尾，完成内存分配逻辑,返回可用内存空间(<code>return m</code>)给调用方</li></ol><h1 id="内存池其他接口相关"><a href="#内存池其他接口相关" class="headerlink" title="内存池其他接口相关"></a>内存池其他接口相关</h1><h2 id="reset-pool-复位内存池"><a href="#reset-pool-复位内存池" class="headerlink" title="@reset_pool 复位内存池"></a>@reset_pool 复位内存池</h2><p>该接口可能用的比较少，但是却对于内存复用非常有用，试想一下，如果每个连接来都<code>申请内存、结束释放内存</code>,如果并发量大，是不是可以有优化的空间呢，答案当然是yes</p><p>那继续来讲讲内存池可分配的原理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    pool_t               *next;</span><br><span class="line">    uint_t               failed;</span><br><span class="line">&#125; pool_data_t;</span><br><span class="line"></span><br><span class="line">struct pool_s &#123;</span><br><span class="line">    pool_data_t      d;</span><br><span class="line">    size_t           max;</span><br><span class="line">    pool_t           *current;</span><br><span class="line">    pool_large_t     *large;</span><br><span class="line">    pool_cleanup_t   *cleanup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol><li>标志一段内存池是否<code>空间足够</code>主要是根据<code>last,end</code>指针来判断的</li><li>实际可分配内存为 <code>size = end - last</code></li><li>那么在连接关闭的时候，其实我们不用将内存池返回给<code>操作系统</code>，而是直接调用<code>reset_pool</code>将<code>last</code>置为初始位置即可，那么下一个连接就可以继续使用该段内存，没有任何后顾之忧</li></ol><p>就这样就完成了内存的交接，该复用逻辑可以根据自己的场景进行改装，当前内存池实现只是一个<code>通用，可扩展的库</code></p><h2 id="pncall-分配不对齐内存"><a href="#pncall-分配不对齐内存" class="headerlink" title="@pncall 分配不对齐内存"></a>@pncall 分配不对齐内存</h2><p>也就是从内存池上直接<code>顺序</code>从后面获取可分配内存,不用计算字节内存偏移量，这样有好处也有坏处</p><ul><li>好处：不用浪费一定字节的内存</li><li>坏处：当然是可能造成内存碎片</li></ul><h1 id="非内存资源回收机制"><a href="#非内存资源回收机制" class="headerlink" title="非内存资源回收机制"></a>非内存资源回收机制</h1><p>内存池不但能管理内存资源，还可以管理非内存资源等回收，例如文件资源，其他socket资源等</p><p>但是需要用户提前将该资源回收事件<code>提前注册到内存池内</code>，在内存释放的时候统一释放</p><h2 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pool_cleanup_s</span>  <span class="title">pool_cleanup_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pool_cleanup_s</span> &#123;</span></span><br><span class="line">    pool_cleanup_pt   handler;</span><br><span class="line">    <span class="keyword">void</span>                 *data;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>   *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>handler 是一个函数指针，指向用户自定义的函数，当内存清理的时候需要调用该函数指向用户自己的资源回收逻辑</li><li>*data 用户自定义的结构体，当回调用户的函数时，会回传给用户</li><li>*next 所有的自定义事件串联为链表，在内存池回收时统一调用</li></ul><h2 id="clean-up-实现"><a href="#clean-up-实现" class="headerlink" title="@clean_up 实现"></a>@clean_up 实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册清除资源事件，内存回收时会调用该回调函数清除相关自定义资源</span></span><br><span class="line"><span class="function"><span class="keyword">pool_cleanup_t</span> *<span class="title">pool_cleanup_add</span><span class="params">(<span class="keyword">pool_t</span> *p, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = palloc(p, <span class="keyword">sizeof</span>(<span class="keyword">pool_cleanup_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size) &#123;</span><br><span class="line">        c-&gt;data = palloc(p, size);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"></span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>申请一个<code>pool_cleanup_t</code>内存，表示当前资源事件</li><li>如果用户有自定义资源，则申请<code>size</code>内存并返回用户使用，一般都是需要的，不然释放什么呢</li><li>将当前事件链接到链表中，并返回用户该事件提供<code>注册回收函数，和回收数据</code></li></ol><h2 id="clean-up-demo"><a href="#clean-up-demo" class="headerlink" title="@clean_up demo"></a>@clean_up demo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>              fd;</span><br><span class="line">    u_char          *name;</span><br><span class="line">&#125; <span class="keyword">file_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">file_t</span>  *c = data;</span><br><span class="line">    <span class="keyword">if</span>(close(c-&gt;fd) == FILE_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"close file failed\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不需要 free(data),因为内存是在内存池上分配的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span> *c = pool_cleanup_add(pool,<span class="keyword">sizeof</span>(<span class="keyword">file_t</span>));</span><br><span class="line">    ((<span class="keyword">file_t</span> *)c-&gt;data)-&gt;fd = i; </span><br><span class="line">    c-&gt;handler = clean; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义自己的资源结构体</li><li>调用<code>pool_cleanup_add</code> 新增一个事件</li><li>设置自己的资源清理函数，并挂载到事件上</li></ol><p>这样就完成了自定义资源的释放了，在内存最终回收时能正确全部释放</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>内存池没有暴露大内存块的申请接口,<code>palloc_large</code>，因为统一在<code>palloc</code>中判断，如果目标内存大于<code>pool-&gt;max</code>则自动走大内存分配逻辑，不再从<code>pool</code>上分配，而是直接从堆内存中分配，挂载到<code>pool-&gt;large</code>链表上</li><li><code>pool-&gt;max</code> 值的确定,必须要提前调用<code>pagesize()</code>设置全局变量的大小<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    //pagesize 在 palloc.h 中定义的全局变量</span><br><span class="line">    pagesize = getpagesize();</span><br><span class="line">    reutrn 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="zip完整代码"><a href="#zip完整代码" class="headerlink" title="zip完整代码"></a>zip完整代码</h2><p>code: <a href="/package/mem_pool/mempool.zip">mempool.zip</a></p><h2 id="简易预览"><a href="#简易预览" class="headerlink" title="简易预览"></a>简易预览</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"palloc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size,<span class="keyword">uint_t</span> align)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_large</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建内存池，默认分配的内存包含了pool_t结构体的大小，所以实际可分配内存为size - sizeof(pool_t);</span></span><br><span class="line"><span class="function"><span class="keyword">pool_t</span> *<span class="title">create_pool</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line">    <span class="comment">//分配对齐内存</span></span><br><span class="line">    p = mem_memalign(POOL_ALIGNMENT, size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">    p-&gt;d.end = (u_char *) p + size;</span><br><span class="line">    p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    size = size - <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">    p-&gt;max = (size &lt; MAX_ALLOC_FROM_POOL) ? size : MAX_ALLOC_FROM_POOL;</span><br><span class="line"></span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存池销毁</span></span><br><span class="line"><span class="comment">//1.调用所有注册在pool_t上的清理事件</span></span><br><span class="line"><span class="comment">//2.清理large内存块</span></span><br><span class="line"><span class="comment">//3.清理所有pool_t内存块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>          *p, *n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>    *l;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置内存池</span></span><br><span class="line"><span class="comment">//1.销毁所有的large内存块</span></span><br><span class="line"><span class="comment">//2.复位每个pool_t内存块的last起始位置，以前的数据不再生效</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>        *p;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">        p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool-&gt;current = pool;</span><br><span class="line">    pool-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配地址对齐的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">palloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= pool-&gt;max) &#123;</span><br><span class="line">        <span class="keyword">return</span> palloc_small(pool, size, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> palloc_large(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存时不对齐内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">pnalloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= pool-&gt;max) &#123;</span><br><span class="line">        <span class="keyword">return</span> palloc_small(pool, size, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_large(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存主函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size, <span class="keyword">uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = align_ptr(m, ALIGNMENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">size_t</span>) (p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">            p-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_block(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">size_t</span>       psize;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p, *<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="keyword">size_t</span>) (pool-&gt;d.end - (u_char *) pool);</span><br><span class="line"></span><br><span class="line">    m = mem_memalign(POOL_ALIGNMENT, psize);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> = (<span class="keyword">pool_t</span> *) m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.end = m + psize;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m += <span class="keyword">sizeof</span>(<span class="keyword">pool_data_t</span>);</span><br><span class="line">    m = align_ptr(m, ALIGNMENT);</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.last = m + size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配大块内存主函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_large</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>              *p;</span><br><span class="line">    <span class="keyword">uint_t</span>         n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *large;</span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (large-&gt;alloc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n++ &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = palloc_small(pool, <span class="keyword">sizeof</span>(<span class="keyword">pool_large_t</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配对其内存，并挂到large链表上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pmemalign</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> alignment)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>              *p;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *large;</span><br><span class="line"></span><br><span class="line">    p = mem_memalign(alignment, size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = palloc_small(pool, <span class="keyword">sizeof</span>(<span class="keyword">pool_large_t</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回收指定large内存</span></span><br><span class="line"><span class="function"><span class="keyword">int_t</span> <span class="title">pfree</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配对其并初始化该段内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pcalloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p;</span><br><span class="line"></span><br><span class="line">    p = palloc(pool, size);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        memzero(p, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册清除资源事件，内存回收时会调用该回调函数清除相关自定义资源</span></span><br><span class="line"><span class="function"><span class="keyword">pool_cleanup_t</span> *<span class="title">pool_cleanup_add</span><span class="params">(<span class="keyword">pool_t</span> *p, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = palloc(p, <span class="keyword">sizeof</span>(<span class="keyword">pool_cleanup_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size) &#123;</span><br><span class="line">        c-&gt;data = palloc(p, size);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"></span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (HAS_POSIX_MEMALIGN)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mem_memalign</span><span class="params">(<span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>  *p;</span><br><span class="line">    <span class="keyword">int</span> err = posix_memalign(&amp;p, alignment, size);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (HAS_MEMALIGN)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mem_memalign</span><span class="params">(<span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memalign(alignment, size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存池主要作用&quot;&gt;&lt;a href=&quot;#内存池主要作用&quot; class=&quot;headerlink&quot; title=&quot;内存池主要作用&quot;&gt;&lt;/a&gt;内存池主要作用&lt;/h1&gt;&lt;p&gt;nginx里几乎所有内存申请都是从&lt;code&gt;ngx_pool_t&lt;/code&gt;上申请的，nginx
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="pool" scheme="http://wiki.brewlin.com/tags/pool/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>dns协议简介</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/2.%E5%BA%94%E7%94%A8%E5%B1%82/dns/1.dns%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/2.应用层/dns/1.dns协议简介/</id>
    <published>2020-03-06T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整体包结构-header-body"><a href="#整体包结构-header-body" class="headerlink" title="@整体包结构 header+body"></a>@整体包结构 header+body</h2><p>DNS请求与响应的格式是一致的，其整体分为Header、Question、Answer、Authority、Additional5部分，如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-------+-+-------------+</span><br><span class="line">|            Header             | </span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Question           | the question for the name server</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Answer             | RRs answering the question</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Authority          | RRs pointing toward an authority</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  </span><br><span class="line">|            Additional         |  RRs holding additional information</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></p><h2 id="Header-包结构"><a href="#Header-包结构" class="headerlink" title="@Header 包结构"></a>@Header 包结构</h2><p>Header部分是一定有的，长度固定为12个字节；其余4部分可能有也可能没有，并且长度也不一定，这个在Header部分中有指明。Header的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">|                     ID                               |</span><br><span class="line">+-------------------------------------------------------  </span><br><span class="line">|QR|  OPCODE   |AA|TC|RD|RA|    RSV    |      RCODE    |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 QUESTION COUNT                       |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 ANSWER   COUNT                       |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 AUTHORITY SCOUNT                     |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 ADITION COUNT                        |</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>下面说明一下各个字段的含义:</p><ul><li><code>ID</code>：占16位。该值由发出DNS请求的程序生成，DNS服务器在响应时会使用该ID，这样便于请求程序区分不同的DNS响应。</li><li><code>QR</code>：占1位。指示该消息是请求还是响应。0表示请求；1表示响应。</li><li><code>OPCODE</code>：占4位。指示请求的类型，有请求发起者设定，响应消息中复用该值。0表示标准查询；1表示反转查询；2表示服务器状态查询。3~15目前保留，以备将来使用。</li><li><code>AA</code>（Authoritative Answer，权威应答）：占1位。表示响应的服务器是否是权威DNS服务器。只在响应消息中有效。</li><li><code>TC</code>（TrunCation，截断）：占1位。指示消息是否因为传输大小限制而被截断。</li><li><code>RD</code>（Recursion Desired，期望递归）：占1位。该值在请求消息中被设置，响应消息复用该值。如果被设置，表示希望服务器递归查询。但服务器不一定支持递归查询。</li><li><code>RA</code>（Recursion Available，递归可用性）：占1位。该值在响应消息中被设置或被清除，以表明服务器是否支持递归查询。</li><li>Z：占3位。保留备用。</li><li><code>RCODE</code>（Response code）：占4位。该值在响应消息中被设置。取值及含义如下：<ul><li>0：No error condition，没有错误条件；</li><li>1：Format error，请求格式有误，服务器无法解析请求；</li><li>2：Server failure，服务器出错。</li><li>3：Name Error，只在权威DNS服务器的响应中有意义，表示请求中的域名不存在。</li><li>4：Not Implemented，服务器不支持该请求类型。</li><li>5：Refused，服务器拒绝执行请求操作。</li><li>6~15：保留备用。</li></ul></li><li><code>QUESTION COUNT</code>：占16位（无符号）。指明Question部分的包含的实体数量。</li><li><code>ANSWER COUNT</code>：占16位（无符号）。指明Answer部分的包含的RR（Resource Record）数量。</li><li><code>AUTHORITY COUNT</code>：占16位（无符号）。指明Authority部分的包含的RR（Resource Record）数量。</li><li><code>ADDITIONAL COUNT</code>：占16位（无符号）。指明Additional部分的包含的RR（Resource Record）数量。</li></ul><h2 id="Question-包结构"><a href="#Question-包结构" class="headerlink" title="@Question 包结构"></a>@Question 包结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">/      QUESTION NAME 字节数不固定 存储host name         /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 Question type                        |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 question class                       |</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li><code>QNAME</code>：字节数不定，以0x00作为结束符。表示查询的主机名。注意：众所周知，主机名被”.”号分割成了多段标签。在QNAME中，每段标签前面加一个数字，表示接下来标签的长度。比如：<a href="http://www.baidu.com">www.baidu.com</a> 表示成QNAME时，会在”www”前面加上一个字节0x03，”baidu”前面加上一个字节0x04，”com”前面加上一个字节0x03,最后在加0x00表示结尾</li><li><code>QTYPE</code>：占2个字节。表示RR类型，见以上RR介绍；</li><li><code>QCLASS</code>：占2个字节。表示RR分类，见以上RR介绍。</li></ul><h2 id="Answer、Authority、Additional-包结构"><a href="#Answer、Authority、Additional-包结构" class="headerlink" title="@ Answer、Authority、Additional 包结构"></a>@ Answer、Authority、Additional 包结构</h2><p>三个包结构都是一致的，而且字节数都是动态的如下图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">/                 Name                                  /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 type                                  |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 class                                 |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 TTl                                   |</span><br><span class="line">|                                                       |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 len                                   |</span><br><span class="line">+-------------------------------------------------------</span><br><span class="line">/                 data                                  /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure></p><ul><li>NAME：长度不定，可能是真正的数据，也有可能是指针（其值表示的是真正的数据在整个数据中的字节索引数），还有可能是二者的混合（以指针结尾）。若是真正的数据，会以0x00结尾；若是指针，指针占2个字节，第一个字节的高2位为11。算法方式详见具体的go实现</li><li>TYPE：占2个字节。表示RR的类型，如A、CNAME、NS等，见以上RR介绍；</li><li>CLASS：占2个字节。表示RR的分类，见以上RR介绍；</li><li>TTL：占4个字节。表示RR生命周期，即RR缓存时长，单位是秒；</li><li>RDLENGTH：占2个字节。指定RDATA字段的字节数；</li><li>RDATA：即之前介绍的value，含义与TYPE有关，见以上RR介绍。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;整体包结构-header-body&quot;&gt;&lt;a href=&quot;#整体包结构-header-body&quot; class=&quot;headerlink&quot; title=&quot;@整体包结构 header+body&quot;&gt;&lt;/a&gt;@整体包结构 header+body&lt;/h2&gt;&lt;p&gt;DNS请求与响应
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="2.应用层" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/dns/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>dns协议实现</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/2.%E5%BA%94%E7%94%A8%E5%B1%82/dns/2.dns%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/2.应用层/dns/2.dns协议实现/</id>
    <published>2020-03-06T13:28:59.000Z</published>
    <updated>2020-11-12T07:00:35.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装发送包体"><a href="#封装发送包体" class="headerlink" title="@封装发送包体"></a>@封装发送包体</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//protocol/appliction/dns/endpoint.go</span></span><br><span class="line"></span><br><span class="line">h := header.DNS(<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">12</span>))</span><br><span class="line">h.Setheader(e.ID)</span><br><span class="line">h.SetCount(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">h.SetQuestion(e.Domain,<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>首先创建一个Dns的字节数组，默认给12字节大小，因为header头固定为12字节大小</p><h3 id="header头封装"><a href="#header头封装" class="headerlink" title="@header头封装"></a>@header头封装</h3><p>主要是初始化ID  和  一些flag标志位<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h.SetHeader(e.ID)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Setheader</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">Setheader</span><span class="params">(id <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line">d.setID(id)</span><br><span class="line">d.setFlag(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//setID 将前两个字节 初始化id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span><span class="title">setID</span><span class="params">(id <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//set id</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ID:], id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置标志位,都给默认值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetFlag</span></span><br><span class="line"><span class="comment">//QR 表示请求还是响应</span></span><br><span class="line"><span class="comment">//OPCODE 1表示反转查询；2表示服务器状态查询。3~15目前保留，以备将来使用</span></span><br><span class="line"><span class="comment">//AA 表示响应的服务器是否是权威DNS服务器。只在响应消息中有效。</span></span><br><span class="line"><span class="comment">//TC 指示消息是否因为传输大小限制而被截断</span></span><br><span class="line"><span class="comment">//RD 该值在请求消息中被设置，响应消息复用该值。如果被设置，表示希望服务器递归查询。但服务器不一定支持递归查询</span></span><br><span class="line"><span class="comment">//RA 。该值在响应消息中被设置或被清除，以表明服务器是否支持递归查询。</span></span><br><span class="line"><span class="comment">//Z 保留备用</span></span><br><span class="line"><span class="comment">//RCODE: 该值在响应消息中被设置。取值及含义如下：</span></span><br><span class="line"><span class="comment">//0：No error condition，没有错误条件；</span></span><br><span class="line"><span class="comment">//1：Format error，请求格式有误，服务器无法解析请求；</span></span><br><span class="line"><span class="comment">//2：Server failure，服务器出错。</span></span><br><span class="line"><span class="comment">//3：Name Error，只在权威DNS服务器的响应中有意义，表示请求中的域名不存在。</span></span><br><span class="line"><span class="comment">//4：Not Implemented，服务器不支持该请求类型。</span></span><br><span class="line"><span class="comment">//5：Refused，服务器拒绝执行请求操作。</span></span><br><span class="line"><span class="comment">//6~15：保留备用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">setFlag</span><span class="params">(QR <span class="keyword">uint16</span>, OPCODE <span class="keyword">uint16</span>, AA <span class="keyword">uint16</span>, TC <span class="keyword">uint16</span>, RD <span class="keyword">uint16</span>, RA <span class="keyword">uint16</span>, RCODE <span class="keyword">uint16</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//set flag</span></span><br><span class="line">op :=  QR&lt;&lt;<span class="number">15</span> + OPCODE&lt;&lt;<span class="number">11</span> + AA&lt;&lt;<span class="number">10</span> + TC&lt;&lt;<span class="number">9</span> + RD&lt;&lt;<span class="number">8</span> + RA&lt;&lt;<span class="number">7</span> + RCODE</span><br><span class="line">binary.BigEndian.PutUint16(d[OP:],op)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里包头header4字节就算封装好了</p><h3 id="Count-封装"><a href="#Count-封装" class="headerlink" title="@Count 封装"></a>@Count 封装</h3><p>因为是查询包体，只需要设置query count即可，<code>现在只支持单条查询</code>，所以默认给1<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetCount</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">SetCount</span><span class="params">(qd,an,ns,qa <span class="keyword">uint16</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//SetQdcount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[QDCOUNT:], qd)</span><br><span class="line"><span class="comment">//SetAncount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ANCOUNT:] ,an)</span><br><span class="line"><span class="comment">//SetNscount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[NSCOUNT:],ns)</span><br><span class="line"><span class="comment">//SetQAcount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ARCOUNT:],qa)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里每个标志位占2字节，总共8字节，加上上面的header4字节 总共12字节</p><h3 id="Question-封装"><a href="#Question-封装" class="headerlink" title="@Question 封装"></a>@Question 封装</h3><p>这里主要是将需要查询的域名写入包体中，这里有个地方需要计算:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DNS)</span><span class="title">SetQuestion</span><span class="params">(domain <span class="keyword">string</span>,qtype,qclass <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> _,b := <span class="keyword">range</span> d.getDomain(domain) &#123;</span><br><span class="line">*d = <span class="built_in">append</span>((*d),b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//d.setDomain(domain)</span></span><br><span class="line">q := DNSQuestion&#123;</span><br><span class="line">QuestionType:  qtype,</span><br><span class="line">QuestionClass: qclass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">binary.Write(&amp;buffer,binary.BigEndian,*d)</span><br><span class="line">binary.Write(&amp;buffer,binary.BigEndian,q)</span><br><span class="line">*d = buffer.Bytes()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DNS)</span><span class="title">getDomain</span><span class="params">(domain <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">buffer   bytes.Buffer</span><br><span class="line">segments []<span class="keyword">string</span> = strings.Split(domain, <span class="string">"."</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> _, seg := <span class="keyword">range</span> segments &#123;</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, <span class="keyword">byte</span>(<span class="built_in">len</span>(seg)))</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, []<span class="keyword">byte</span>(seg))</span><br><span class="line">&#125;</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, <span class="keyword">byte</span>(<span class="number">0x00</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buffer.Bytes()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>首先计算待查询的域名动态字节并返回</li><li>最后在封装<code>DNSQuestion</code>4字节追加到末尾</li><li>这里基本完成了所有的请求包的构建</li></ul><h3 id="发送数据包"><a href="#发送数据包" class="headerlink" title="@发送数据包"></a>@发送数据包</h3><p>dns是基于dns协议查询，直接将上面进行udp发送即可<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sendQuery udp query dns</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">sendQuery</span> <span class="params">()</span> <span class="params">( *[]header.DNSResource ,error )</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := e.c.Connect();err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := e.c.Write(*e.req) ; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.parseResp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析响应包体"><a href="#解析响应包体" class="headerlink" title="@解析响应包体"></a>@解析响应包体</h2><p>主要就是接收udp响应数据，注意：==<code>udp当前实现是 如果对端不可访问。在read时才会接收到icmp错误控制消息</code>==<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parseResp</span></span><br><span class="line"><span class="comment">//解析响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">parseResp</span><span class="params">()</span> <span class="params">(*[]header.DNSResource,error)</span></span>&#123;</span><br><span class="line">rsp,err := e.c.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line">p := header.DNS(rsp)</span><br><span class="line">e.resp = &amp;p</span><br><span class="line">e.answer = p.GetAnswer(e.Domain)</span><br><span class="line"><span class="keyword">return</span> e.parseAnswer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取Answer包体"><a href="#获取Answer包体" class="headerlink" title="@获取Answer包体"></a>@获取Answer包体</h3><p>主要是计算三个<code>count</code>计数总和，判断总共有多少条响应记录</p><p>剩下的是挨着字节数遍历读取即可<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetAnswer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">GetAnswer</span><span class="params">(domain <span class="keyword">string</span>)</span> *[]<span class="title">DNSResource</span></span> &#123;</span><br><span class="line"><span class="comment">//answer 起始地址</span></span><br><span class="line">asLen := DOMAIN + <span class="built_in">len</span>(d.getDomain(domain)) + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">answer := []DNSResource&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; (<span class="keyword">int</span>(d.GetANCount() + d.GetNSCount() + d.GetARCount())) ;i ++ &#123;</span><br><span class="line">rs := DNSResource&#123;&#125;</span><br><span class="line"><span class="comment">//判断是不是指针 pointer地址</span></span><br><span class="line"><span class="keyword">if</span> checkP := d[asLen]; checkP &gt;&gt; <span class="number">6</span>  == <span class="number">3</span> &#123;</span><br><span class="line"><span class="comment">//pointer := (d[asLen] &amp; 0x3F &lt;&lt; 8) + d[asLen+1]</span></span><br><span class="line">rs.Name = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.Type = DNSResourceType(binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>]))</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.Class = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.TTL = binary.BigEndian.Uint32(d[asLen:asLen+<span class="number">4</span>])</span><br><span class="line">asLen += <span class="number">4</span></span><br><span class="line">rs.RDlen = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.RData = d[asLen:asLen+<span class="keyword">int</span>(rs.RDlen)]</span><br><span class="line">asLen += <span class="keyword">int</span>(rs.RDlen)</span><br><span class="line">answer = <span class="built_in">append</span>(answer,rs)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="解析Answer-address"><a href="#解析Answer-address" class="headerlink" title="@解析Answer address"></a>@解析Answer address</h3><p>这里主要解析A类型  和Cname类型，基本满足场景了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">parseAnswer</span><span class="params">()</span><span class="params">(*[]header.DNSResource,error)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(*e.answer) ; i++ &#123;</span><br><span class="line"><span class="keyword">switch</span> (*e.answer)[i].Type &#123;</span><br><span class="line"><span class="keyword">case</span> header.A:</span><br><span class="line">(*e.answer)[i].Address = e.parseAName((*e.answer)[i].RData)</span><br><span class="line"><span class="keyword">case</span> header.CNAME:</span><br><span class="line">(*e.answer)[i].Address = e.parseCName((*e.answer)[i].RData)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.answer,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装发送包体&quot;&gt;&lt;a href=&quot;#封装发送包体&quot; class=&quot;headerlink&quot; title=&quot;@封装发送包体&quot;&gt;&lt;/a&gt;@封装发送包体&lt;/h2&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="2.应用层" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/dns/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/tags/dns/"/>
    
  </entry>
  
</feed>
