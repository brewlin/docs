<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brewlin&#39;s Wiki</title>
  
  <subtitle>found everthing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.brewlin.com/"/>
  <updated>2020-04-14T15:52:56.687Z</updated>
  <id>http://wiki.brewlin.com/</id>
  
  <author>
    <name>brewlin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux_内核_链表偏移量技巧</title>
    <link href="http://wiki.brewlin.com/wiki/blog/linuxos/linux_%E5%86%85%E6%A0%B8_%E9%93%BE%E8%A1%A8%E5%81%8F%E7%A7%BB%E9%87%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://wiki.brewlin.com/wiki/blog/linuxos/linux_内核_链表偏移量技巧/</id>
    <published>2020-04-10T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="container-of-定义"><a href="#container-of-定义" class="headerlink" title="@container_of 定义"></a>@container_of 定义</h1><p>在看<code>linux_os_link.c</code>内核链表的时候，看到的一个高级技巧，<code>通过结构体偏移量</code>定位实际对象的指针地址</p><p>定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) (&#123;\</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="title">typeof</span><span class="params">( ((type *)<span class="number">0</span>)-&gt;member )</span> *__mptr </span>= (ptr);\</span><br><span class="line">        (type *)( (<span class="keyword">char</span> *)__mptr - __offsetof(type,member) );&#125;)</span><br></pre></td></tr></table></figure></p><p>总的来说<code>ptr</code>一个<code>type</code>对象里面的<code>member</code>成员指针，现在如果你只有<code>member</code>成员的指针，但是<code>你想拿到type对象的地址</code>那么container_of就发挥了重要作用，如下图所示:<br><img src="/images/blog/linuxos/linux_link_os.png" alt="image"><br>整个链表通过node指针串联起来，所以能够想到，当我们通过<code>*node</code>指针遍历所有的节点时，<code>我们怎么获取到整个对象的地址呢</code>答案当然是上面提到的<code>container_of</code>技巧:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假如们已经遍历到了第一个node节点</span></span><br><span class="line">link_node *node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在我们想获取 struct test对象指针则可以这样</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span> *<span class="title">obj</span> = <span class="title">container_of</span>(<span class="title">node</span>,<span class="title">struct</span> <span class="title">test</span>,<span class="title">node</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在obj 就是模板对象的指针了，是不是很方便呢，</span></span><br></pre></td></tr></table></figure></p><p>当然这种技巧主要还是为了节省内存，你也可以在node结构体中加入一个自定义的结构体指针指向<code>struct test</code>即可，就不用通过偏移量定位了</p><p>通过<code>container_of</code>显然可以节省一个指针内存的空间了，这在很多高性能场景必然发挥了重要作用</p><h2 id="container-of-解析（一）"><a href="#container-of-解析（一）" class="headerlink" title="container_of 解析（一）"></a>container_of 解析（一）</h2><p>我们先来看第一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define container_of(ptr, type, member) (&#123;\</span><br><span class="line">        const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);\</span><br></pre></td></tr></table></figure></p><ol><li><code>((type *)0)-&gt;memeber</code> 通过将<code>0X00</code>地址转换为<code>type</code>自定义类型，再访问对应的member成员</li><li><code>typeof</code> 编译期间获取<code>member</code>成员类型，其实就是获取<code>node</code>节点的结构体类型</li><li><code>const node *_mptr = (ptr)</code> 首先ptr是链表的node节点指针，这行代码主要就是单独定义一个node指针执行<code>ptr</code>而已</li></ol><h2 id="container-of-解析-二"><a href="#container-of-解析-二" class="headerlink" title="container_of 解析 (二)"></a>container_of 解析 (二)</h2><p>这行代码是实际的偏移量计算代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(type *)( (char *)__mptr - __offsetof(type,member) );&#125;)</span><br></pre></td></tr></table></figure></p><ol><li><code>(char *)_mptr</code> 我们知道指针的运算受限于<code>指针类型</code>，如果指针类型为<code>int</code>那么<code>对int*指针 +1，则地址可能位移了4个字节</code>,所以强制转换为<code>char *</code> 保证更加精确</li><li><code>_offsetof(type,member)</code> 计算出成员member相对于结构体对象的内存偏移量</li><li><code>mptr - offsetof(type,membr)</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//加入有一个结构体如下</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    char a,</span><br><span class="line">    char b,</span><br><span class="line">    link_node *node;</span><br><span class="line">&#125;test;</span><br><span class="line"></span><br><span class="line">//mptr 就是node指针</span><br><span class="line">//那么有如下计算</span><br><span class="line">offsetof(test,node) = 2;</span><br><span class="line">//因为node之前有两个字节，所以node相对于test结构体的偏移量为2</span><br><span class="line"></span><br><span class="line">所以mptr-offsetof(test,node)  = test结构体的指针地址</span><br></pre></td></tr></table></figure></li></ol><h1 id="offsetof-定义"><a href="#offsetof-定义" class="headerlink" title="@offsetof 定义"></a>@offsetof 定义</h1><p>offsetof可以用于计算某个成员相对于结构体对应的偏移量，这样当我们能拿到<code>任意成员地址时</code>，都能获取到结构体对象地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER</span><br></pre></td></tr></table></figure></p><ol><li><code>( (TYPE *)0</code>) 将零转型为TYPE类型指针;</li><li><code>((TYPE *)0)-&gt;MEMBER</code> 访问结构中的数据成员;</li><li><code>&amp;( ( (TYPE *)0 )-&gt;MEMBER )</code>取出数据成员的地址;</li><li><code>(size_t)(&amp;(((TYPE*)0)-&gt;MEMBER))</code>结果转换类型.巧妙之处在于将<code>0转换成(TYPE*)</code>，结构以内存空间首地址<code>0作为起始地址</code>，则成员地址自然为<code>偏移地址</code>；</li></ol><h1 id="php扩展中的技巧场景"><a href="#php扩展中的技巧场景" class="headerlink" title="php扩展中的技巧场景"></a>php扩展中的技巧场景</h1><p>在通过c++开发对应php扩展<code>class</code>时，会有这样的场景，对应php扩展类实例化的时候通常对应一个<code>c++类</code>，那么就会存在<code>php-class</code>对应一个<code>c++-class</code>关系</p><p>那么他们怎么关联的呢？可能最容易想到的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zend_declare_property_string(lib_co_server_ce_ptr, ZEND_STRL(&quot;obj&quot;), &quot;&quot;, ZEND_ACC_PRIVATE)</span><br><span class="line"></span><br><span class="line">Test *test = new Test();</span><br><span class="line">zend_update_property_string(lib_co_server_ce_ptr, getThis(), ZEND_STRL(&quot;obj&quot;), Z_VAL_P(test));</span><br></pre></td></tr></table></figure></p><p>总的来说就是在php属性中增加一个私有成员变量，将实例化的c++对象赋值给php成员变量</p><p>这种做法总的来说是灾难的，php内核不保证会做什么其他操作，非常不安全，还有就是每次访问对应的<code>c++对象</code>都需要进行读取操作，非常不友好</p><h2 id="通过偏移量来绑定对应对象"><a href="#通过偏移量来绑定对应对象" class="headerlink" title="通过偏移量来绑定对应对象"></a>通过偏移量来绑定对应对象</h2><p>这种方式也是官方推荐的方式，健全、安全、且友好</p><p>首先定义主体结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    Server *serv;</span><br><span class="line">    zend_object std;</span><br><span class="line">&#125;serv</span><br></pre></td></tr></table></figure></p><p>可以看出 std成员就是php对象实际指针，serv成员就是c++对象指针</p><p>定义对象生成事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static serv* lib_server_fetch_object(zend_object *obj)</span><br><span class="line">&#123;</span><br><span class="line">    return (serv *)((char *)obj - lib_server_handlers.offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static zend_object* lib_server_create_object(zend_class_entry *ce)</span><br><span class="line">&#123;</span><br><span class="line">    serv *serv_t = (serv *)ecalloc(1, sizeof(serv) + zend_object_properties_size(ce));</span><br><span class="line">    zend_object_std_init(&amp;serv_t-&gt;std, ce);</span><br><span class="line">    object_properties_init(&amp;serv_t-&gt;std, ce);</span><br><span class="line">    serv_t-&gt;std.handlers = &amp;lib_server_handlers;</span><br><span class="line">    return &amp;serv_t-&gt;std;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>在php层面<code>new serv()</code>时，会调用<code>lib_server_create_object</code>函数，且函数内部我们<code>不是直接去创建一个zend_object返回</code>,而是创建一个<code>serv</code></li><li>当我们想要获取c++对象时会调用<code>fetch_object</code>函数传入php对象指针<code>obj</code>其实就是上面的那个<code>zend_object std</code>，所以根据上面的技巧我们显然可以通过偏移量来获得c++指针的地址</li><li>结构体地址 也可以当做是第一个成员的地址<code>这是c语言</code>内存布局的特性，所以通过这个技巧就可以巧妙绑定c++对象以及php对象指针</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;container-of-定义&quot;&gt;&lt;a href=&quot;#container-of-定义&quot; class=&quot;headerlink&quot; title=&quot;@container_of 定义&quot;&gt;&lt;/a&gt;@container_of 定义&lt;/h1&gt;&lt;p&gt;在看&lt;code&gt;linux_os
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="linuxos" scheme="http://wiki.brewlin.com/categories/blog/linuxos/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="os" scheme="http://wiki.brewlin.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://wiki.brewlin.com/wiki/c-ext/thread/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://wiki.brewlin.com/wiki/c-ext/thread/线程池/</id>
    <published>2020-03-31T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$pool = <span class="keyword">new</span> Lib\Thread\Pool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">$ref = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//future = Lib\Thread\Pool\Future</span></span><br><span class="line"><span class="comment">//future-&gt;get() 可以阻塞返回结果</span></span><br><span class="line">$future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">use</span><span class="params">(&amp;$ref)</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    var_dump($ref);</span><br><span class="line">&#125;);</span><br><span class="line">$future-&gt;get();</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="construct-创建线程数量"><a href="#construct-创建线程数量" class="headerlink" title="@construct 创建线程数量"></a>@construct 创建线程数量</h2><p>构造函数需要传入线程创建的参数，在初始化就默认创建固定的线程数量</p><h2 id="add-投递执行任务"><a href="#add-投递执行任务" class="headerlink" title="@add 投递执行任务"></a>@add 投递执行任务</h2><p><code>add()</code> 函数接受一个php闭包函数，可通过引用的方式附加传入参数</p><p>投递后如果有线程空闲，立即执行该任务</p><h2 id="线程池销毁-与释放流程"><a href="#线程池销毁-与释放流程" class="headerlink" title="@线程池销毁 与释放流程"></a>@线程池<code>销毁</code> 与释放流程</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $pool = <span class="keyword">new</span> Lib\Thread\Pool(<span class="number">4</span>);</span><br><span class="line">    $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$pool</code> 的生命周期在test函数内，如果函数调用结束，那么触发<code>$pool</code>垃圾回收，且该类为自定义类型，所以回收会触发如下线程回收流程:</p><ul><li>php : <code>$pool-&gt;destruct()</code>;    php对象释放</li><li>php : <code>$pool-&gt;free_object()</code>; php对象底层扩展进行释放内存处理</li><li>c++ : <code>pool-&gt;~pool()</code>  调用c++线程池对象析构函数</li><li><p>c++ : 加锁改变线程状态 并唤醒所有线程，等待回收线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool::~ThreadPool()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(queue_mu)</span></span>;</span><br><span class="line">        <span class="built_in">stop</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cond.notify_all();</span><br><span class="line">    <span class="keyword">for</span>(thread &amp;w : workers)&#123;</span><br><span class="line">        w.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>所以线程池的生命周期，依赖php对象实例，如果需要常驻运行，则需要将$pool 设置为全局或者静态变量</code></p></li></ul><h2 id="Lib-Thread-Pool-Future"><a href="#Lib-Thread-Pool-Future" class="headerlink" title="@Lib\Thread\Pool\Future"></a>@<code>Lib\Thread\Pool\Future</code></h2><p>投递任务后立即返回一个future包装器，可用于阻塞等待任务结束获取返回值，转换为同步阻塞程序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="furture-gt-get-等待该异步任务处理结束"><a href="#furture-gt-get-等待该异步任务处理结束" class="headerlink" title="@furture-&gt;get() 等待该异步任务处理结束"></a>@<code>furture-&gt;get()</code> 等待该异步任务处理结束</h3><p>该函数用于等待，当前线程执行的任务结束,并获取返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$future = $pool-&gt;add(function()&#123;</span><br><span class="line">    return [1,3,4,5];</span><br><span class="line">&#125;);</span><br><span class="line">$res = $future-&gt;get();</span><br><span class="line">//res = [1,3,4,5]</span><br></pre></td></tr></table></figure></p><h3 id="异步任务demo"><a href="#异步任务demo" class="headerlink" title="@异步任务demo"></a>@异步任务demo</h3><p>将100个任务全部投递到线程排队处理，然后当前继续执行其他任务<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">100</span> ;$i ++)&#123;</span><br><span class="line">    $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里继续执行其他任务</span></span><br></pre></td></tr></table></figure></p><h3 id="同步任务demo"><a href="#同步任务demo" class="headerlink" title="@同步任务demo"></a>@同步任务demo</h3><p>将100个任务投递到线程处理，并逐一等待每一任务执行完毕<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">100</span> ;$i ++)&#123;</span><br><span class="line">    $future = $pool-&gt;add(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">use</span><span class="params">($i)</span></span>&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> $i;</span><br><span class="line">    &#125;);</span><br><span class="line">    var_dump($future-&gt;get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里继续阻塞，直到上面100s过期后任务处理完毕</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="c-ext" scheme="http://wiki.brewlin.com/categories/c-ext/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/categories/c-ext/thread/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="thread" scheme="http://wiki.brewlin.com/tags/thread/"/>
    
      <category term="pool" scheme="http://wiki.brewlin.com/tags/pool/"/>
    
  </entry>
  
  <entry>
    <title>ngx_内存池封装</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/nginx_%E5%86%85%E5%AD%98%E6%B1%A0%E5%B0%81%E8%A3%85/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/nginx_内存池封装/</id>
    <published>2020-03-10T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存池主要作用"><a href="#内存池主要作用" class="headerlink" title="内存池主要作用"></a>内存池主要作用</h1><p>nginx里几乎所有内存申请都是从<code>ngx_pool_t</code>上申请的，nginx封装了自己的内存池技术提升性能主要有三点好处，<code>内存分配速度快</code>,<code>防止内存碎片</code>,<code>方便内存回收，防止内存泄漏</code></p><h2 id="内存分配速度快"><a href="#内存分配速度快" class="headerlink" title="内存分配速度快"></a>内存分配速度快</h2><p>主要因为c没有垃圾回收机制，没有gc，并且区分堆内存/栈内存。且堆内存上的数据申请后就必须由开发者手动回收，如果不释放则会内存一直堆积，直到系统资源消耗殆尽，系统回收进程</p><p>如果许许多多的变量创建并且都是通过直接像系统申请(<code>malloc</code>)的话，那么整体性能肯定会有所影响和下降，内存池是怎么发挥作用的呢：其实就是预分配的操作，创建内存池的时候首先向操作系统申请一块适当的内存(<code>16k</code>的样子)。在程序运行期间其他所有的内存申请都通过内存池去获取，直接用该段由内存池返回的内存即可</p><p>减少了向操作系统申请的次数</p><h2 id="防止内存碎片"><a href="#防止内存碎片" class="headerlink" title="防止内存碎片"></a>防止内存碎片</h2><p>摘自网友们的说法：</p><p>内存碎片的经典症状是，即使您似乎有足够的可用内存，您也尝试分配一个大块而您却无法分配。另一个可能的结果是该进程无法将内存释放回OS（因为从OS分配的所有块中仍然有一些对象在使用中，即使这些块现在几乎未使用）。</p><h2 id="方便内存回收，防止内存泄漏"><a href="#方便内存回收，防止内存泄漏" class="headerlink" title="方便内存回收，防止内存泄漏"></a>方便内存回收，防止内存泄漏</h2><p>这个特性是利好的，想像一下函数<code>A</code>里分配了一块内存，但是<code>b,c,d,e,ft...</code>等等其他地方都有调用，而且每个功能片区都有成百行代码，可想而知，该内存由谁来释放，或者多次释放将是多么灾难的事情</p><p>nginx的内存池其实主要是针对场景的。因为大多数程序都是有生命周期的，例如<code>http</code>请求到来，在整个处理期间可能会异步处理很多过程，分配很多数据，那么终会有连接断开和结束的时候，那么这个时候内存池的技术就发挥了非常重要的作用，<code>连接到来创建内存池 - 结束连接统一销毁所有内存</code>：中间其他所有的操作压根儿不用关系内存释放的问题，只管申请，想想都是非常轻松的事情<br><img src="/images/blog/nginx/pool.png" alt="image"><br>在连接期间各种模块之间的调用远比这个要复杂的多，要是每个地方都需要关注上下文将是多么灾难的事情</p><p><code>引入内存池后只需要两行代码即可消除大部分安全隐患</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool_t *pool = pool_create(default);</span><br><span class="line"></span><br><span class="line">//.....do  lot of things</span><br><span class="line"></span><br><span class="line">pool_destory(pool);</span><br></pre></td></tr></table></figure></p><h1 id="nginx内存池定义"><a href="#nginx内存池定义" class="headerlink" title="nginx内存池定义"></a>nginx内存池定义</h1><h2 id="相关定义结构体"><a href="#相关定义结构体" class="headerlink" title="相关定义结构体"></a>相关定义结构体</h2><h3 id="pool-t-内存池指针"><a href="#pool-t-内存池指针" class="headerlink" title="@pool_t 内存池指针"></a>@pool_t 内存池指针</h3><p>pool_t是一个链表头主结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct pool_s &#123;</span><br><span class="line">    pool_data_t      d;</span><br><span class="line">    size_t           max;</span><br><span class="line">    pool_t           *current;</span><br><span class="line">    pool_large_t     *large;</span><br><span class="line">    pool_cleanup_t   *cleanup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>新创建的内存池默认可用内存大小其实是这样计算的<code>size - sizeof(pool_t) = 可用内存大小</code>,因为总体内存池的首地址就是pool_t的地址</p><ul><li><p>pool_data_t </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当内存不够用，需要扩容时，会将新申请的内存通过pool_data_t-&gt;next串联起来，组成一个链表</span><br></pre></td></tr></table></figure></li><li><p>size_t max 判断待申请的内存属于大块还是小块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小块内存则直接在当前内存池返回一段可用内存即可</span><br><span class="line"></span><br><span class="line">打开内存需要单独向操作系统申请，并挂载到当前的内存池pool_large_t large的链表上</span><br></pre></td></tr></table></figure></li><li><p>current 指向当前可用内存池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为内存池扩容的机制是，重新生成一块内存并通过链表挂载一起，那么current就显得格外重要，它直接指向新生成的可用内存池即可</span><br></pre></td></tr></table></figure></li><li><p>large 挂载大块内存的链表，如上第2点所说</p></li><li>cleanup 内存池还有一个机制就是可以<code>管理非内存资源的释放</code>，后文详说</li></ul><h3 id="pool-data-t-链表"><a href="#pool-data-t-链表" class="headerlink" title="@pool_data_t 链表"></a>@pool_data_t 链表</h3><p>主要作用就是作为<code>pool_t</code>的一部分，将所有内存池串联成为一个链表，最后释放时遍历链表释放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    pool_t               *next;</span><br><span class="line">    uint_t               failed;</span><br><span class="line">&#125; pool_data_t;</span><br></pre></td></tr></table></figure></p><ul><li>last 指向可以用内存的首地址</li><li>end 指向内存池尾部地址</li><li>next指向 下一块内存池地址</li><li>failed 比较重要<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 当前内存池不够分配使用时，会新申请一个内存池，并通过next挂在链表上</span><br><span class="line">2. 同时failed += 1, 但是current指针不变</span><br><span class="line">3. 那么下次依然会去上面那个内存池继续分配，如果依然不满足条件，failed += 1；</span><br><span class="line">4. 直到failed 值 大于4时，内存池的current指向下一个内存池，实现完全转移到新的内存池</span><br></pre></td></tr></table></figure></li></ul><h3 id="pool-large-t-大内存块链表"><a href="#pool-large-t-大内存块链表" class="headerlink" title="@pool_large_t 大内存块链表"></a>@pool_large_t 大内存块链表</h3><p>这个比较容易理解，当待分配内存大于<code>pool-&gt;max</code>时，则向操作系统分配大内存块挂到<code>pool-&gt;large</code>链表上，最后在同一删除，也可以自己手动删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct pool_large_s  pool_large_t;</span><br><span class="line">struct pool_large_s &#123;</span><br><span class="line">    pool_large_t     *next;</span><br><span class="line">    void             *alloc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>alloc 实际内存地址</li></ul><h2 id="内存池主要接口"><a href="#内存池主要接口" class="headerlink" title="内存池主要接口"></a>内存池主要接口</h2><ul><li><code>create_pool(size_t size)</code> 创建一块内存池</li><li><code>desotry_pool(pool_t *pool)</code> 释放回收所有相关内存</li><li><code>reset_pool(pool_t *pool)</code>  复位内存池</li><li><code>palloc(pool_t *poo,size_t size)</code> 从内存池分配内存，默认字节对齐</li><li><code>pnalloc(pool_t *poo,size_t size)</code> 从内存池分配内存,不对齐字节</li><li><code>pmemalign(pool_t *pool,size_t size,size_t alignment)</code> 分配专用大块内存</li><li><code>pfree(pool_t *pool,void *p)</code> 回收大块内存</li><li><code>pool_cleanup_add(pool_t *p,size_t size)</code> 增加自定资源释放handler</li></ul><p>其实总的来说就3个接口比较重要<code>create_pool</code>,<code>destory_pool</code>,<code>palloc</code>，分别是创建内存池，销毁内存池，申请内存，就可以了</p><p>其他地方只需要调用<code>palloc</code>申请内存就行，<code>无需关系释放问题</code>,所以其他接口也不需要太关注</p><h1 id="内存池主要接口实现"><a href="#内存池主要接口实现" class="headerlink" title="内存池主要接口实现"></a>内存池主要接口实现</h1><h2 id="create-pool-创建内存池实现"><a href="#create-pool-创建内存池实现" class="headerlink" title="@create_pool 创建内存池实现"></a>@create_pool 创建内存池实现</h2><p>nginx内存池的申请场景主要是针对每个连接而言的，例如针对<code>http</code>连接有如下的条件:</p><ol><li>未每个http连接申请一个内存池,该内存池指针会随着http的生命周期一直存在</li><li>每个连接期间通过该pool进行内存申请，<code>无需关注释放</code></li><li>http生命周期结束，也就是tcp连接关闭的时候释放内存池<code>pool_t *pool</code>释放内存完成任务</li></ol><p>所以基本上每个请求都是自带自己的内存池，这样减少了内存释放不干净的风险（大概是吧，有太多原因这样做了）。</p><p>还有就是每个连接池默认大小为<code>deafult_pool_size = 16k</code>，所以不用担心每个连接都申请内存这种做法会太耗内存，实际内存会在使用中进行扩容</p><p>实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pool_t</span>  *p;</span><br><span class="line"> <span class="comment">//分配对齐内存</span></span><br><span class="line"> p = memalign(POOL_ALIGNMENT, <span class="built_in">size</span>);</span><br><span class="line"> <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line"> p-&gt;d.<span class="built_in">end</span> = (u_char *) p + <span class="built_in">size</span>;</span><br><span class="line"> p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line"> p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">size</span> = <span class="built_in">size</span> - <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line"> p-&gt;<span class="built_in">max</span> = (<span class="built_in">size</span> &lt; MAX_ALLOC_FROM_POOL) ? <span class="built_in">size</span> : MAX_ALLOC_FROM_POOL;</span><br><span class="line"></span><br><span class="line"> p-&gt;current = p;</span><br><span class="line"> p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line"> p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure></p><ol><li>分配对其内存，默认16k</li><li>总体可分配内存=  <code>16k - sizeof(pool_t)</code></li><li>d.last指针指向可用内存</li><li>d.end指针指向内存池末尾</li><li>d.failed 归 0 </li><li>current指向当前内存池，因为初始化的就是当前可用内存池</li><li>其他都置为空指针</li></ol><h2 id="destory-pool-回收内存池实现"><a href="#destory-pool-回收内存池实现" class="headerlink" title="@destory_pool 回收内存池实现"></a>@destory_pool 回收内存池实现</h2><p>一般是在连接的生命周期结束<code>close</code>的时候销毁内存池，那么内存池会<code>逐个遍历内存池链表</code>挨个释放所有的内存，包括<code>小内存块</code>,<code>大内存块</code>,<code>释放自定义资源</code></p><p>代码实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存池销毁</span></span><br><span class="line"><span class="comment">//1.调用所有注册在pool_t上的清理事件</span></span><br><span class="line"><span class="comment">//2.清理large内存块</span></span><br><span class="line"><span class="comment">//3.清理所有pool_t内存块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>          *p, *n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>    *l;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>遍历自定义事件，清除所有的自定义<code>非内存资源</code>：如文件fd</li><li>遍历大内存块，回收所有大内存块数据</li><li>遍历小内存块，回收所有小内存块，相当简洁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为pool_t *pool;就是整个小内存块首地址，所以直接</span><br><span class="line">free(p) 即可，非常灵活</span><br></pre></td></tr></table></figure></li></ol><h2 id="palloc-内存分配实现"><a href="#palloc-内存分配实现" class="headerlink" title="@palloc 内存分配实现"></a>@palloc 内存分配实现</h2><p>作为使用场景最多的接口，提供分配内存，并内部自动管理内存，无需手动释放</p><p>该接口分配的内存默认是字节对齐，为了减少内存碎片而设计</p><p>代码实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   u_char      *m;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = align_ptr(m, ALIGNMENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">size_t</span>) (p-&gt;d.<span class="built_in">end</span> - m) &gt;= <span class="built_in">size</span>) &#123;</span><br><span class="line">            p-&gt;d.last = m + <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_block(pool, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>获取当前可分配内存池的指针<code>pool-&gt;current</code></li><li>遍历当前内存池链表，找到可容纳的内存并直接返回，如果不满足则进行<code>第3步</code></li><li><p>说明当前内存池空间不够，需要向操作系统申请内存<code>palloc_block</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">size_t</span>       psize;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p, *<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="keyword">size_t</span>) (pool-&gt;d.<span class="built_in">end</span> - (u_char *) pool);</span><br><span class="line"></span><br><span class="line">    m = memalign(POOL_ALIGNMENT, psize);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> = (<span class="keyword">pool_t</span> *) m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.<span class="built_in">end</span> = m + psize;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m += <span class="keyword">sizeof</span>(<span class="keyword">pool_data_t</span>);</span><br><span class="line">    m = align_ptr(m, ALIGNMENT);</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.last = m + <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向操作系统分配一块和之前内存池一样大小(<code>psize</code>)的内存</p></li><li>初始化新申请的<code>pool_t</code>内存池结构</li><li>遍历之前所有可用内存池链表，将失败次数<code>failed</code>+1，如果大于4，则将<code>current</code>可用内存池指针下移，丢弃该不可用内存池</li><li>将新申请的小块内存池挂载到整个内存池链表的末尾，完成内存分配逻辑,返回可用内存空间(<code>return m</code>)给调用方</li></ol><h1 id="内存池其他接口相关"><a href="#内存池其他接口相关" class="headerlink" title="内存池其他接口相关"></a>内存池其他接口相关</h1><h2 id="reset-pool-复位内存池"><a href="#reset-pool-复位内存池" class="headerlink" title="@reset_pool 复位内存池"></a>@reset_pool 复位内存池</h2><p>该接口可能用的比较少，但是却对于内存复用非常有用，试想一下，如果每个连接来都<code>申请内存、结束释放内存</code>,如果并发量大，是不是可以有优化的空间呢，答案当然是yes</p><p>那继续来讲讲内存池可分配的原理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;</span><br><span class="line">    u_char               *end;</span><br><span class="line">    pool_t               *next;</span><br><span class="line">    uint_t               failed;</span><br><span class="line">&#125; pool_data_t;</span><br><span class="line"></span><br><span class="line">struct pool_s &#123;</span><br><span class="line">    pool_data_t      d;</span><br><span class="line">    size_t           max;</span><br><span class="line">    pool_t           *current;</span><br><span class="line">    pool_large_t     *large;</span><br><span class="line">    pool_cleanup_t   *cleanup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol><li>标志一段内存池是否<code>空间足够</code>主要是根据<code>last,end</code>指针来判断的</li><li>实际可分配内存为 <code>size = end - last</code></li><li>那么在连接关闭的时候，其实我们不用将内存池返回给<code>操作系统</code>，而是直接调用<code>reset_pool</code>将<code>last</code>置为初始位置即可，那么下一个连接就可以继续使用该段内存，没有任何后顾之忧</li></ol><p>就这样就完成了内存的交接，该复用逻辑可以根据自己的场景进行改装，当前内存池实现只是一个<code>通用，可扩展的库</code></p><h2 id="pncall-分配不对齐内存"><a href="#pncall-分配不对齐内存" class="headerlink" title="@pncall 分配不对齐内存"></a>@pncall 分配不对齐内存</h2><p>也就是从内存池上直接<code>顺序</code>从后面获取可分配内存,不用计算字节内存偏移量，这样有好处也有坏处</p><ul><li>好处：不用浪费一定字节的内存</li><li>坏处：当然是可能造成内存碎片</li></ul><h1 id="非内存资源回收机制"><a href="#非内存资源回收机制" class="headerlink" title="非内存资源回收机制"></a>非内存资源回收机制</h1><p>内存池不但能管理内存资源，还可以管理非内存资源等回收，例如文件资源，其他socket资源等</p><p>但是需要用户提前将该资源回收事件<code>提前注册到内存池内</code>，在内存释放的时候统一释放</p><h2 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pool_cleanup_s</span>  <span class="title">pool_cleanup_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pool_cleanup_s</span> &#123;</span></span><br><span class="line">    pool_cleanup_pt   handler;</span><br><span class="line">    <span class="keyword">void</span>                 *data;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>   *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>handler 是一个函数指针，指向用户自定义的函数，当内存清理的时候需要调用该函数指向用户自己的资源回收逻辑</li><li>*data 用户自定义的结构体，当回调用户的函数时，会回传给用户</li><li>*next 所有的自定义事件串联为链表，在内存池回收时统一调用</li></ul><h2 id="clean-up-实现"><a href="#clean-up-实现" class="headerlink" title="@clean_up 实现"></a>@clean_up 实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册清除资源事件，内存回收时会调用该回调函数清除相关自定义资源</span></span><br><span class="line"><span class="function"><span class="keyword">pool_cleanup_t</span> *<span class="title">pool_cleanup_add</span><span class="params">(<span class="keyword">pool_t</span> *p, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = palloc(p, <span class="keyword">sizeof</span>(<span class="keyword">pool_cleanup_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span>) &#123;</span><br><span class="line">        c-&gt;data = palloc(p, <span class="built_in">size</span>);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"></span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>申请一个<code>pool_cleanup_t</code>内存，表示当前资源事件</li><li>如果用户有自定义资源，则申请<code>size</code>内存并返回用户使用，一般都是需要的，不然释放什么呢</li><li>将当前事件链接到链表中，并返回用户该事件提供<code>注册回收函数，和回收数据</code></li></ol><h2 id="clean-up-demo"><a href="#clean-up-demo" class="headerlink" title="@clean_up demo"></a>@clean_up demo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>              fd;</span><br><span class="line">    u_char          *name;</span><br><span class="line">&#125; <span class="keyword">file_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">file_t</span>  *c = data;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">close</span>(c-&gt;fd) == FILE_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"close file failed\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不需要 free(data),因为内存是在内存池上分配的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span> *c = pool_cleanup_add(pool,<span class="keyword">sizeof</span>(<span class="keyword">file_t</span>));</span><br><span class="line">    ((<span class="keyword">file_t</span> *)c-&gt;data)-&gt;fd = i; </span><br><span class="line">    c-&gt;handler = clean; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义自己的资源结构体</li><li>调用<code>pool_cleanup_add</code> 新增一个事件</li><li>设置自己的资源清理函数，并挂载到事件上</li></ol><p>这样就完成了自定义资源的释放了，在内存最终回收时能正确全部释放</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>内存池没有暴露大内存块的申请接口,<code>palloc_large</code>，因为统一在<code>palloc</code>中判断，如果目标内存大于<code>pool-&gt;max</code>则自动走大内存分配逻辑，不再从<code>pool</code>上分配，而是直接从堆内存中分配，挂载到<code>pool-&gt;large</code>链表上</li><li><code>pool-&gt;max</code> 值的确定,必须要提前调用<code>pagesize()</code>设置全局变量的大小<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    //pagesize 在 palloc.h 中定义的全局变量</span><br><span class="line">    pagesize = getpagesize();</span><br><span class="line">    reutrn 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="zip完整代码"><a href="#zip完整代码" class="headerlink" title="zip完整代码"></a>zip完整代码</h2><p>code: <a href="/package/mem_pool/mempool.zip">mempool.zip</a></p><h2 id="简易预览"><a href="#简易预览" class="headerlink" title="简易预览"></a>简易预览</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"palloc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>,<span class="keyword">uint_t</span> align)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_large</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建内存池，默认分配的内存包含了pool_t结构体的大小，所以实际可分配内存为size - sizeof(pool_t);</span></span><br><span class="line"><span class="function"><span class="keyword">pool_t</span> *<span class="title">create_pool</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line">    <span class="comment">//分配对齐内存</span></span><br><span class="line">    p = mem_memalign(POOL_ALIGNMENT, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">    p-&gt;d.<span class="built_in">end</span> = (u_char *) p + <span class="built_in">size</span>;</span><br><span class="line">    p-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">size</span> = <span class="built_in">size</span> - <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">    p-&gt;<span class="built_in">max</span> = (<span class="built_in">size</span> &lt; MAX_ALLOC_FROM_POOL) ? <span class="built_in">size</span> : MAX_ALLOC_FROM_POOL;</span><br><span class="line"></span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;cleanup = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存池销毁</span></span><br><span class="line"><span class="comment">//1.调用所有注册在pool_t上的清理事件</span></span><br><span class="line"><span class="comment">//2.清理large内存块</span></span><br><span class="line"><span class="comment">//3.清理所有pool_t内存块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>          *p, *n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>    *l;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;handler) &#123;</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool, n = pool-&gt;d.next; <span class="comment">/* void */</span>; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置内存池</span></span><br><span class="line"><span class="comment">//1.销毁所有的large内存块</span></span><br><span class="line"><span class="comment">//2.复位每个pool_t内存块的last起始位置，以前的数据不再生效</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset_pool</span><span class="params">(<span class="keyword">pool_t</span> *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_t</span>        *p;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + <span class="keyword">sizeof</span>(<span class="keyword">pool_t</span>);</span><br><span class="line">        p-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool-&gt;current = pool;</span><br><span class="line">    pool-&gt;large = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配地址对齐的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">palloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= pool-&gt;<span class="built_in">max</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> palloc_small(pool, <span class="built_in">size</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> palloc_large(pool, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存时不对齐内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">pnalloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= pool-&gt;<span class="built_in">max</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> palloc_small(pool, <span class="built_in">size</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_large(pool, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存主函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">palloc_small</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint_t</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        m = p-&gt;d.last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (align) &#123;</span><br><span class="line">            m = align_ptr(m, ALIGNMENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">size_t</span>) (p-&gt;d.<span class="built_in">end</span> - m) &gt;= <span class="built_in">size</span>) &#123;</span><br><span class="line">            p-&gt;d.last = m + <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p-&gt;d.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palloc_block(pool, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_block</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_char      *m;</span><br><span class="line">    <span class="keyword">size_t</span>       psize;</span><br><span class="line">    <span class="keyword">pool_t</span>  *p, *<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    psize = (<span class="keyword">size_t</span>) (pool-&gt;d.<span class="built_in">end</span> - (u_char *) pool);</span><br><span class="line"></span><br><span class="line">    m = mem_memalign(POOL_ALIGNMENT, psize);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> = (<span class="keyword">pool_t</span> *) m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-&gt;d.<span class="built_in">end</span> = m + psize;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.failed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m += <span class="keyword">sizeof</span>(<span class="keyword">pool_data_t</span>);</span><br><span class="line">    m = align_ptr(m, ALIGNMENT);</span><br><span class="line">    <span class="keyword">new</span>-&gt;d.last = m + <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;d.failed++ &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            pool-&gt;current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;d.next = <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配大块内存主函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">palloc_large</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>              *p;</span><br><span class="line">    <span class="keyword">uint_t</span>         n;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *large;</span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (large-&gt;alloc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n++ &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = palloc_small(pool, <span class="keyword">sizeof</span>(<span class="keyword">pool_large_t</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配对其内存，并挂到large链表上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pmemalign</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">size_t</span> alignment)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>              *p;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *large;</span><br><span class="line"></span><br><span class="line">    p = mem_memalign(alignment, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = palloc_small(pool, <span class="keyword">sizeof</span>(<span class="keyword">pool_large_t</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (large == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回收指定large内存</span></span><br><span class="line"><span class="function"><span class="keyword">int_t</span> <span class="title">pfree</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_large_t</span>  *l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == l-&gt;alloc) &#123;</span><br><span class="line">            <span class="built_in">free</span>(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配对其并初始化该段内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pcalloc</span><span class="params">(<span class="keyword">pool_t</span> *pool, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p;</span><br><span class="line"></span><br><span class="line">    p = palloc(pool, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        memzero(p, <span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册清除资源事件，内存回收时会调用该回调函数清除相关自定义资源</span></span><br><span class="line"><span class="function"><span class="keyword">pool_cleanup_t</span> *<span class="title">pool_cleanup_add</span><span class="params">(<span class="keyword">pool_t</span> *p, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pool_cleanup_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = palloc(p, <span class="keyword">sizeof</span>(<span class="keyword">pool_cleanup_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span>) &#123;</span><br><span class="line">        c-&gt;data = palloc(p, <span class="built_in">size</span>);</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;handler = <span class="literal">NULL</span>;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"></span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (HAS_POSIX_MEMALIGN)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mem_memalign</span><span class="params">(<span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>  *p;</span><br><span class="line">    <span class="keyword">int</span> err = posix_memalign(&amp;p, alignment, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (HAS_MEMALIGN)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mem_memalign</span><span class="params">(<span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memalign(alignment, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存池主要作用&quot;&gt;&lt;a href=&quot;#内存池主要作用&quot; class=&quot;headerlink&quot; title=&quot;内存池主要作用&quot;&gt;&lt;/a&gt;内存池主要作用&lt;/h1&gt;&lt;p&gt;nginx里几乎所有内存申请都是从&lt;code&gt;ngx_pool_t&lt;/code&gt;上申请的，nginx
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="pool" scheme="http://wiki.brewlin.com/tags/pool/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>dns协议实现</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/2.%E5%BA%94%E7%94%A8%E5%B1%82/dns/2.dns%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/2.应用层/dns/2.dns协议实现/</id>
    <published>2020-03-06T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装发送包体"><a href="#封装发送包体" class="headerlink" title="@封装发送包体"></a>@封装发送包体</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//protocol/appliction/dns/endpoint.go</span></span><br><span class="line"></span><br><span class="line">h := header.DNS(<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">12</span>))</span><br><span class="line">h.Setheader(e.ID)</span><br><span class="line">h.SetCount(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">h.SetQuestion(e.Domain,<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>首先创建一个Dns的字节数组，默认给12字节大小，因为header头固定为12字节大小</p><h3 id="header头封装"><a href="#header头封装" class="headerlink" title="@header头封装"></a>@header头封装</h3><p>主要是初始化ID  和  一些flag标志位<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h.SetHeader(e.ID)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Setheader</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">Setheader</span><span class="params">(id <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line">d.setID(id)</span><br><span class="line">d.setFlag(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//setID 将前两个字节 初始化id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span><span class="title">setID</span><span class="params">(id <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//set id</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ID:], id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置标志位,都给默认值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetFlag</span></span><br><span class="line"><span class="comment">//QR 表示请求还是响应</span></span><br><span class="line"><span class="comment">//OPCODE 1表示反转查询；2表示服务器状态查询。3~15目前保留，以备将来使用</span></span><br><span class="line"><span class="comment">//AA 表示响应的服务器是否是权威DNS服务器。只在响应消息中有效。</span></span><br><span class="line"><span class="comment">//TC 指示消息是否因为传输大小限制而被截断</span></span><br><span class="line"><span class="comment">//RD 该值在请求消息中被设置，响应消息复用该值。如果被设置，表示希望服务器递归查询。但服务器不一定支持递归查询</span></span><br><span class="line"><span class="comment">//RA 。该值在响应消息中被设置或被清除，以表明服务器是否支持递归查询。</span></span><br><span class="line"><span class="comment">//Z 保留备用</span></span><br><span class="line"><span class="comment">//RCODE: 该值在响应消息中被设置。取值及含义如下：</span></span><br><span class="line"><span class="comment">//0：No error condition，没有错误条件；</span></span><br><span class="line"><span class="comment">//1：Format error，请求格式有误，服务器无法解析请求；</span></span><br><span class="line"><span class="comment">//2：Server failure，服务器出错。</span></span><br><span class="line"><span class="comment">//3：Name Error，只在权威DNS服务器的响应中有意义，表示请求中的域名不存在。</span></span><br><span class="line"><span class="comment">//4：Not Implemented，服务器不支持该请求类型。</span></span><br><span class="line"><span class="comment">//5：Refused，服务器拒绝执行请求操作。</span></span><br><span class="line"><span class="comment">//6~15：保留备用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">setFlag</span><span class="params">(QR <span class="keyword">uint16</span>, OPCODE <span class="keyword">uint16</span>, AA <span class="keyword">uint16</span>, TC <span class="keyword">uint16</span>, RD <span class="keyword">uint16</span>, RA <span class="keyword">uint16</span>, RCODE <span class="keyword">uint16</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//set flag</span></span><br><span class="line">op :=  QR&lt;&lt;<span class="number">15</span> + OPCODE&lt;&lt;<span class="number">11</span> + AA&lt;&lt;<span class="number">10</span> + TC&lt;&lt;<span class="number">9</span> + RD&lt;&lt;<span class="number">8</span> + RA&lt;&lt;<span class="number">7</span> + RCODE</span><br><span class="line">binary.BigEndian.PutUint16(d[OP:],op)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里包头header4字节就算封装好了</p><h3 id="Count-封装"><a href="#Count-封装" class="headerlink" title="@Count 封装"></a>@Count 封装</h3><p>因为是查询包体，只需要设置query count即可，<code>现在只支持单条查询</code>，所以默认给1<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetCount</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">SetCount</span><span class="params">(qd,an,ns,qa <span class="keyword">uint16</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//SetQdcount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[QDCOUNT:], qd)</span><br><span class="line"><span class="comment">//SetAncount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ANCOUNT:] ,an)</span><br><span class="line"><span class="comment">//SetNscount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[NSCOUNT:],ns)</span><br><span class="line"><span class="comment">//SetQAcount</span></span><br><span class="line">binary.BigEndian.PutUint16(d[ARCOUNT:],qa)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里每个标志位占2字节，总共8字节，加上上面的header4字节 总共12字节</p><h3 id="Question-封装"><a href="#Question-封装" class="headerlink" title="@Question 封装"></a>@Question 封装</h3><p>这里主要是将需要查询的域名写入包体中，这里有个地方需要计算:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DNS)</span><span class="title">SetQuestion</span><span class="params">(domain <span class="keyword">string</span>,qtype,qclass <span class="keyword">uint16</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> _,b := <span class="keyword">range</span> d.getDomain(domain) &#123;</span><br><span class="line">*d = <span class="built_in">append</span>((*d),b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//d.setDomain(domain)</span></span><br><span class="line">q := DNSQuestion&#123;</span><br><span class="line">QuestionType:  qtype,</span><br><span class="line">QuestionClass: qclass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">binary.Write(&amp;buffer,binary.BigEndian,*d)</span><br><span class="line">binary.Write(&amp;buffer,binary.BigEndian,q)</span><br><span class="line">*d = buffer.Bytes()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DNS)</span><span class="title">getDomain</span><span class="params">(domain <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">buffer   bytes.Buffer</span><br><span class="line">segments []<span class="keyword">string</span> = strings.Split(domain, <span class="string">"."</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> _, seg := <span class="keyword">range</span> segments &#123;</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, <span class="keyword">byte</span>(<span class="built_in">len</span>(seg)))</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, []<span class="keyword">byte</span>(seg))</span><br><span class="line">&#125;</span><br><span class="line">binary.Write(&amp;buffer, binary.BigEndian, <span class="keyword">byte</span>(<span class="number">0x00</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buffer.Bytes()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>首先计算待查询的域名动态字节并返回</li><li>最后在封装<code>DNSQuestion</code>4字节追加到末尾</li><li>这里基本完成了所有的请求包的构建</li></ul><h3 id="发送数据包"><a href="#发送数据包" class="headerlink" title="@发送数据包"></a>@发送数据包</h3><p>dns是基于dns协议查询，直接将上面进行udp发送即可<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sendQuery udp query dns</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">sendQuery</span> <span class="params">()</span> <span class="params">( *[]header.DNSResource ,error )</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := e.c.Connect();err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := e.c.Write(*e.req) ; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.parseResp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析响应包体"><a href="#解析响应包体" class="headerlink" title="@解析响应包体"></a>@解析响应包体</h2><p>主要就是接收udp响应数据，注意：==<code>udp当前实现是 如果对端不可访问。在read时才会接收到icmp错误控制消息</code>==<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parseResp</span></span><br><span class="line"><span class="comment">//解析响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">parseResp</span><span class="params">()</span> <span class="params">(*[]header.DNSResource,error)</span></span>&#123;</span><br><span class="line">rsp,err := e.c.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line">p := header.DNS(rsp)</span><br><span class="line">e.resp = &amp;p</span><br><span class="line">e.answer = p.GetAnswer(e.Domain)</span><br><span class="line"><span class="keyword">return</span> e.parseAnswer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取Answer包体"><a href="#获取Answer包体" class="headerlink" title="@获取Answer包体"></a>@获取Answer包体</h3><p>主要是计算三个<code>count</code>计数总和，判断总共有多少条响应记录</p><p>剩下的是挨着字节数遍历读取即可<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetAnswer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DNS)</span> <span class="title">GetAnswer</span><span class="params">(domain <span class="keyword">string</span>)</span> *[]<span class="title">DNSResource</span></span> &#123;</span><br><span class="line"><span class="comment">//answer 起始地址</span></span><br><span class="line">asLen := DOMAIN + <span class="built_in">len</span>(d.getDomain(domain)) + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">answer := []DNSResource&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; (<span class="keyword">int</span>(d.GetANCount() + d.GetNSCount() + d.GetARCount())) ;i ++ &#123;</span><br><span class="line">rs := DNSResource&#123;&#125;</span><br><span class="line"><span class="comment">//判断是不是指针 pointer地址</span></span><br><span class="line"><span class="keyword">if</span> checkP := d[asLen]; checkP &gt;&gt; <span class="number">6</span>  == <span class="number">3</span> &#123;</span><br><span class="line"><span class="comment">//pointer := (d[asLen] &amp; 0x3F &lt;&lt; 8) + d[asLen+1]</span></span><br><span class="line">rs.Name = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.Type = DNSResourceType(binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>]))</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.Class = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.TTL = binary.BigEndian.Uint32(d[asLen:asLen+<span class="number">4</span>])</span><br><span class="line">asLen += <span class="number">4</span></span><br><span class="line">rs.RDlen = binary.BigEndian.Uint16(d[asLen:asLen+<span class="number">2</span>])</span><br><span class="line">asLen += <span class="number">2</span></span><br><span class="line">rs.RData = d[asLen:asLen+<span class="keyword">int</span>(rs.RDlen)]</span><br><span class="line">asLen += <span class="keyword">int</span>(rs.RDlen)</span><br><span class="line">answer = <span class="built_in">append</span>(answer,rs)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="解析Answer-address"><a href="#解析Answer-address" class="headerlink" title="@解析Answer address"></a>@解析Answer address</h3><p>这里主要解析A类型  和Cname类型，基本满足场景了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endpoint)</span> <span class="title">parseAnswer</span><span class="params">()</span><span class="params">(*[]header.DNSResource,error)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(*e.answer) ; i++ &#123;</span><br><span class="line"><span class="keyword">switch</span> (*e.answer)[i].Type &#123;</span><br><span class="line"><span class="keyword">case</span> header.A:</span><br><span class="line">(*e.answer)[i].Address = e.parseAName((*e.answer)[i].RData)</span><br><span class="line"><span class="keyword">case</span> header.CNAME:</span><br><span class="line">(*e.answer)[i].Address = e.parseCName((*e.answer)[i].RData)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.answer,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装发送包体&quot;&gt;&lt;a href=&quot;#封装发送包体&quot; class=&quot;headerlink&quot; title=&quot;@封装发送包体&quot;&gt;&lt;/a&gt;@封装发送包体&lt;/h2&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="2.应用层" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/dns/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>dns协议简介</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/2.%E5%BA%94%E7%94%A8%E5%B1%82/dns/1.dns%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/2.应用层/dns/1.dns协议简介/</id>
    <published>2020-03-06T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整体包结构-header-body"><a href="#整体包结构-header-body" class="headerlink" title="@整体包结构 header+body"></a>@整体包结构 header+body</h2><p>DNS请求与响应的格式是一致的，其整体分为Header、Question、Answer、Authority、Additional5部分，如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-------+-+-------------+</span><br><span class="line">|            Header             | </span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Question           | the question for the name server</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Answer             | RRs answering the question</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|            Authority          | RRs pointing toward an authority</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  </span><br><span class="line">|            Additional         |  RRs holding additional information</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></p><h2 id="Header-包结构"><a href="#Header-包结构" class="headerlink" title="@Header 包结构"></a>@Header 包结构</h2><p>Header部分是一定有的，长度固定为12个字节；其余4部分可能有也可能没有，并且长度也不一定，这个在Header部分中有指明。Header的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">|                     ID                               |</span><br><span class="line">+-------------------------------------------------------  </span><br><span class="line">|QR|  OPCODE   |AA|TC|RD|RA|    RSV    |      RCODE    |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 QUESTION COUNT                       |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 ANSWER   COUNT                       |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 AUTHORITY SCOUNT                     |</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 ADITION COUNT                        |</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>下面说明一下各个字段的含义:</p><ul><li><code>ID</code>：占16位。该值由发出DNS请求的程序生成，DNS服务器在响应时会使用该ID，这样便于请求程序区分不同的DNS响应。</li><li><code>QR</code>：占1位。指示该消息是请求还是响应。0表示请求；1表示响应。</li><li><code>OPCODE</code>：占4位。指示请求的类型，有请求发起者设定，响应消息中复用该值。0表示标准查询；1表示反转查询；2表示服务器状态查询。3~15目前保留，以备将来使用。</li><li><code>AA</code>（Authoritative Answer，权威应答）：占1位。表示响应的服务器是否是权威DNS服务器。只在响应消息中有效。</li><li><code>TC</code>（TrunCation，截断）：占1位。指示消息是否因为传输大小限制而被截断。</li><li><code>RD</code>（Recursion Desired，期望递归）：占1位。该值在请求消息中被设置，响应消息复用该值。如果被设置，表示希望服务器递归查询。但服务器不一定支持递归查询。</li><li><code>RA</code>（Recursion Available，递归可用性）：占1位。该值在响应消息中被设置或被清除，以表明服务器是否支持递归查询。</li><li>Z：占3位。保留备用。</li><li><code>RCODE</code>（Response code）：占4位。该值在响应消息中被设置。取值及含义如下：<ul><li>0：No error condition，没有错误条件；</li><li>1：Format error，请求格式有误，服务器无法解析请求；</li><li>2：Server failure，服务器出错。</li><li>3：Name Error，只在权威DNS服务器的响应中有意义，表示请求中的域名不存在。</li><li>4：Not Implemented，服务器不支持该请求类型。</li><li>5：Refused，服务器拒绝执行请求操作。</li><li>6~15：保留备用。</li></ul></li><li><code>QUESTION COUNT</code>：占16位（无符号）。指明Question部分的包含的实体数量。</li><li><code>ANSWER COUNT</code>：占16位（无符号）。指明Answer部分的包含的RR（Resource Record）数量。</li><li><code>AUTHORITY COUNT</code>：占16位（无符号）。指明Authority部分的包含的RR（Resource Record）数量。</li><li><code>ADDITIONAL COUNT</code>：占16位（无符号）。指明Additional部分的包含的RR（Resource Record）数量。</li></ul><h2 id="Question-包结构"><a href="#Question-包结构" class="headerlink" title="@Question 包结构"></a>@Question 包结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">/      QUESTION NAME 字节数不固定 存储host name         /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 Question type                        |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 question class                       |</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li><code>QNAME</code>：字节数不定，以0x00作为结束符。表示查询的主机名。注意：众所周知，主机名被”.”号分割成了多段标签。在QNAME中，每段标签前面加一个数字，表示接下来标签的长度。比如：<a href="http://www.baidu.com">www.baidu.com</a> 表示成QNAME时，会在”www”前面加上一个字节0x03，”baidu”前面加上一个字节0x04，”com”前面加上一个字节0x03,最后在加0x00表示结尾</li><li><code>QTYPE</code>：占2个字节。表示RR类型，见以上RR介绍；</li><li><code>QCLASS</code>：占2个字节。表示RR分类，见以上RR介绍。</li></ul><h2 id="Answer、Authority、Additional-包结构"><a href="#Answer、Authority、Additional-包结构" class="headerlink" title="@ Answer、Authority、Additional 包结构"></a>@ Answer、Authority、Additional 包结构</h2><p>三个包结构都是一致的，而且字节数都是动态的如下图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16</span><br><span class="line">+-+-+-+-+-------+-+-------------+-----------------------</span><br><span class="line">/                 Name                                  /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------   </span><br><span class="line">|                 type                                  |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 class                                 |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 TTl                                   |</span><br><span class="line">|                                                       |</span><br><span class="line">+------------------------------------------------------- </span><br><span class="line">|                 len                                   |</span><br><span class="line">+-------------------------------------------------------</span><br><span class="line">/                 data                                  /</span><br><span class="line">/                                                       /</span><br><span class="line">+-------------------------------------------------------</span><br></pre></td></tr></table></figure></p><ul><li>NAME：长度不定，可能是真正的数据，也有可能是指针（其值表示的是真正的数据在整个数据中的字节索引数），还有可能是二者的混合（以指针结尾）。若是真正的数据，会以0x00结尾；若是指针，指针占2个字节，第一个字节的高2位为11。算法方式详见具体的go实现</li><li>TYPE：占2个字节。表示RR的类型，如A、CNAME、NS等，见以上RR介绍；</li><li>CLASS：占2个字节。表示RR的分类，见以上RR介绍；</li><li>TTL：占4个字节。表示RR生命周期，即RR缓存时长，单位是秒；</li><li>RDLENGTH：占2个字节。指定RDATA字段的字节数；</li><li>RDATA：即之前介绍的value，含义与TYPE有关，见以上RR介绍。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;整体包结构-header-body&quot;&gt;&lt;a href=&quot;#整体包结构-header-body&quot; class=&quot;headerlink&quot; title=&quot;@整体包结构 header+body&quot;&gt;&lt;/a&gt;@整体包结构 header+body&lt;/h2&gt;&lt;p&gt;DNS请求与响应
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="2.应用层" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/dns/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>dns协议api</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/2.%E5%BA%94%E7%94%A8%E5%B1%82/dns/3.dns%E5%8D%8F%E8%AE%AEapi/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/2.应用层/dns/3.dns协议api/</id>
    <published>2020-03-06T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/brewlin/net-protocol/protocol/application/dns"</span></span><br><span class="line"><span class="string">"github.com/brewlin/net-protocol/protocol/header"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := dns.NewEndpoint(<span class="string">"www.baidu.com"</span>)</span><br><span class="line">fmt.Println(<span class="string">"DNS lookuphost    : www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">defer</span> d.Close()</span><br><span class="line"></span><br><span class="line">ir,err := d.Resolve();</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> *ir &#123;</span><br><span class="line"><span class="keyword">switch</span> v.Type &#123;</span><br><span class="line"><span class="keyword">case</span> header.A:</span><br><span class="line">fmt.Println(<span class="string">"A(host name)      :"</span>,v.Address)</span><br><span class="line"><span class="keyword">case</span> header.CNAME:</span><br><span class="line">fmt.Println(<span class="string">"CNAME (alias name):"</span>,v.Address)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NewEndpoint-domain"><a href="#NewEndpoint-domain" class="headerlink" title="@NewEndpoint(domain)"></a>@NewEndpoint(domain)</h2><p>新建一个dns客户端，主要负责udp客户端初始化，以及一些主要工作</p><h2 id="Resolve"><a href="#Resolve" class="headerlink" title="@Resolve()"></a>@Resolve()</h2><p>负责发送dns数据包请求，以及解析响应数据</p><h2 id="ir-响应结构体"><a href="#ir-响应结构体" class="headerlink" title="@ir 响应结构体"></a>@ir 响应结构体</h2><p>改结构是一个数组指针，复用数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//DNSResource ansower,authority,additional</span><br><span class="line">type DNSResource struct &#123;</span><br><span class="line">Name uint16</span><br><span class="line">Type DNSResourceType</span><br><span class="line">Class uint16</span><br><span class="line">TTL uint32</span><br><span class="line">RDlen uint16</span><br><span class="line">RData []byte</span><br><span class="line">Address string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在接收到的数据，包含多条记录，只有A类型是ip地址,所以需要过滤一下<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> *ir &#123;</span><br><span class="line"><span class="keyword">switch</span> v.Type &#123;</span><br><span class="line"><span class="keyword">case</span> header.A:</span><br><span class="line">fmt.Println(<span class="string">"A(host name)      :"</span>,v.Address)</span><br><span class="line"><span class="keyword">case</span> header.CNAME:</span><br><span class="line">fmt.Println(<span class="string">"CNAME (alias name):"</span>,v.Address)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="执行demo"><a href="#执行demo" class="headerlink" title="执行demo"></a>执行demo</h2><p><img src="/images/net-protocol/dns.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="2.应用层" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/categories/net-protocol/2-%E5%BA%94%E7%94%A8%E5%B1%82/dns/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
      <category term="dns" scheme="http://wiki.brewlin.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>udp-客户端</title>
    <link href="http://wiki.brewlin.com/wiki/net-protocol/7.%E5%AE%A2%E6%88%B7%E7%AB%AF/udp-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://wiki.brewlin.com/wiki/net-protocol/7.客户端/udp-客户端/</id>
    <published>2020-03-05T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端创建"><a href="#客户端创建" class="headerlink" title="@客户端创建"></a>@客户端创建</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/brewlin/net-protocol/pkg/logging"</span></span><br><span class="line"><span class="string">"github.com/brewlin/net-protocol/protocol/transport/udp/client"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">con := client.NewClient(<span class="string">"10.0.2.15"</span>, <span class="number">9000</span>)</span><br><span class="line"><span class="keyword">defer</span> con.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := con.Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">con.Write([]<span class="keyword">byte</span>(<span class="string">"send msg"</span>))</span><br><span class="line">res, err := con.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">con.Close()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var p [8]byte</span></span><br><span class="line"><span class="comment">// res, _ := con.Readn(p[:1])</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现了基本的udp客户端连接读写等函数</li><li>依赖tap虚拟网卡，所以需要启动网卡依赖</li><li>依赖<code>ARP</code>,<code>udp</code>,<code>IPV4</code>等协议，所以默认注册了该协议</li><li>注意：<code>默认本地地址为192.168.1.0/24 网段，如果目标ip为127.0.0.1 导致无法arp查询物理层地址,请填写局域网物理机器ip,或者外网ip</code></li></ul><h2 id="NewClient-创建客户端"><a href="#NewClient-创建客户端" class="headerlink" title="@NewClient 创建客户端"></a>@NewClient 创建客户端</h2><p>构造函数传入目的ip,端口等参数，默认返回一个*Client 指针<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con := client.NewClient(<span class="string">"10.0.2.15"</span>, <span class="number">8080</span>)</span><br></pre></td></tr></table></figure></p><p>注意:<code>默认本地地址为192.168.1.0/24 网段，如果目标ip为127.0.0.1 导致无法arp查询物理层地址</code></p><h2 id="Connect-notice"><a href="#Connect-notice" class="headerlink" title="@Connect ==notice=="></a>@Connect ==notice==</h2><p>不进行真正的连接，只处理一些初始化工作</p><h2 id="Write-写入数据"><a href="#Write-写入数据" class="headerlink" title="@Write 写入数据"></a>@Write 写入数据</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.Write([]<span class="keyword">byte</span>(<span class="string">"send msg"</span>))</span><br></pre></td></tr></table></figure><p>直接向对端连接写入数据，错误返回err，udp协议直接通过ip数据包像对端发送数据，因为无连接状态，需要等待对方的icmp报文<br>如果没有收到icmp报文表示发送成功，收到了icmp报文也需要在<code>read()函数</code>中才能标识出来</p><h2 id="Read-读取数据"><a href="#Read-读取数据" class="headerlink" title="@Read 读取数据"></a>@Read <code>读取数据</code></h2><p>==在这里可以判断对端服务是否正常，因为这里会返回用户层icmp报文情况==</p><p>一次只读取一次数据，如果缓存没有读取完，则会返回 <code>ErrWouldBlock</code>错误，可以 在此监听该读方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">res, err := con.Read()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//这里的错误可能 就会是上面write 写入 对端数据后，对端返回的icmp control msg 表示一些异常情况，如对端端口不可达等</span><br><span class="line">//如果需要阻塞 进行arp查询等一些操作 会自动进行，这里一般不会出现</span><br><span class="line">fmt.Println(err)</span><br><span class="line">con.Close()</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Readn-读取n字节数据"><a href="#Readn-读取n字节数据" class="headerlink" title="@Readn 读取n字节数据"></a>@Readn 读取n字节数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// var p [8]byte</span><br><span class="line">// res, _ := con.Readn(p[:1])</span><br><span class="line">// fmt.Println(p)</span><br></pre></td></tr></table></figure><p>可以根据传入参数填充对应的字节数数据，如果不够则会阻塞等待数据填充满为止</p><p>golang 的slice底层是一个指针，所以虽然传值，但是实际会复制指针，那么该slice实际值会在Readn（）函数里被改变填充完后返回</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;客户端创建&quot;&gt;&lt;a href=&quot;#客户端创建&quot; class=&quot;headerlink&quot; title=&quot;@客户端创建&quot;&gt;&lt;/a&gt;@客户端创建&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="net-protocol" scheme="http://wiki.brewlin.com/categories/net-protocol/"/>
    
      <category term="7.客户端" scheme="http://wiki.brewlin.com/categories/net-protocol/7-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
      <category term="go" scheme="http://wiki.brewlin.com/tags/go/"/>
    
      <category term="protocol" scheme="http://wiki.brewlin.com/tags/protocol/"/>
    
      <category term="udp" scheme="http://wiki.brewlin.com/tags/udp/"/>
    
      <category term="client" scheme="http://wiki.brewlin.com/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>http_模块开发的步骤</title>
    <link href="http://wiki.brewlin.com/wiki/blog/nginx/http_%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%9A%84%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://wiki.brewlin.com/wiki/blog/nginx/http_模块开发的步骤（一）/</id>
    <published>2020-02-10T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-流程的生命周期"><a href="#http-流程的生命周期" class="headerlink" title="http 流程的生命周期"></a>http 流程的生命周期</h1><p>在开发模块前我们需要了解http流程的生命周期，然后确定我们需要扩展的功能在哪个阶段，最后才能在该阶段介入我们扩展的功能。</p><p>nginx 的http流程有11个阶段，每个阶段都可以认为是单独的模块在负责对应的职责，每个阶段的处理可能不止一次，可能会发生循环作用，这个完全由每个模块来决定对应的后续行为，如下为默认基础的11个生命周期:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># NGX_HTTP_POST_READ_PHASE = 0</span><br><span class="line">在接收到完整的http头部后处理的http阶段</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_SERVER_REWRITE_PHASE 处理头部阶段</span><br><span class="line">在还没有查询到uri匹配的location前，这时==rewrite重写url==也作为一个独立的http阶段</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_FIND_CONFIG_PHASE 寻找匹配的location</span><br><span class="line">根据uri寻找匹配的location，这个阶段通常由ngx_http_core_module模块实现，不建议其他http模块重写定义这一阶段的行为</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_REWRITE_PHASE</span><br><span class="line">在config_phase阶段之后重写url的意义与server_rewrite_phase阶段显然是不同的，因为这两者会导致查到不同的location快(location 是与uri进行匹配的)</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_POST_REWRITE_PHASE 重新查找到对应的uir匹配的location模块</span><br><span class="line">这一阶段是由于rewrite重写url后会重新跳到ngx_http_find_config_phase阶段，找到与新的uri匹配的location，所以这一阶段是无法由第三方http模块处理的，而仅由ngx_http_core_module模块使用</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_PREACCESS_PHASE 处理access接入前的阶段</span><br><span class="line">处理ngx_http_access_phase阶段前，http模块可以介入的处理阶段</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_ACCESS_PHASE 判断是否允许访问nginx服务器</span><br><span class="line">这个阶段用于让http模块判断是否允许这个请求访问nginx服务器</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_POST_ACCESS_PHASE 构造拒绝服务响应给客户端，进行收尾</span><br><span class="line">当ngx_http_access_phase阶段中http模块的handler处理方法返回不允许访问的错误码时，这个阶段将构造拒绝服务的用户响应。所以这个阶段实际上用于给ngx_http_access_phase阶段收尾</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_TRY_FILES_PHASE 专门针对try_files配置进行静态文件处理</span><br><span class="line">这个阶段完全是为了try_files配置项而设立的，当http请求访问静态文件资源时,try_files配置项可以使这个请求顺序地访问多个静态文件资源，如果某一次访问失败，则继续访问try_files中指定的下一个静态资源，另外这个功能完全是在NGX_HTTP_TRY_FIELS_phase阶段中实现的</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_CONTENT_PHASE 处理http内容的阶段</span><br><span class="line">用于处理http请求内容的阶段，这是大部分http模块最喜欢介入的阶段</span><br><span class="line"></span><br><span class="line"># NGX_HTTP_LOG_PHASE 最后日志记录收尾的阶段</span><br><span class="line">处理完请求后记录日志的阶段，例如NG_HTTP_LOG_MODULE 模块就在这个阶段中加入了一个handler处理方法，使得每个http请求处理完毕后惠济路access_log日志</span><br></pre></td></tr></table></figure><h1 id="一、扩展开发初始工作"><a href="#一、扩展开发初始工作" class="headerlink" title="一、扩展开发初始工作"></a>一、扩展开发初始工作</h1><p>扩展开发前，我们需要了解nginx编译的流程和工作模式</p><h2 id="1-配置检查"><a href="#1-配置检查" class="headerlink" title="1.配置检查"></a>1.配置检查</h2><p>在nginx编译的时候我们都会执行<code>./configure</code>命令，去检查平台编译环境后设置对应的宏命令支持对应的方法，并且<code>./configure</code>带有很多可选项参数，比如<code>--add-module=path</code> 就可以设定我们扩展目录的所在路径</p><p>简单讲下<code>--add-module=path</code>的工作原理：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//这里是 ./configure --add-module=path 命令会调用的脚本检查</span><br><span class="line">//主要就是遍历 传入的path的路径，并去调用该路径下所有的config配置脚本</span><br><span class="line">//所以在这里，我们就需要在我们的扩展目录下有一个config配置文件</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -n <span class="string">"<span class="variable">$NGX_ADDONS</span>"</span>; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> configuring additional modules</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ngx_addon_dir <span class="keyword">in</span> <span class="variable">$NGX_ADDONS</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"adding module in <span class="variable">$ngx_addon_dir</span>"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">test</span> -f <span class="variable">$ngx_addon_dir</span>/config; <span class="keyword">then</span></span><br><span class="line">            . <span class="variable">$ngx_addon_dir</span>/config</span><br><span class="line"></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">" + <span class="variable">$ngx_addon_name</span> was configured"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span>: error: no <span class="variable">$ngx_addon_dir</span>/config was found"</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h2 id="2-配置定义"><a href="#2-配置定义" class="headerlink" title="2.配置定义"></a>2.配置定义</h2><p>如下是扩展开发的编译配置<code>path/to/modules/print/config</code>的具体内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngx_addon_name = ngx_http_print_module</span><br><span class="line">HTTP_MODULES=&quot;$HTTP_MODULES ngx_http_print_module&quot;</span><br><span class="line">NGX_ADDON_SRCS=&quot;$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_print_module.c&quot;</span><br></pre></td></tr></table></figure></p><p>主要有两个需要注意的 <code>ngx_addon_name</code> 仅在configure期间使用，设置模块名称</p><p><code>HTTP_MODULES,NGX_ADDON_SRCS</code> 这两个变量可以看出都是追加操作，用于将我们的扩展代码文件追加到待编译的列表中，而且<code>HTTP_MODULES</code>用于告诉nginx这是一个http扩展，且扩展的入口是<code>ngx_http_pirnt_module</code>这个我们在代码中定义的<code>全局结构体变量</code>(它会被加入到http生命周期中去，且包含了扩展的入口，后文会详细涉及到)</p><h2 id="3-扩展目录"><a href="#3-扩展目录" class="headerlink" title="3.扩展目录"></a>3.扩展目录</h2><p>这里我们以一个print模块为例，后面我们将介绍一个print模块的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- nginx-src</span><br><span class="line">----------- auto</span><br><span class="line">----------- conf</span><br><span class="line">----------- man</span><br><span class="line">----------- html</span><br><span class="line">----------- src</span><br><span class="line">----------- modules</span><br><span class="line">------------------- print</span><br><span class="line">------------------------- ngx_http_print_module.c</span><br><span class="line">------------------------- config</span><br></pre></td></tr></table></figure></p><p>这里样的目录方便我们后期扩展，上面讲到了<code>./configure --add-module=path/modules</code> 会去遍历该目录下所有的config，因此后期只需要在该目录下增加扩展目录即可</p><h1 id="二、-http-基础模块的开发"><a href="#二、-http-基础模块的开发" class="headerlink" title="二、 http 基础模块的开发"></a>二、 http 基础模块的开发</h1><h2 id="1-定义主模块入口"><a href="#1-定义主模块入口" class="headerlink" title="1.定义主模块入口"></a>1.定义主模块入口</h2><p>该结构体在<code>configure</code>阶段的时候就会被写入到nginx全局的一个链表里，用于nginx启动时解析<code>nginx.conf</code>时遇到<code>http</code>配置项时会遍历调用所有相关的http模块</p><p>所以如下结构是作为一个扩展的启动入口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ngx_module_t</span> ngx_http_print_module = &#123;</span><br><span class="line">    NGX_MODULE_V1,</span><br><span class="line">    &amp;ngx_http_print_module_ctx,</span><br><span class="line">    ngx_http_print_commands,</span><br><span class="line">    NGX_HTTP_MODULE,</span><br><span class="line">    </span><br><span class="line">    <span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,</span><br><span class="line">    NGX_MODULE_V1_PADDING</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="2-定义配置存储解析入口"><a href="#2-定义配置存储解析入口" class="headerlink" title="2.定义配置存储解析入口"></a>2.定义配置存储解析入口</h2><p>commands是一个很重要的结构体，同时也被<code>ngx_http_print_module</code>引用，用于匹配<code>nginx.conf</code>中的配置项</p><p>例如本例中，如果在<code>nginx.conf</code>中中出现<code>print test 1;</code>配置项，则nginx会通过本模块<code>ngx_http_print_module</code>在找到commands,并且会调用<code>set</code>回调方法,也就是下面定义的<code>ngx_http_print_register</code>方法去将<code>nginx.conf</code>中的值保存到我们自定义的结构体中，方便我们在模块内使用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当解析nginx.conf 时 没发现一个如下的print配置，就会调用该set回调方法(ngx_http_print)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_command_t</span> ngx_http_print_commands[] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_string(<span class="string">"print"</span>), <span class="comment">// The command name</span></span><br><span class="line">        NGX_HTTP_LOC_CONF | NGX_HTTP_SRV_CONF| NGX_CONF_TAKE2,</span><br><span class="line">        ngx_http_print_register, <span class="comment">// The command handler</span></span><br><span class="line">        NGX_HTTP_LOC_CONF_OFFSET,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// offsetof(ngx_http_print_conf_t, str),</span></span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ngx_null_command</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="3-定义存储配置的结构体"><a href="#3-定义存储配置的结构体" class="headerlink" title="3.定义存储配置的结构体"></a>3.定义存储配置的结构体</h2><p>自定义的配置可以任何的设计，根据自己的场景来，本次例子只是简单的将<code>nginx.conf</code>中自定义的配置保存到如下的配置中去<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span> str;</span><br><span class="line">    <span class="keyword">ngx_int_t</span> num;</span><br><span class="line">&#125;<span class="keyword">ngx_http_print_conf_t</span></span><br></pre></td></tr></table></figure></p><h2 id="4-实现ngx-http-print-register保存配置"><a href="#4-实现ngx-http-print-register保存配置" class="headerlink" title="4.实现ngx_http_print_register保存配置"></a>4.实现<code>ngx_http_print_register</code>保存配置</h2><p>当nginx在启动阶段解析<code>nginx.conf</code>时，匹配到我们自定义的<code>command</code>则会调用对应的<code>set</code>回调函数，也就是<code>ngx_http_print_register</code>方法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//nginx.conf解析阶段，没发现一个匹配项就会调用当前函数注册相关handler 也就是请求处理的真正函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">ngx_http_print_register</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,<span class="keyword">ngx_command_t</span> *cmd,<span class="keyword">void</span> *conf)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sfdsfs"</span>);</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span> *clcf;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_conf_get_module_loc_conf(cf,ngx_http_core_module);</span><br><span class="line">    <span class="comment">//当http请求命中该配置后，会指行如下函数</span></span><br><span class="line">    clcf-&gt;handler = ngx_http_print_handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析conf中的 配置</span></span><br><span class="line">    <span class="keyword">ngx_http_print_conf_t</span> *cur_conf = conf;</span><br><span class="line">    <span class="comment">//是一个ngx_array_t 数组 保存着ngx解析nginx.conf中的配置参数</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span> *value = cf-&gt;args-&gt;elts;</span><br><span class="line">    cur_conf-&gt;str = value[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(cf-&gt;args-&gt;nelts &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        cur_conf-&gt;num = ngx_atoi(value[<span class="number">2</span>].data,value[<span class="number">2</span>].len);</span><br><span class="line">        <span class="keyword">if</span>(cur_conf-&gt;num == NGX_ERROR)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"invalid number"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实到这里还有个重要的东西没有注意到，函数的<code>void *conf</code>指向的是我们自定义的结构体，但是内存需要我们自己申请，那么什么时候申请呢，这就需要用到<code>ngx_http_module_t</code>的特性了</p><p>该结构用于我们监听框架初始化事件，当框架启动扫描时会调用我们模块自定义的事件，并且会多次调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">http&#123;</span><br><span class="line">    print a 1;</span><br><span class="line">    server &#123;</span><br><span class="line">        print b 2;</span><br><span class="line">        location / &#123;</span><br><span class="line">            print c 3;</span><br><span class="line">        &#125;</span><br><span class="line">        location /test &#123;</span><br><span class="line">            print d 4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上就会调用4次我们自定义的函数,用于处理相关参数，也包括我们会提前预分配好内存保存</p><h3 id="4-1-绑定请求事件"><a href="#4-1-绑定请求事件" class="headerlink" title="4.1 绑定请求事件"></a>4.1 绑定请求事件</h3><p>上面可以看到我们设置了这一行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clcf-&gt;handler = ngx_http_print_handler;</span><br></pre></td></tr></table></figure></p><p>其实这行就是重点，该函数是nginx运行时请求真正的处理函数</p><p>也就是当有配置命中了我们的模块，那么自定义的函数会被介入到http框架的11个生命周期中，进行http请求处理</p><p>详情请看下面 第三部分 <code>模块请求入口函数</code> 的实现</p><h2 id="5-定义框架初始化事件"><a href="#5-定义框架初始化事件" class="headerlink" title="5.定义框架初始化事件"></a>5.定义框架初始化事件</h2><p>上面可以看到<code>ngx_http_print_module_ctx</code>是一个自定义结构体，如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_module_t</span> ngx_http_print_module_ctx = &#123;</span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//解析配置前</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//解析配置后</span></span><br><span class="line">    </span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//解析http配置</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//合并http配置</span></span><br><span class="line"></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//解析server配置</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">//合并server配置</span></span><br><span class="line"></span><br><span class="line">    create_loc_conf, <span class="comment">//解析location配置</span></span><br><span class="line">    <span class="literal">NULL</span><span class="comment">//合并location配置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其实一个<code>ngx_http_module</code>结构体，包含了8个回调函数，分别是<code>ngin.conf</code>被解析时会调用的函数，需要我们自己实现</p><p>其实上面我们只实现了一个<code>create_loc_conf</code>方法，因为在解析配置前其实是需要提前分配好需要解析的配置保存的内存，所以这就是我们准备要做的工作</p><h2 id="6-预分配自定义结构体内存"><a href="#6-预分配自定义结构体内存" class="headerlink" title="6.预分配自定义结构体内存"></a>6.预分配自定义结构体内存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//ngx_http_print_module.c</span><br><span class="line"></span><br><span class="line">static void * create_loc_conf(ngx_conf_t *cf)&#123;</span><br><span class="line">    ngx_http_print_conf_t *conf;</span><br><span class="line">    conf = ngx_pcalloc(cf-&gt;pool,sizeof(ngx_http_print_conf_t));</span><br><span class="line">    if(conf == NULL)&#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    conf-&gt;str.data = NULL;</span><br><span class="line">    conf-&gt;str.len = 0;</span><br><span class="line">    conf-&gt;num = 0;</span><br><span class="line">    return conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、模块请求入口函数"><a href="#三、模块请求入口函数" class="headerlink" title="三、模块请求入口函数"></a>三、模块请求入口函数</h1><p>这个便是本文的重点，充当了http 请求处理的角色，当有请求命中了我们定义的配置项，则如下函数会介入到请求处理生命周期中去<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ngx_http_print_module.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为http生命周期阶段的一部分 处理该请求</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span> <span class="title">ngx_http_print_handler</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(r-&gt;method &amp; NGX_HTTP_GET))&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_NOT_ALLOWED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不处理包体，直接通知不在接受客户端传递数据</span></span><br><span class="line">    <span class="comment">//这行看似可有可无，其实是当我们不处理缓存区数据，万一客户端继续发送可能会导致超时</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span> rc = ngx_http_discard_request_body(r);</span><br><span class="line">    <span class="keyword">if</span>(rc != NGX_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回响应</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span> type = ngx_string(<span class="string">"application/json"</span>);</span><br><span class="line">    <span class="keyword">ngx_str_t</span> response = ngx_string(<span class="string">" the print module"</span>);</span><br><span class="line">    <span class="comment">//设置状态码</span></span><br><span class="line">    r-&gt;headers_out.status = NGX_HTTP_OK;</span><br><span class="line">    <span class="comment">//设置响应包长度</span></span><br><span class="line">    r-&gt;headers_out.content_length_n = response.len;</span><br><span class="line">    <span class="comment">//设置content-type</span></span><br><span class="line">    r-&gt;headers_out.content_type = type;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    rc = ngx_http_send_header(r);</span><br><span class="line">    <span class="keyword">if</span>(rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;header_only)&#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造ngx_buf_t 结构体准备发送包体</span></span><br><span class="line">    <span class="keyword">ngx_buf_t</span> *b;</span><br><span class="line">    b = ngx_create_temp_buf(r-&gt;pool,response.len)</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    ngx_memcpy(b-&gt;pos,response.data,response.len);</span><br><span class="line">    b-&gt;last = b-&gt;post + response.len;</span><br><span class="line">    <span class="comment">//表明这是最后一块缓冲区</span></span><br><span class="line">    b-&gt;last_buf = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">ngx_chain_t</span> out;</span><br><span class="line">    out.buf = b;</span><br><span class="line">    out.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送包体</span></span><br><span class="line">    <span class="keyword">return</span> ngx_http_output_filter(r,&amp;out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-响应普通文本"><a href="#1-响应普通文本" class="headerlink" title="1.响应普通文本"></a>1.响应普通文本</h2><p>这个就是普通的字符串数据响应给客户端方式,本文的案例也是用的这种，返回一个普通字符数据给客户端<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造ngx_buf_t 结构体准备发送包体</span></span><br><span class="line"><span class="keyword">ngx_buf_t</span> *b;</span><br><span class="line">b = ngx_create_temp_buf(r-&gt;pool,response.len)</span><br><span class="line"><span class="keyword">if</span>(b == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">ngx_memcpy(b-&gt;pos,response.data,response.len);</span><br><span class="line">b-&gt;last = b-&gt;post + response.len;</span><br><span class="line"><span class="comment">//表明这是最后一块缓冲区</span></span><br><span class="line">b-&gt;last_buf = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ngx_chain_t</span> out;</span><br><span class="line">out.buf = b;</span><br><span class="line">out.next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>同时也可以将本地文件内容读取后返回给客户端，下面7.2的方法就可以做到</p><h2 id="2-响应本地磁盘文件"><a href="#2-响应本地磁盘文件" class="headerlink" title="2.响应本地磁盘文件"></a>2.响应本地磁盘文件</h2><p>分别定义了发送文件响应的方法</p><p>设置文件回收的事件方法，防止内存泄漏或者文件占用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">u_char* filename = (u_char*)<span class="string">"/tmp/print.html"</span>;</span><br><span class="line"> <span class="comment">//告诉nginx 实际响应的内容从文件中获取</span></span><br><span class="line"> b-&gt;in_file = <span class="number">1</span>;</span><br><span class="line"> b-&gt;file = ngx_pcalloc(r-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_file_t</span>));</span><br><span class="line"> b-&gt;file-&gt;fd = ngx_open_file(filename,NGX_FILE_RDONLY|NGX_FILE_NONBLOCK,NGX_FILE_OPEN,<span class="number">0</span>);</span><br><span class="line"> b-&gt;file-&gt;<span class="built_in">log</span> = r-&gt;connection-&gt;<span class="built_in">log</span>;</span><br><span class="line"> b-&gt;file-&gt;name.data = filename;</span><br><span class="line"> b-&gt;file-&gt;name.len = <span class="keyword">sizeof</span>(filename) <span class="number">-1</span>;</span><br><span class="line"> <span class="keyword">if</span>(b-&gt;file-&gt;fd &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">     <span class="keyword">return</span> NGX_HTTP_NOT_FOUND;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(ngx_file_info(filename,&amp;b-&gt;file-&gt;info) == NGX_FILE_ERROR)&#123;</span><br><span class="line">     <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line"> &#125;</span><br><span class="line"> r-&gt;headers_out.content_length_n = b-&gt;file-&gt;info.st_size;</span><br><span class="line"> b-&gt;file_pos = <span class="number">0</span>;</span><br><span class="line"> b-&gt;file_last = b-&gt;file-&gt;info.st_size;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">ngx_pool_cleanup_t</span>* cl = ngx_pool_cleanup_add(r-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_pool_cleanup_file_t</span>));</span><br><span class="line"> <span class="keyword">if</span>(cl == <span class="literal">NULL</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span>  NGX_ERROR;</span><br><span class="line"> &#125;</span><br><span class="line"> cl-&gt;handler = ngx_pool_cleanup_file;</span><br><span class="line"> <span class="keyword">ngx_pool_cleanup_file_t</span> *clnf = cl-&gt;data;</span><br><span class="line"> clnf-&gt;fd = b-&gt;file-&gt;fd;</span><br><span class="line"> clnf-&gt;name = b-&gt;file-&gt;name.data;</span><br><span class="line"> clnf-&gt;<span class="built_in">log</span> = r-&gt;pool-&gt;<span class="built_in">log</span>;</span><br></pre></td></tr></table></figure></p><h1 id="四、code-amp-总结"><a href="#四、code-amp-总结" class="headerlink" title="四、code &amp; 总结"></a>四、code &amp; 总结</h1><p>总的来说，每个部分nginx都提供了非常多的功能和api，本文只是简单的实现了一个从配置定义、配置触发自定义函数、以及介入http请求，响应http等例子介绍了一个nginx扩展的开发</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-moudle=/path/to/print</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 8081;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            print test 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngx_addon_name = ngx_http_print_module</span><br><span class="line">HTTP_MODULES=&quot;$HTTP_MODULES ngx_http_print_module&quot;</span><br><span class="line">NGX_ADDON_SRCS=&quot;$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_print_module.c&quot;</span><br></pre></td></tr></table></figure><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nginx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ngx_config.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ngx_core.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ngx_http.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">ngx_http_print_register</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,<span class="keyword">ngx_command_t</span> *cmd,<span class="keyword">void</span> *conf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span> <span class="title">ngx_http_print_handler</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">create_loc_conf</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">create_serv_conf</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span> str;</span><br><span class="line">    <span class="keyword">ngx_int_t</span> num;</span><br><span class="line">&#125;<span class="keyword">ngx_http_print_conf_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当解析nginx.conf 时 没发现一个如下的print配置，就会调用该set回调方法(ngx_http_print)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_command_t</span> ngx_http_print_commands[] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_string(<span class="string">"print"</span>), <span class="comment">// The command name</span></span><br><span class="line">        NGX_HTTP_LOC_CONF | NGX_HTTP_SRV_CONF| NGX_CONF_TAKE2,</span><br><span class="line">        ngx_http_print_register, <span class="comment">// The command handler</span></span><br><span class="line">        NGX_HTTP_LOC_CONF_OFFSET,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// offsetof(ngx_http_print_conf_t, str),</span></span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ngx_null_command</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//nginx.conf解析阶段，没发现一个匹配项就会调用当前函数注册相关handler 也就是请求处理的真正函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">ngx_http_print_register</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,<span class="keyword">ngx_command_t</span> *cmd,<span class="keyword">void</span> *conf)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sfdsfs"</span>);</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span> *clcf;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_conf_get_module_loc_conf(cf,ngx_http_core_module);</span><br><span class="line">    <span class="comment">//当http请求命中该配置后，会指行如下函数</span></span><br><span class="line">    clcf-&gt;handler = ngx_http_print_handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析conf中的 配置</span></span><br><span class="line">    <span class="keyword">ngx_http_print_conf_t</span> *cur_conf = conf;</span><br><span class="line">    <span class="comment">//是一个ngx_array_t 数组 保存着ngx解析nginx.conf中的配置参数</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span> *value = cf-&gt;args-&gt;elts;</span><br><span class="line">    cur_conf-&gt;str = value[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(cf-&gt;args-&gt;nelts &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        cur_conf-&gt;num = ngx_atoi(value[<span class="number">2</span>].data,value[<span class="number">2</span>].len);</span><br><span class="line">        <span class="keyword">if</span>(cur_conf-&gt;num == NGX_ERROR)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"invalid number"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在nginx启动，也就是框架初始化时会调用如下的自定义模块的回调函数</span></span><br><span class="line"><span class="comment">//如果没有什么需要做的，就不需要实现相关函数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_module_t</span> ngx_http_print_module_ctx = &#123;</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">    create_loc_conf,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">ngx_module_t</span> ngx_http_print_module = &#123;</span><br><span class="line">    NGX_MODULE_V1,</span><br><span class="line">    &amp;ngx_http_print_module_ctx,</span><br><span class="line">    ngx_http_print_commands,</span><br><span class="line">    NGX_HTTP_MODULE,</span><br><span class="line">    </span><br><span class="line">    <span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,</span><br><span class="line">    NGX_MODULE_V1_PADDING</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">create_loc_conf</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">ngx_http_print_conf_t</span> *conf;</span><br><span class="line">    conf = ngx_pcalloc(cf-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_http_print_conf_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(conf == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    conf-&gt;str.data = <span class="literal">NULL</span>;</span><br><span class="line">    conf-&gt;str.len = <span class="number">0</span>;</span><br><span class="line">    conf-&gt;num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> conf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">create_serv_conf</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">ngx_http_print_conf_t</span> *conf;</span><br><span class="line">    conf = ngx_pcalloc(cf-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_http_print_conf_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(conf == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    conf-&gt;str.data = <span class="literal">NULL</span>;</span><br><span class="line">    conf-&gt;str.len = <span class="number">0</span>;</span><br><span class="line">    conf-&gt;num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> conf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span>  <span class="title">response_file</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">ngx_str_t</span> type = ngx_string(<span class="string">"application/json"</span>);</span><br><span class="line">    u_char* filename = (u_char*)<span class="string">"/tmp/print.html"</span>;</span><br><span class="line">    <span class="keyword">ngx_buf_t</span> *b = ngx_palloc(r-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_buf_t</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置状态码</span></span><br><span class="line">    r-&gt;headers_out.status = NGX_HTTP_OK;</span><br><span class="line">    <span class="comment">//设置content-type</span></span><br><span class="line">    r-&gt;headers_out.content_type = type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉nginx 实际响应的内容从文件中获取</span></span><br><span class="line">    b-&gt;in_file = <span class="number">1</span>;</span><br><span class="line">    b-&gt;file = ngx_pcalloc(r-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_file_t</span>));</span><br><span class="line">    b-&gt;file-&gt;fd = ngx_open_file(filename,NGX_FILE_RDONLY|NGX_FILE_NONBLOCK,NGX_FILE_OPEN,<span class="number">0</span>);</span><br><span class="line">    b-&gt;file-&gt;<span class="built_in">log</span> = r-&gt;connection-&gt;<span class="built_in">log</span>;</span><br><span class="line">    b-&gt;file-&gt;name.data = filename;</span><br><span class="line">    b-&gt;file-&gt;name.len = <span class="keyword">sizeof</span>(filename) <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b-&gt;file-&gt;fd &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ngx_file_info(filename,&amp;b-&gt;file-&gt;info) == NGX_FILE_ERROR)&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;headers_out.content_length_n = b-&gt;file-&gt;info.st_size;</span><br><span class="line">    b-&gt;file_pos = <span class="number">0</span>;</span><br><span class="line">    b-&gt;file_last = b-&gt;file-&gt;info.st_size;</span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span> rc = ngx_http_send_header(r);</span><br><span class="line">    <span class="keyword">if</span>(rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;header_only)&#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_pool_cleanup_t</span>* cl = ngx_pool_cleanup_add(r-&gt;pool,<span class="keyword">sizeof</span>(<span class="keyword">ngx_pool_cleanup_file_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(cl == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    cl-&gt;handler = ngx_pool_cleanup_file;</span><br><span class="line">    <span class="keyword">ngx_pool_cleanup_file_t</span> *clnf = cl-&gt;data;</span><br><span class="line">    clnf-&gt;fd = b-&gt;file-&gt;fd;</span><br><span class="line">    clnf-&gt;name = b-&gt;file-&gt;name.data;</span><br><span class="line">    clnf-&gt;<span class="built_in">log</span> = r-&gt;pool-&gt;<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_http_print_conf_t</span> *cf = (<span class="keyword">ngx_http_print_conf_t</span>*)r-&gt;loc_conf[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_chain_t</span> out;</span><br><span class="line">    out.buf = b;</span><br><span class="line">    out.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送包体</span></span><br><span class="line">    <span class="keyword">return</span> ngx_http_output_filter(r,&amp;out);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span> <span class="title">response_str</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span> type = ngx_string(<span class="string">"application/json"</span>);</span><br><span class="line">    <span class="keyword">ngx_str_t</span> response = ngx_string(<span class="string">" the print module"</span>);</span><br><span class="line">        <span class="comment">//设置状态码</span></span><br><span class="line">    r-&gt;headers_out.status = NGX_HTTP_OK;</span><br><span class="line">    <span class="comment">//设置content-type</span></span><br><span class="line">    r-&gt;headers_out.content_type = type;</span><br><span class="line">    <span class="comment">//设置状态码</span></span><br><span class="line">    r-&gt;headers_out.status = NGX_HTTP_OK;</span><br><span class="line">    <span class="comment">//设置响应包长度</span></span><br><span class="line">    r-&gt;headers_out.content_length_n = response.len;</span><br><span class="line">    <span class="comment">//设置content-type</span></span><br><span class="line">    r-&gt;headers_out.content_type = type;</span><br><span class="line">    <span class="comment">//构造ngx_buf_t 结构体准备发送包体</span></span><br><span class="line">            <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span> rc = ngx_http_send_header(r);</span><br><span class="line">    <span class="keyword">if</span>(rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;header_only)&#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_buf_t</span> *b = ngx_create_temp_buf(r-&gt;pool,response.len);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    ngx_memcpy(b-&gt;pos,response.data,response.len);</span><br><span class="line">    b-&gt;last = b-&gt;pos + response.len;</span><br><span class="line">    <span class="comment">//表明这是最后一块缓冲区</span></span><br><span class="line">    b-&gt;last_buf = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_chain_t</span> out;</span><br><span class="line">    out.buf = b;</span><br><span class="line">    out.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送包体</span></span><br><span class="line">    <span class="keyword">return</span> ngx_http_output_filter(r,&amp;out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为http生命周期阶段的一部分 处理该请求</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span> <span class="title">ngx_http_print_handler</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(r-&gt;method &amp; NGX_HTTP_GET))&#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_NOT_ALLOWED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不处理包体，直接通知不在接受客户端传递数据</span></span><br><span class="line">    <span class="comment">//这行看似可有可无，其实是当我们不处理缓存区数据，万一客户端继续发送可能会导致超时</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span> rc = ngx_http_discard_request_body(r);</span><br><span class="line">    <span class="keyword">if</span>(rc != NGX_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response_str(r);</span><br><span class="line">    <span class="comment">// return response_file(r);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-流程的生命周期&quot;&gt;&lt;a href=&quot;#http-流程的生命周期&quot; class=&quot;headerlink&quot; title=&quot;http 流程的生命周期&quot;&gt;&lt;/a&gt;http 流程的生命周期&lt;/h1&gt;&lt;p&gt;在开发模块前我们需要了解http流程的生命周期，然后确定我们
      
    
    </summary>
    
      <category term="blog" scheme="http://wiki.brewlin.com/categories/blog/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/categories/blog/nginx/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://wiki.brewlin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>core</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/core/core/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/core/core/</id>
    <published>2020-02-05T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h2><p>注解扫描</p><h2 id="config"><a href="#config" class="headerlink" title="@config"></a>@config</h2><p>配置读取</p><h2 id="container"><a href="#container" class="headerlink" title="@container"></a>@container</h2><p>容器单利初始化</p><h2 id="event"><a href="#event" class="headerlink" title="@event"></a>@event</h2><p>swoole事件封装</p><h2 id="context"><a href="#context" class="headerlink" title="@context"></a>@context</h2><p>携程上下文</p><h2 id="pool"><a href="#pool" class="headerlink" title="@pool"></a>@pool</h2><p>连接池封装</p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>框架启动、swoole启动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;annotation&quot;&gt;&lt;a href=&quot;#annotation&quot; class=&quot;headerlink&quot; title=&quot;@annotation&quot;&gt;&lt;/a&gt;@annotation&lt;/h2&gt;&lt;p&gt;注解扫描&lt;/p&gt;
&lt;h2 id=&quot;config&quot;&gt;&lt;a href=&quot;#c
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="core" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/core/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="core" scheme="http://wiki.brewlin.com/tags/core/"/>
    
  </entry>
  
  <entry>
    <title>discovery</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/discovery/discovery/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/discovery/discovery/</id>
    <published>2020-01-31T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="env-配置文件"><a href="#env-配置文件" class="headerlink" title="@env 配置文件"></a>@env 配置文件</h2><p>discovery.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'consul'</span> =&gt; [</span><br><span class="line">        <span class="string">'address'</span> =&gt; env(<span class="string">"DISCOVERY_ADDRESS"</span>,<span class="string">"127.0.0.1"</span>),</span><br><span class="line">        <span class="string">'port'</span>    =&gt; env(<span class="string">"DISCOVERY_PORT"</span>,<span class="string">"8500"</span>),</span><br><span class="line">        <span class="string">'register'</span> =&gt; [</span><br><span class="line">            <span class="string">'ID'</span>                =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="comment">//只注册了grpc 服务，其他都是私有的</span></span><br><span class="line">            <span class="comment">//tcp 和websocket   通过nginx负载均衡即可</span></span><br><span class="line">            <span class="string">'Name'</span>              =&gt; <span class="string">'grpc-im-cloud-node'</span>,</span><br><span class="line">            <span class="string">'Tags'</span>              =&gt; [],</span><br><span class="line">            <span class="string">'enableTagOverride'</span>=&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'Address'</span>           =&gt; env(<span class="string">"APP_HOST"</span>,<span class="string">"127.0.0.1"</span>),</span><br><span class="line">            <span class="string">'Port'</span>              =&gt; (int)env(<span class="string">"GRPC_PORT"</span>,<span class="number">9500</span>),</span><br><span class="line">            <span class="string">'Check'</span>             =&gt; [</span><br><span class="line">                <span class="string">'id'</span>       =&gt; <span class="string">''</span>,</span><br><span class="line">                <span class="string">'name'</span>     =&gt; <span class="string">''</span>,</span><br><span class="line">                <span class="string">'http'</span>      =&gt; <span class="string">"http://127.0.0.1:"</span>.env(<span class="string">'DISCOVERY_CHECK_PORT'</span>,<span class="number">9500</span>).<span class="string">"/health"</span>,</span><br><span class="line">                <span class="string">'interval'</span> =&gt; <span class="string">"10s"</span>,</span><br><span class="line">                <span class="string">'timeout'</span>  =&gt; <span class="string">"10s"</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'discovery'</span> =&gt; [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="string">'grpc-im-logic-node'</span>,</span><br><span class="line">            <span class="string">'dc'</span> =&gt; <span class="string">'dc1'</span>,</span><br><span class="line">            <span class="string">'near'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'tag'</span> =&gt;<span class="string">''</span>,</span><br><span class="line">            <span class="string">'passing'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h2 id="register-注册服务"><a href="#register-注册服务" class="headerlink" title="@register 注册服务"></a>@register 注册服务</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$registerStatus = provider()-&gt;select()-&gt;registerService();</span><br><span class="line"><span class="keyword">if</span>(!$registerStatus)&#123;</span><br><span class="line">    CLog::error(<span class="string">"consul register false sleep 1 sec to reregiseter"</span>);</span><br><span class="line">    Coroutine::sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deregister-注销节点"><a href="#deregister-注销节点" class="headerlink" title="@deregister 注销节点"></a>@deregister 注销节点</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注销节点</span></span><br><span class="line">$discovery = config(<span class="string">"discovery"</span>);</span><br><span class="line">provider()-&gt;select()-&gt;deregisterService($discovery[<span class="string">'consul'</span>][<span class="string">"register"</span>][<span class="string">'Name'</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;env-配置文件&quot;&gt;&lt;a href=&quot;#env-配置文件&quot; class=&quot;headerlink&quot; title=&quot;@env 配置文件&quot;&gt;&lt;/a&gt;@env 配置文件&lt;/h2&gt;&lt;p&gt;discovery.php&lt;br&gt;&lt;figure class=&quot;highlight ph
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="discovery" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/discovery/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="discovery" scheme="http://wiki.brewlin.com/tags/discovery/"/>
    
  </entry>
  
  <entry>
    <title>db</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/database/db/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/database/db/</id>
    <published>2020-01-29T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置结果集为-array"><a href="#设置结果集为-array" class="headerlink" title="@设置结果集为 array"></a>@设置结果集为 array</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Core</span>\<span class="title">Event</span>\<span class="title">EventDispatcherInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Core</span>\<span class="title">Event</span>\<span class="title">EventEnum</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Core</span>\<span class="title">Event</span>\<span class="title">Mapping</span>\<span class="title">Event</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Database</span>\<span class="title">Events</span>\<span class="title">StatementPrepared</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PDO</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Event</span>(alias=EventEnum::DbFetchMode)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchModeEvent</span> <span class="keyword">implements</span> <span class="title">EventDispatcherInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(...$param)</span></span>&#123;</span><br><span class="line">        $event = $param[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ($event <span class="keyword">instanceof</span> StatementPrepared) &#123;</span><br><span class="line">            $event-&gt;statement-&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="db-操作"><a href="#db-操作" class="headerlink" title="@db 操作"></a>@db 操作</h2><p><a href="https://hyperf.wiki/#/zh-cn/db/querybuilder">https://hyperf.wiki/#/zh-cn/db/querybuilder</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设置结果集为-array&quot;&gt;&lt;a href=&quot;#设置结果集为-array&quot; class=&quot;headerlink&quot; title=&quot;@设置结果集为 array&quot;&gt;&lt;/a&gt;@设置结果集为 array&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="database" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/database/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="database" scheme="http://wiki.brewlin.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>queue</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/queue/queue/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/queue/queue/</id>
    <published>2020-01-28T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="producer-生产数据"><a href="#producer-生产数据" class="headerlink" title="@producer 生产数据"></a>@producer 生产数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Lib</span>\<span class="title">Producer</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> Producer $producers */</span></span><br><span class="line">$producers = \bean(Producer::class);</span><br><span class="line"><span class="comment">//发送到队列里</span></span><br><span class="line">producer()-&gt;produce($producers-&gt;producer($pushmsg));</span><br></pre></td></tr></table></figure><h2 id="consumer-消费队列数据"><a href="#consumer-消费队列数据" class="headerlink" title="@consumer 消费队列数据"></a>@consumer 消费队列数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">ImQueue</span>\<span class="title">Amqp</span>\<span class="title">Message</span>\<span class="title">ConsumerMessage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">ImQueue</span>\<span class="title">Amqp</span>\<span class="title">Result</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Lib</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">ConsumerMessage</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setExchange(env(<span class="string">"EXCHANGE"</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setQueue(env(<span class="string">"QUEUE"</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setRoutingKey(env(<span class="string">"ROUTE_KEY"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主流程消费数据入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> PushMsg $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">consume</span><span class="params">($data)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result::ACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新排队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isRequeue</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;producer-生产数据&quot;&gt;&lt;a href=&quot;#producer-生产数据&quot; class=&quot;headerlink&quot; title=&quot;@producer 生产数据&quot;&gt;&lt;/a&gt;@producer 生产数据&lt;/h2&gt;&lt;figure class=&quot;highlight ph
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="queue" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/queue/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="queue" scheme="http://wiki.brewlin.com/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>grpc</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/grpc/grpc/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/grpc/grpc/</id>
    <published>2020-01-27T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="build"><a href="#build" class="headerlink" title="@build"></a>@build</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd pkg/grpc/bin</span><br><span class="line">&gt; sh  gen.sh</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h2 id="method-grpc-调用"><a href="#method-grpc-调用" class="headerlink" title="@method grpc 调用"></a>@method grpc 调用</h2><p>组件封装有连接池机制，复用多个连接<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Grpc</span>\<span class="title">Client</span>\<span class="title">GrpcLogicClient</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Im</span>\<span class="title">Cloud</span>\<span class="title">Operation</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Im</span>\<span class="title">Logic</span>\<span class="title">HeartbeatReq</span>;</span><br><span class="line"></span><br><span class="line">$heartBeatReq = <span class="keyword">new</span> HeartbeatReq();</span><br><span class="line">$host = env(<span class="string">"APP_HOST"</span>,<span class="string">"127.0.0.1"</span>).<span class="string">":"</span>.env(<span class="string">"GRPC_PORT"</span>,<span class="number">9500</span>);</span><br><span class="line">$heartBeatReq-&gt;setServer($host);</span><br><span class="line">$heartBeatReq-&gt;setKey($key);</span><br><span class="line">$heartBeatReq-&gt;setMid($mid);</span><br><span class="line">GrpcLogicClient::Heartbeat($grpcServer,$heartBeatReq);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;build&quot;&gt;&lt;a href=&quot;#build&quot; class=&quot;headerlink&quot; title=&quot;@build&quot;&gt;&lt;/a&gt;@build&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="grpc" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/grpc/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="grpc" scheme="http://wiki.brewlin.com/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>memory</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/memeory/memeory/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/memeory/memeory/</id>
    <published>2020-01-26T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="construct"><a href="#construct" class="headerlink" title="@construct"></a>@construct</h2><p>使用bean注解自动注入到container中，在swoole启动前就需要申请好内存并初始化，所以需要使用bean注解<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Core</span>\<span class="title">Container</span>\<span class="title">Mapping</span>\<span class="title">Bean</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Memory</span>\<span class="title">Table</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Memory</span>\<span class="title">Table</span>\<span class="title">Type</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Memory</span>\<span class="title">Table</span>\<span class="title">MemoryTable</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span>()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $table = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CloudClient constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $memorySize = (int)env(<span class="string">"MEMORY_TABLE"</span>,<span class="number">1000</span>);</span><br><span class="line">        $column = [</span><br><span class="line">            <span class="string">"Address"</span> =&gt; [Type::String,<span class="number">20</span>],</span><br><span class="line">            <span class="string">"Port"</span>    =&gt; [Type::String,<span class="number">10</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">self</span>::$table = Table::create($memorySize,$column);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Table：：create-创建共享内存"><a href="#Table：：create-创建共享内存" class="headerlink" title="@Table：：create 创建共享内存"></a>@Table：：create 创建共享内存</h2><ul><li>size  内存大小</li><li>column 数据结构</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;construct&quot;&gt;&lt;a href=&quot;#construct&quot; class=&quot;headerlink&quot; title=&quot;@construct&quot;&gt;&lt;/a&gt;@construct&lt;/h2&gt;&lt;p&gt;使用bean注解自动注入到container中，在swoole启动前就需要申请好
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="memeory" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/memeory/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="memory" scheme="http://wiki.brewlin.com/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>process</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/process/process/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/process/process/</id>
    <published>2020-01-25T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="construct"><a href="#construct" class="headerlink" title="@construct"></a>@construct</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Process</span>\<span class="title">Contract</span>\<span class="title">AbstractProcess</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoProcess</span> <span class="keyword">extends</span> <span class="title">AbstractProcess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">"process_name"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义子进程 执行入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Process $process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(Process $process)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="register-注册自定义进程"><a href="#register-注册自定义进程" class="headerlink" title="@register 注册自定义进程"></a>@register 注册自定义进程</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessManager::register(<span class="string">"demo-process"</span>,<span class="keyword">new</span> DemoProcess());</span><br></pre></td></tr></table></figure><h2 id="start-启动"><a href="#start-启动" class="headerlink" title="@start 启动"></a>@start 启动</h2><p>主动伴随swoole进程模型启动，交由swoole mangager进程管理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;construct&quot;&gt;&lt;a href=&quot;#construct&quot; class=&quot;headerlink&quot; title=&quot;@construct&quot;&gt;&lt;/a&gt;@construct&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="process" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/process/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="process" scheme="http://wiki.brewlin.com/tags/process/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/redis/redis/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/redis/redis/</id>
    <published>2020-01-23T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class"><a href="#class" class="headerlink" title="@class"></a>@class</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis::hSet(<span class="string">"hkey"</span>,$key,$server);</span><br></pre></td></tr></table></figure><h2 id="api"><a href="#api" class="headerlink" title="@api"></a>@api</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">* @method <span class="keyword">static</span> int append(string $key, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> blPop(<span class="keyword">array</span> $keys, int $timeout)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> brPop(<span class="keyword">array</span> $keys, int $timeout)</span><br><span class="line">* @method <span class="keyword">static</span> string brpoplpush(string $srcKey, string $dstKey, int $timeout)</span><br><span class="line">* @method <span class="keyword">static</span> string decr(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int decrBy(string $key, int $value)</span><br><span class="line">* @method <span class="keyword">static</span> mixed <span class="keyword">eval</span>(string $script, <span class="keyword">array</span> $args = [], int $numKeys = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> mixed evalSha(string $scriptSha, <span class="keyword">array</span> $args = [], int $numKeys = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> bool exists(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int geoAdd(string $key, float $longitude, float $latitude, string $member)</span><br><span class="line">* @method <span class="keyword">static</span> float geoDist(string $key, string $member1, string $member2, string $unit = <span class="string">'m'</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> geohash(string $key, string $member1, string $member2 = <span class="keyword">null</span>, string $memberN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> geopos(string $key, string $member1, string $member2 = <span class="keyword">null</span>, string $memberN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> mixed|bool get(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int getBit(string $key, int $offset)</span><br><span class="line">* @method <span class="keyword">static</span> int getOption(string $name)</span><br><span class="line">* @method <span class="keyword">static</span> string getRange(string $key, int $start, int $end)</span><br><span class="line">* @method <span class="keyword">static</span> string getSet(string $key, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> string hDel(string $key, string $hashKey1, string $hashKey2 = <span class="keyword">null</span>, string $hashKeyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> bool hExists(string $key, string $hashKey)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hGet(string $key, <span class="keyword">array</span> $hashKey)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hGetAll(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int hIncrBy(string $key, string $hashKey, int $value)</span><br><span class="line">* @method <span class="keyword">static</span> float hIncrByFloat(string $key, string $field, float $increment)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hKeys(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int hLen(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int hSet(string $key, string $hashKey, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> bool hSetNx(string $key, string $hashKey, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hVals(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hScan(string $key, int &amp;$iterator, string $pattern = <span class="keyword">null</span>, int $count = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int incr(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int incrBy(string $key, int $value)</span><br><span class="line">* @method <span class="keyword">static</span> float incrByFloat(string $key, float $increment)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> info(string $option = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> string|bool lGet(string $key, int $index)</span><br><span class="line">* @method <span class="keyword">static</span> int lInsert(string $key, int $position, string $pivot, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> string|bool lPop(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool lPush(string $key, string $value1, string $value2 = <span class="keyword">null</span>, string $valueN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool lPushx(string $key, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> bool lSet(string $key, int $index, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> int msetnx(<span class="keyword">array</span> $array)</span><br><span class="line">* @method <span class="keyword">static</span> bool persist(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> bool pExpire(string $key, int $ttl)</span><br><span class="line">* @method <span class="keyword">static</span> bool pExpireAt(string $key, int $timestamp)</span><br><span class="line">* @method <span class="keyword">static</span> bool psetex(string $key, int $ttl, $value)</span><br><span class="line">* @method <span class="keyword">static</span> int pttl(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> string rPop(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool rPush(string $key, string $value1, string $value2 = <span class="keyword">null</span>, string $valueN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool rPushx(string $key, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> mixed rawCommand(string|<span class="keyword">array</span> $nodeParams, string $command, mixed $arguments)</span><br><span class="line">* @method <span class="keyword">static</span> bool renameNx(string $srcKey, string $dstKey)</span><br><span class="line">* @method <span class="keyword">static</span> bool restore(string $key, int $ttl, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> string rpoplpush(string $srcKey, string $dstKey)</span><br><span class="line">* @method <span class="keyword">static</span> int sAdd(string $key, string $value1, string $value2 = <span class="keyword">null</span>, string $valueN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int sAddArray(string $key, <span class="keyword">array</span> $valueArray)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sDiff(string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int sDiffStore(string $dstKey, string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sInter(string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool sInterStore(string $dstKey, string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sMembers(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> bool sMove(string $srcKey, string $dstKey, string $member)</span><br><span class="line">* @method <span class="keyword">static</span> string|bool sPop(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> string|<span class="keyword">array</span>|bool sRandMember(string $key, int $count = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sUnion(string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int sUnionStore(string $dstKey, string $key1, string $key2, string $keyN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span>|bool scan(int &amp;$iterator, string $pattern = <span class="keyword">null</span>, int $count = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> mixed script(string|<span class="keyword">array</span> $nodeParams, string $command, string $script)</span><br><span class="line">* @method <span class="keyword">static</span> bool set(string $key, $value, int $timeout = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int setBit(string $key, int $offset, int $value)</span><br><span class="line">* @method <span class="keyword">static</span> string setRange(string $key, int $offset, $value)</span><br><span class="line">* @method <span class="keyword">static</span> int setex(string $key, int $ttl, $value)</span><br><span class="line">* @method <span class="keyword">static</span> bool setnx(string $key, $value)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sort(string $key, <span class="keyword">array</span> $option = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> sScan(string $key, int &amp;$iterator, string $pattern = <span class="keyword">null</span>, int $count = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int strlen(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int ttl(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int type(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> void unwatch()</span><br><span class="line">* @method <span class="keyword">static</span> void watch(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int zCard(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> int zCount(string $key, int $start, int $end)</span><br><span class="line">* @method <span class="keyword">static</span> float zIncrBy(string $key, float $value, string $member)</span><br><span class="line">* @method <span class="keyword">static</span> int zLexCount(string $key, int $min, int $max)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRange(string $key, int $start, int $end, bool $withscores = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRangeByLex(string $key, int $min, int $max, int $offset = <span class="keyword">null</span>, int $limit = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRangeByScore(string $key, string $start, string $end, <span class="keyword">array</span> $options = [])</span><br><span class="line">* @method <span class="keyword">static</span> int zRank(string $key, string $member)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRemRangeByLex(string $key, int $min, int $max)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRevRange(string $key, int $start, int $end, bool $withscore = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRevRangeByLex(string $key, int $min, int $max, int $offset = <span class="keyword">null</span>, int $limit = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zRevRangeByScore(string $key, int $start, int $end, <span class="keyword">array</span> $options = [])</span><br><span class="line">* @method <span class="keyword">static</span> int zRevRank(string $key, string $member)</span><br><span class="line">* @method <span class="keyword">static</span> float zScore(string $key, float $member)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> zScan(string $key, int &amp;$iterator, string $pattern = <span class="keyword">null</span>, int $count = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int del(string $key1, string $key2 = <span class="keyword">null</span>, string $key3 = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> bool expire(string $key, int $ttl)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> keys(string $pattern)</span><br><span class="line">* @method <span class="keyword">static</span> int lLen(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> string|bool lIndex(string $key, int $index)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> lRange(string $key, int $start, int $end)</span><br><span class="line">* @method <span class="keyword">static</span> int|bool lRem(string $key, string $value, int $count)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span>|bool lTrim(string $key, int $start, int $stop)</span><br><span class="line">* @method <span class="keyword">static</span> bool rename(string $srcKey, string $dstKey)</span><br><span class="line">* @method <span class="keyword">static</span> int sCard(string $key)</span><br><span class="line">* @method <span class="keyword">static</span> bool sIsMember(string $key, string $value)</span><br><span class="line">* @method <span class="keyword">static</span> int sRem(string $key, string $member1, string $member2 = <span class="keyword">null</span>, string $memberN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int zRem(string $key, string $member1, string $member2 = <span class="keyword">null</span>, string $memberN = <span class="keyword">null</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int zRemRangeByRank(string $key, int $start, int $end)</span><br><span class="line">* @method <span class="keyword">static</span> int zRemRangeByScore(string $key, float|string $start, float|string $end)</span><br><span class="line">* @method <span class="keyword">static</span> int zInterStore(string $Output, <span class="keyword">array</span> $ZSetKeys, <span class="keyword">array</span> $Weights = <span class="keyword">null</span>, string $aggregateFunction = <span class="string">'SUM'</span>)</span><br><span class="line">* @method <span class="keyword">static</span> int zUnionStore(string $Output, <span class="keyword">array</span> $ZSetKeys, <span class="keyword">array</span> $Weights = <span class="keyword">null</span>, string $aggregateFunction = <span class="string">'SUM'</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> hMGet(string $key, <span class="keyword">array</span> $keys)</span><br><span class="line">* @method <span class="keyword">static</span> bool hMSet(string $key, <span class="keyword">array</span> $keyValues)</span><br><span class="line">* @method <span class="keyword">static</span> int zAdd(string $key, <span class="keyword">array</span> $scoreValues)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> mget(<span class="keyword">array</span> $keys)</span><br><span class="line">* @method <span class="keyword">static</span> bool mset(<span class="keyword">array</span> $keyValues, int $ttl = <span class="number">0</span>)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> pipeline(callable $callback)</span><br><span class="line">* @method <span class="keyword">static</span> <span class="keyword">array</span> transaction(callable $callback)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;@class&quot;&gt;&lt;/a&gt;@class&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="redis" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/redis/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="redis" scheme="http://wiki.brewlin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>log</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/log/log/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/log/log/</id>
    <published>2020-01-22T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Log-输出到日志文件-amp-amp-Clog-输出到终端"><a href="#Log-输出到日志文件-amp-amp-Clog-输出到终端" class="headerlink" title="@Log  输出到日志文件 &amp;&amp; Clog 输出到终端"></a>@Log  输出到日志文件 &amp;&amp; Clog 输出到终端</h2><h2 id="emergency-level"><a href="#emergency-level" class="headerlink" title="@emergency level"></a>@emergency level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::emergency(message,param);</span><br><span class="line">CLog::emergency(message,param);</span><br></pre></td></tr></table></figure><h2 id="info-level"><a href="#info-level" class="headerlink" title="@info level"></a>@info level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::info(message,param);</span><br><span class="line">CLog::info(message,param);</span><br></pre></td></tr></table></figure><h2 id="error-level"><a href="#error-level" class="headerlink" title="@error level"></a>@error level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::error(message,param);</span><br><span class="line">CLog::error(message,param);</span><br></pre></td></tr></table></figure><h2 id="debug-level"><a href="#debug-level" class="headerlink" title="@debug level"></a>@debug level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::debug(message,param);</span><br><span class="line">CLog::debug(message,param);</span><br></pre></td></tr></table></figure><h2 id="alert-level"><a href="#alert-level" class="headerlink" title="@alert level"></a>@alert level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::alert(message,param);</span><br><span class="line">CLog::alert(message,param);</span><br></pre></td></tr></table></figure><h2 id="warning-level"><a href="#warning-level" class="headerlink" title="@warning level"></a>@warning level</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log::warning(message,param);</span><br><span class="line">CLog::warning(message,param);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Log-输出到日志文件-amp-amp-Clog-输出到终端&quot;&gt;&lt;a href=&quot;#Log-输出到日志文件-amp-amp-Clog-输出到终端&quot; class=&quot;headerlink&quot; title=&quot;@Log  输出到日志文件 &amp;amp;&amp;amp; Clog 输出
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="log" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/log/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="log" scheme="http://wiki.brewlin.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>task</title>
    <link href="http://wiki.brewlin.com/wiki/im-cloud/3.%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/task/task/"/>
    <id>http://wiki.brewlin.com/wiki/im-cloud/3.相关组件/task/task/</id>
    <published>2020-01-21T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="composer"><a href="#composer" class="headerlink" title="@composer"></a>@composer</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"require"</span>:&#123;</span><br><span class="line">    <span class="string">"brewlin/im-task"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="@class"></a>@class</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="diliver-发送异步任务"><a href="#diliver-发送异步任务" class="headerlink" title="@diliver 发送异步任务"></a>@diliver 发送异步任务</h2><p>通过<code>deliver</code>方法可以直接在task进程中执行对应object的方法到达异步执行任务<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">namespace</span> <span class="title">example</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> Task $task */</span></span><br><span class="line">\bean(Task::class)-&gt;deliver(example::class,<span class="string">"method"</span>,[arg1,arg2,arg3.....]);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;composer&quot;&gt;&lt;a href=&quot;#composer&quot; class=&quot;headerlink&quot; title=&quot;@composer&quot;&gt;&lt;/a&gt;@composer&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="im-cloud" scheme="http://wiki.brewlin.com/categories/im-cloud/"/>
    
      <category term="3.相关组件" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    
      <category term="task" scheme="http://wiki.brewlin.com/categories/im-cloud/3-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/task/"/>
    
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="swoole" scheme="http://wiki.brewlin.com/tags/swoole/"/>
    
      <category term="coroutine" scheme="http://wiki.brewlin.com/tags/coroutine/"/>
    
      <category term="task" scheme="http://wiki.brewlin.com/tags/task/"/>
    
  </entry>
  
  <entry>
    <title>runtime</title>
    <link href="http://wiki.brewlin.com/wiki/c-ext/hook/runtime/"/>
    <id>http://wiki.brewlin.com/wiki/c-ext/hook/runtime/</id>
    <published>2020-01-13T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lib-runtime-enableCorutine-启动hook机制"><a href="#Lib-runtime-enableCorutine-启动hook机制" class="headerlink" title="Lib\runtime::enableCorutine 启动hook机制"></a><code>Lib\runtime::enableCorutine</code> 启动hook机制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Lib\Runtime::enableCoroutine();</span><br><span class="line"></span><br><span class="line">cgo(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>); <span class="comment">// == Cco::sleep(1);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lib-runtime-enableCorutine-启动hook机制&quot;&gt;&lt;a href=&quot;#Lib-runtime-enableCorutine-启动hook机制&quot; class=&quot;headerlink&quot; title=&quot;Lib\runtime::enableCor
      
    
    </summary>
    
      <category term="c-ext" scheme="http://wiki.brewlin.com/categories/c-ext/"/>
    
      <category term="hook" scheme="http://wiki.brewlin.com/categories/c-ext/hook/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="hook" scheme="http://wiki.brewlin.com/tags/hook/"/>
    
      <category term="runtime" scheme="http://wiki.brewlin.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>sleep</title>
    <link href="http://wiki.brewlin.com/wiki/c-ext/hook/sleep/"/>
    <id>http://wiki.brewlin.com/wiki/c-ext/hook/sleep/</id>
    <published>2020-01-13T13:28:59.000Z</published>
    <updated>2020-04-14T15:52:56.687Z</updated>
    
    <content type="html"><![CDATA[<p>在扩展内替换原生php内置sleep函数，使原有基于sleep的代码自动进行替换为协程<code>Cco::sleep()</code>调用</p><h2 id="协程sleep"><a href="#协程sleep" class="headerlink" title="@协程sleep"></a>@协程sleep</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cgo(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cco::sleep(<span class="number">1</span>);<span class="comment">//协程切换</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="原生sleep"><a href="#原生sleep" class="headerlink" title="@原生sleep"></a>@原生sleep</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cgo(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);<span class="comment">//进程阻塞</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="hook-sleep"><a href="#hook-sleep" class="headerlink" title="@hook sleep"></a>@hook sleep</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Lib\Runtime::enableCoroutine();</span><br><span class="line">cgo(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);<span class="comment">//协程切换</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在扩展内替换原生php内置sleep函数，使原有基于sleep的代码自动进行替换为协程&lt;code&gt;Cco::sleep()&lt;/code&gt;调用&lt;/p&gt;
&lt;h2 id=&quot;协程sleep&quot;&gt;&lt;a href=&quot;#协程sleep&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="c-ext" scheme="http://wiki.brewlin.com/categories/c-ext/"/>
    
      <category term="hook" scheme="http://wiki.brewlin.com/categories/c-ext/hook/"/>
    
    
      <category term="c" scheme="http://wiki.brewlin.com/tags/c/"/>
    
      <category term="php" scheme="http://wiki.brewlin.com/tags/php/"/>
    
      <category term="ext" scheme="http://wiki.brewlin.com/tags/ext/"/>
    
      <category term="linux" scheme="http://wiki.brewlin.com/tags/linux/"/>
    
      <category term="hook" scheme="http://wiki.brewlin.com/tags/hook/"/>
    
      <category term="sleep" scheme="http://wiki.brewlin.com/tags/sleep/"/>
    
  </entry>
  
</feed>
